# COPYRIGHT 1987-2012 ROBERT B. K. DEWAR AND MARK EMMER.
# 
# THIS FILE IS PART OF MACRO SPITBOL.
# 
#     MACRO SPITBOL IS FREE SOFTWARE: YOU CAN REDISTRIBUTE IT AND/OR MODIFY
#     IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
#     THE FREE SOFTWARE FOUNDATION, EITHER VERSION 3 OF THE LICENSE, OR
#     (AT YOUR OPTION) ANY LATER VERSION.
# 
#     MACRO SPITBOL IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
#     BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
#     MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
#     GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
# 
#     YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
#     ALONG WITH MACRO SPITBOL.  IF NOT, SEE <HTTP://WWW.GNU.ORG/LICENSES/>.

# CONFIGURATION INFORMATION FOR INTER.S
#
LINUX=1
WINNT=0

#        SEGMENT DECLARATIONS MACROS
#
                .MACRO          CSEG_           # OPEN A CODE SEGMENT
                .SECTION        .TEXT
                .ENDM

                .MACRO          CSEGEND_        # CLOSE A CODE SEGMENT
                .ENDM

                .MACRO          DSEG_           # OPEN A DATA SEGMENT
                .SECTION        .DATA
                .ENDM

                .MACRO          DSEGEND_        # CLOSE A DATA SEGMENT
                .ENDM

                .MACRO          BSSSEG_         # OPEN A BSS SEGMENT
                .SECTION        .BSS
                .ENDM

                .MACRO          BSSSEGEND_      # CLOSE A BSS SEGMENT
                .ENDM

                .MACRO          HEADER_         # GROUP AND ASSUME DIRECTIVES
                CSEG_
                CSEGEND_
                DSEG_
                DSEGEND_
                .ENDM

# STRUCTURE DEFINITION MACROS
#
        .MACRO  STRUC NAME
        .STRUCT 0
        .ENDM

        .MACRO  ENDS NAME
        DSEG_
        .ENDM

# DEFINE HOW DATA LOCATIONS IN THE MINIMAL CODE ARE ACCESSED FROM
# ASSEMBLY-LANGUAGE AND C ROUTINES.  "DIRECT" IS NON-ZERO TO MAKE
# THE SYMBOLS PUBLIC FOR DIRECT ACCESS, ZERO TO HAVE ACCESS VIA
# A TABLE OF POINTERS AND THE MINADR PROCEDURE.
#
DIRECT=1

# DEFINE HOW FLOATING POINT RESULTS ARE RETURNED FROM A FUNCTION
# (EITHER IN ST(0) OR IN EDX:EAX.
FRETST0=1
FRETEAX=0

# MACROS DEFINING WHETHER A LEADING UNDERSCORE IS REQUIRED FOR PUBLIC MINIMAL
# NAMES THAT WILL BE REFERENCED FROM C.
#
UNDERSCORE=0
        .MACRO  ADDRESS NAME
.IFNE UNDERSCORE
        .LONG   _\NAME
.ELSE
        .LONG   \NAME
.ENDIF
        .ENDM

        .MACRO  EXT NAME,TYPE
        .EXTERN NAME:TYPE
        .ENDM

        .MACRO  CEXT NAME,TYPE
.IFNE UNDERSCORE
\NAME	=	_\NAME
.ENDIF
        EXT     \NAME,\TYPE
        .ENDM

        .MACRO  DEF NAME,OP,VAL
\NAME:   \OP    \VAL
        .ENDM

        .MACRO  PUBDEF NAME,OP,VAL
.IFNE UNDERSCORE
        .GLOBAL _\NAME
_\NAME: \OP     \VAL
\NAME   =	_\NAME
.ELSE
        .GLOBAL \NAME
\NAME:  \OP     \VAL
.ENDIF
        .ENDM

        .MACRO  PUBNAME PROCNAME
.IFNE UNDERSCORE
        .GLOBAL _\PROCNAME
.ELSE
        .GLOBAL \PROCNAME
.ENDIF
        .ENDM

        .MACRO  PROC PROCNAME,DISTANCE
\PROCNAME:
        .ENDM

        .MACRO  ENDP PROCNAME
        .ENDM

        .MACRO  CPROC PROCNAME,DISTANCE
.IFNE UNDERSCORE
_\PROCNAME:
.ELSE
\PROCNAME:
.ENDIF
        .ENDM

        .MACRO  CENDP PROCNAME
        .ENDM

        .MACRO  PUBLAB PROCNAME
        .GLOBAL \PROCNAME
        .ENDM

# CALL C FUNCTION.  INTEL FOLLOWS STANDARD C CONVENTIONS, AND
# CALLER POPS ARGUMENTS.
        .MACRO  CALLC ROUTINE,NBYTES
.IFNE UNDERSCORE
        CALL    _\ROUTINE
.ELSE
        CALL    \ROUTINE
.ENDIF
.IFNE \NBYTES
        ADD     ESP,\NBYTES
.ENDIF
        .ENDM

# INTEL RUNS IN ONE FLAT SEGMENT.  FAR CALLS ARE THE SAME AS NEAR CALLS.
        .MACRO  CALLFAR ROUTINE,NBYTES
        EXT     \ROUTINE:NEAR
        CALLC   \ROUTINE,\NBYTES
        .ENDM

# RETURN FROM AN ASSEMBLY-LANGUAGE FUNCTION THAT WILL BE CALLED BY C.
# CALLER POPS ARGUMENTS
        .MACRO  RETC NBYTES
	RET
        .ENDM

