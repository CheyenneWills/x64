; configuration information for inter.s
;
linux equ 1
winnt equ 0

;        Segment Declarations Macros
;
                %macro          CSeg_ 0          ; Open a Code Segment
                section        .text
                %endmacro

                %macro          CSegEnd_ 0       ; Close a Code Segment
                %endmacro

                %macro          DSeg_     0      ; Open a Data Segment
                section        .data
                %endmacro

                %macro          DSegEnd_   0     ; Close a Data Segment
                %endmacro

                %macro          BSSSeg_     0    ; Open a BSS Segment
                section        .bss
                %endmacro

                %macro          BSSSegEnd_   0   ; Close a BSS Segment
                %endmacro

                %macro          Header_       0  ; Group and Assume directives
                CSeg_
                CSegEnd_
                DSeg_
                DSegEnd_
                %endmacro

; Structure definition macros
;
        %macro  struc 1
        .struct 0
        %endmacro

        %macro  ends 1
        DSeg_
        %endmacro

; define how data locations in the Minimal code are accessed from
; assembly-language and C routines.  "direct" is non-zero to make
; the symbols public for direct access, zero to have access via
; a table of pointers and the minadr procedure.
;
direct equ 1

; define how floating point results are returned from a function
; (either in ST(0) or in EDX:EAX.
fretst0 equ 1
freteax equ 0

; Macros defining whether a leading underscore is required for public Minimal
; names that will be referenced from C.
;
underscore equ 0
        %macro  address 1
        dd  %1
%endmacro
%macro  ext 2
        extern %1
%endmacro

%macro  cext 2
        ext     %1
%endmacro

%macro  def 3
%1	%2	%3
%endmacro

%macro  pubdef 3
        global %1
%endmacro

%macro  pubname 2
        global %2
%endmacro

%macro  proc 2
%1:
%endmacro

%macro  endp 1
%endmacro

%macro  cproc 0
%2:

%endmacro

%macro  cendp 1
%endmacro

%macro  publab 1
    global %1
%endmacro

; Call C function.  Intel follows standard C conventions, and
; caller pops arguments.
%macro  callc 2
        call    %1
%ifne %2
      add     esp,%2
%endif
        %endmacro

; Intel runs in one flat segment.  Far calls are the same as near calls.
        %macro  callfar 2
        ext     %1
        callc   %1,%2
        %endmacro

; Return from an assembly-language function that will be called by C.
; Caller pops arguments
        %macro  retc 1
	ret
        %endmacro

