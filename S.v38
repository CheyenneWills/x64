        .title "spitbol translator v38"
        .sbttl "v38"
# minimal/80386 translator v1.12 10/11/12 11:09:33 for linux
        .psize          80,132
        .arch           pentium
        .include        "systype.ah"

        header_

        cseg_

        .include        "hdrcode.inc"
        .include        "hdrdata.inc"

	.extern		atlin:near
        .extern         ldr_:near
        .extern         str_:near
        .extern         ovr_:near
        .extern         dvi_:near
        .extern         rmi_:near
        .extern         cvd_:near
        .extern         rti_:near
        .extern         itr_:near
        .extern         adr_:near
        .extern         sbr_:near
        .extern         mlr_:near
        .extern         dvr_:near
        .extern         ngr_:near
        .extern         atn_:near
        .extern         chp_:near
        .extern         cos_:near
        .extern         etx_:near
        .extern         lnf_:near
        .extern         sin_:near
        .extern         sqr_:near
        .extern         tan_:near
        .extern         cpr_:near

        csegend_
        .sbttl "l i c e n s e -- software license for this program"
        .sbttl "s p i t b o l -- notes to implementors"
        .sbttl "s p i t b o l - revision history"
        .sbttl "minimal -- machine independent macro assembly lang."
        .sbttl "s p i t b o l  -- basic information"
        .sbttl "s p i t b o l -- procedures section"
        cseg_
        .global sec01
sec01:
        .extern sysax:near
        .extern sysbs:near
        .extern sysbx:near
        .extern sysdc:near
        .extern sysdm:near
        .extern sysdt:near
        .extern sysea:near
        .extern sysef:near
        .extern sysej:near
        .extern sysem:near
        .extern sysen:near
        .extern sysep:near
        .extern sysex:near
        .extern sysfc:near
        .extern sysgc:near
        .extern syshs:near
        .extern sysid:near
        .extern sysif:near
        .extern sysil:near
        .extern sysin:near
        .extern sysio:near
        .extern sysld:near
        .extern sysmm:near
        .extern sysmx:near
        .extern sysou:near
        .extern syspi:near
        .extern syspl:near
        .extern syspp:near
        .extern syspr:near
        .extern sysrd:near
        .extern sysri:near
        .extern sysrw:near
        .extern sysst:near
        .extern systm:near
        .extern systt:near
        .extern sysul:near
        .extern sysxi:near
        .sbttl "s p i t b o l -- definitions and data structures"
        csegend_
        dseg_
        .global sec02
sec02:
cfp_a   =    256
cfp_b   =    4
cfp_c   =    4
cfp_f   =    8
cfp_i   =    1
cfp_m   =    2147483647
cfp_n   =    32
cfp_r   =    2
cfp_s   =    9
cfp_x   =    3
mxdgs   =    cfp_s+cfp_x
nstmx   =    mxdgs+5
cfp_u   =    128
e_srs   =    100
e_sts   =    1000
e_cbs   =    500
e_hnb   =    257
e_hnw   =    6
e_fsp   =    15
e_sed   =    25
ch_la   =    65
ch_lb   =    66
ch_lc   =    67
ch_ld   =    68
ch_le   =    69
ch_lf   =    70
ch_lg   =    71
ch_lh   =    72
ch_li   =    73
ch_lj   =    74
ch_lk   =    75
ch_ll   =    76
ch_lm   =    77
ch_ln   =    78
ch_lo   =    79
ch_lp   =    80
ch_lq   =    81
ch_lr   =    82
ch_ls   =    83
ch_lt   =    84
ch_lu   =    85
ch_lv   =    86
ch_lw   =    87
ch_lx   =    88
ch_ly   =    89
ch_l_   =    90
ch_d0   =    48
ch_d1   =    49
ch_d2   =    50
ch_d3   =    51
ch_d4   =    52
ch_d5   =    53
ch_d6   =    54
ch_d7   =    55
ch_d8   =    56
ch_d9   =    57
ch_am   =    38
ch_as   =    42
ch_at   =    64
ch_bb   =    60
ch_bl   =    32
ch_br   =    124
ch_cl   =    58
ch_cm   =    44
ch_dl   =    36
ch_dt   =    46
ch_dq   =    34
ch_eq   =    61
ch_ex   =    33
ch_mn   =    45
ch_nm   =    35
ch_nt   =    126
ch_pc   =    37
ch_pl   =    43
ch_pp   =    40
ch_rb   =    62
ch_rp   =    41
ch_qu   =    63
ch_sl   =    47
ch_sm   =    59
ch_sq   =    39
ch_un   =    95
ch_ob   =    91
ch_cb   =    93
ch_ht   =    9
ch_ey   =    94
ch__a   =    97
ch__b   =    98
ch__c   =    99
ch__d   =    100
ch__e   =    101
ch__f   =    102
ch__g   =    103
ch__h   =    104
ch__i   =    105
ch__j   =    106
ch__k   =    107
ch__l   =    108
ch__m   =    109
ch__n   =    110
ch__o   =    111
ch__p   =    112
ch__q   =    113
ch__r   =    114
ch__s   =    115
ch__t   =    116
ch__u   =    117
ch__v   =    118
ch__w   =    119
ch__x   =    120
ch__y   =    121
ch___   =    122
iodel   =    32
offs1   =    1
offs2   =    2
offs3   =    3
bl_ar   =    0
bl_cd   =    bl_ar+1
bl_ex   =    bl_cd+1
bl_ic   =    bl_ex+1
bl_nm   =    bl_ic+1
bl_p0   =    bl_nm+1
bl_p1   =    bl_p0+1
bl_p2   =    bl_p1+1
bl_rc   =    bl_p2+1
bl_sc   =    bl_rc+1
bl_se   =    bl_sc+1
bl_tb   =    bl_se+1
bl_vc   =    bl_tb+1
bl_xn   =    bl_vc+1
bl_xr   =    bl_xn+1
bl_bc   =    bl_xr+1
bl_pd   =    bl_bc+1
bl__d   =    bl_pd+1
bl_tr   =    bl_pd+1
bl_bf   =    bl_tr+1
bl_cc   =    bl_bf+1
bl_cm   =    bl_cc+1
bl_ct   =    bl_cm+1
bl_df   =    bl_ct+1
bl_ef   =    bl_df+1
bl_ev   =    bl_ef+1
bl_ff   =    bl_ev+1
bl_kv   =    bl_ff+1
bl_pf   =    bl_kv+1
bl_te   =    bl_pf+1
bl__i   =    0
bl__t   =    bl_tr+1
bl___   =    bl_te+1
fcode   =    0
fargs   =    1
idval   =    1
artyp   =    0
arlen   =    idval+1
arofs   =    arlen+1
arndm   =    arofs+1
arlbd   =    arndm+1
ardim   =    arlbd+cfp_i
arlb2   =    ardim+cfp_i
ardm2   =    arlb2+cfp_i
arpro   =    ardim+cfp_i
arvls   =    arpro+1
arpr2   =    ardm2+cfp_i
arvl2   =    arpr2+1
arsi_   =    arlbd
ardms   =    arlb2-arlbd
cctyp   =    0
cclen   =    cctyp+1
ccsln   =    cclen+1
ccuse   =    ccsln+1
cccod   =    ccuse+1
cdjmp   =    0
cdstm   =    cdjmp+1
cdsln   =    cdstm+1
cdlen   =    cdsln+1
cdfal   =    cdlen+1
cdcod   =    cdfal+1
cdsi_   =    cdcod
cmidn   =    0
cmlen   =    cmidn+1
cmtyp   =    cmlen+1
cmopn   =    cmtyp+1
cmvls   =    cmopn+1
cmrop   =    cmvls
cmlop   =    cmvls+1
cmsi_   =    cmvls
cmus_   =    cmsi_+1
cmbs_   =    cmsi_+2
cmar1   =    cmvls+1
c_arr   =    0
c_fnc   =    c_arr+1
c_def   =    c_fnc+1
c_ind   =    c_def+1
c_key   =    c_ind+1
c_ubo   =    c_key+1
c_uuo   =    c_ubo+1
c_uo_   =    c_uuo+1
c__nm   =    c_uuo+1
c_bvl   =    c_uuo+1
c_uvl   =    c_bvl+1
c_alt   =    c_uvl+1
c_cnc   =    c_alt+1
c_cnp   =    c_cnc+1
c_unm   =    c_cnp+1
c_bvn   =    c_unm+1
c_ass   =    c_bvn+1
c_int   =    c_ass+1
c_neg   =    c_int+1
c_sel   =    c_neg+1
c_pmt   =    c_sel+1
c_pr_   =    c_bvn
c__nv   =    c_pmt+1
cttyp   =    0
ctchs   =    cttyp+1
ctsi_   =    ctchs+cfp_a
dflen   =    fargs+1
dfpdl   =    dflen+1
dfnam   =    dfpdl+1
dffld   =    dfnam+1
dfflb   =    dffld-1
dfsi_   =    dffld
dvopn   =    0
dvtyp   =    dvopn+1
dvlpr   =    dvtyp+1
dvrpr   =    dvlpr+1
dvus_   =    dvlpr+1
dvbs_   =    dvrpr+1
dvubs   =    dvus_+dvbs_
rrass   =    10
llass   =    00
rrpmt   =    20
llpmt   =    30
rramp   =    40
llamp   =    50
rralt   =    70
llalt   =    60
rrcnc   =    90
llcnc   =    80
rrats   =    110
llats   =    100
rrplm   =    120
llplm   =    130
rrnum   =    140
llnum   =    150
rrdvd   =    160
lldvd   =    170
rrmlt   =    180
llmlt   =    190
rrpct   =    200
llpct   =    210
rrexp   =    230
llexp   =    220
rrdld   =    240
lldld   =    250
rrnot   =    270
llnot   =    260
lluno   =    999
eflen   =    fargs+1
efuse   =    eflen+1
efcod   =    efuse+1
efvar   =    efcod+1
efrsl   =    efvar+1
eftar   =    efrsl+1
efsi_   =    eftar
evtyp   =    0
evexp   =    evtyp+1
evvar   =    evexp+1
evsi_   =    evvar+1
extyp   =    0
exstm   =    cdstm
exsln   =    exstm+1
exlen   =    exsln+1
exflc   =    exlen+1
excod   =    exflc+1
exsi_   =    excod
ffdfp   =    fargs+1
ffnxt   =    ffdfp+1
ffofs   =    ffnxt+1
ffsi_   =    ffofs+1
icget   =    0
icval   =    icget+1
icsi_   =    icval+cfp_i
kvtyp   =    0
kvvar   =    kvtyp+1
kvnum   =    kvvar+1
kvsi_   =    kvnum+1
nmtyp   =    0
nmbas   =    nmtyp+1
nmofs   =    nmbas+1
nmsi_   =    nmofs+1
pcode   =    0
pthen   =    pcode+1
pasi_   =    pthen+1
parm1   =    pthen+1
pbsi_   =    parm1+1
parm2   =    parm1+1
pcsi_   =    parm2+1
pdtyp   =    0
pddfp   =    idval+1
pdfld   =    pddfp+1
pdfof   =    dffld-pdfld
pdsi_   =    pdfld
pddfs   =    dfsi_-pdsi_
pflen   =    fargs+1
pfvbl   =    pflen+1
pfnlo   =    pfvbl+1
pfcod   =    pfnlo+1
pfctr   =    pfcod+1
pfrtr   =    pfctr+1
pfarg   =    pfrtr+1
pfagb   =    pfarg-1
pfsi_   =    pfarg
rcget   =    0
rcval   =    rcget+1
rcsi_   =    rcval+cfp_r
scget   =    0
sclen   =    scget+1
schar   =    sclen+1
scsi_   =    schar
setyp   =    0
sevar   =    setyp+1
sesi_   =    sevar+1
svbit   =    0
svlen   =    1
svchs   =    2
svsi_   =    2
svpre   =    1
svffc   =    svpre+svpre
svckw   =    svffc+svffc
svprd   =    svckw+svckw
svnbt   =    4
svknm   =    svprd+svprd
svfnc   =    svknm+svknm
svnar   =    svfnc+svfnc
svlbl   =    svnar+svnar
svval   =    svlbl+svlbl
svfnf   =    svfnc+svnar
svfnn   =    svfnf+svffc
svfnp   =    svfnn+svpre
svfpr   =    svfnn+svprd
svfnk   =    svfnn+svknm
svkwv   =    svknm+svval
svkwc   =    svckw+svknm
svkvc   =    svkwv+svckw
svkvl   =    svkvc+svlbl
svfpk   =    svfnp+svkvc
k_abe   =    0
k_anc   =    k_abe+cfp_b
k_cas   =    k_anc+cfp_b
k_cod   =    k_cas+cfp_b
k_com   =    k_cod+cfp_b
k_dmp   =    k_com+cfp_b
k_erl   =    k_dmp+cfp_b
k_ert   =    k_erl+cfp_b
k_ftr   =    k_ert+cfp_b
k_fls   =    k_ftr+cfp_b
k_inp   =    k_fls+cfp_b
k_mxl   =    k_inp+cfp_b
k_oup   =    k_mxl+cfp_b
k_pfl   =    k_oup+cfp_b
k_tra   =    k_pfl+cfp_b
k_trm   =    k_tra+cfp_b
k_fnc   =    k_trm+cfp_b
k_lst   =    k_fnc+cfp_b
k_lln   =    k_lst+cfp_b
k_lin   =    k_lln+cfp_b
k_stn   =    k_lin+cfp_b
k_abo   =    k_stn+cfp_b
k_arb   =    k_abo+pasi_
k_bal   =    k_arb+pasi_
k_fal   =    k_bal+pasi_
k_fen   =    k_fal+pasi_
k_rem   =    k_fen+pasi_
k_suc   =    k_rem+pasi_
k_alp   =    k_suc+1
k_rtn   =    k_alp+1
k_stc   =    k_rtn+1
k_etx   =    k_stc+1
k_fil   =    k_etx+1
k_lfl   =    k_fil+1
k_stl   =    k_lfl+1
k_lcs   =    k_stl+1
k_ucs   =    k_lcs+1
k__al   =    k_alp-k_alp
k__rt   =    k_rtn-k_alp
k__sc   =    k_stc-k_alp
k__et   =    k_etx-k_alp
k__fl   =    k_fil-k_alp
k__lf   =    k_lfl-k_alp
k__sl   =    k_stl-k_alp
k__lc   =    k_lcs-k_alp
k__uc   =    k_ucs-k_alp
k__n_   =    k__uc+1
k_p__   =    k_fnc
k_v__   =    k_abo
k_s__   =    k_alp
tbtyp   =    0
tblen   =    offs2
tbinv   =    offs3
tbbuk   =    tbinv+1
tbsi_   =    tbbuk
tbnbk   =    11
tetyp   =    0
tesub   =    tetyp+1
teval   =    tesub+1
tenxt   =    teval+1
tesi_   =    tenxt+1
tridn   =    0
trtyp   =    tridn+1
trval   =    trtyp+1
trnxt   =    trval
trlbl   =    trval
trkvr   =    trval
trtag   =    trval+1
trter   =    trtag
trtrf   =    trtag
trfnc   =    trtag+1
trfpt   =    trfnc
trsi_   =    trfnc+1
trtin   =    0
trtac   =    trtin+1
trtvl   =    trtac+1
trtou   =    trtvl+1
trtfc   =    trtou+1
vctyp   =    0
vclen   =    offs2
vcvls   =    offs3
vcsi_   =    vcvls
vcvlb   =    vcvls-1
vctbd   =    tbsi_-vcsi_
vrget   =    0
vrsto   =    vrget+1
vrval   =    vrsto+1
vrvlo   =    vrval-vrsto
vrtra   =    vrval+1
vrlbl   =    vrtra+1
vrlbo   =    vrlbl-vrtra
vrfnc   =    vrlbl+1
vrnxt   =    vrfnc+1
vrlen   =    vrnxt+1
vrchs   =    vrlen+1
vrsvp   =    vrlen+1
vrsi_   =    vrchs+1
vrsof   =    vrlen-sclen
vrsvo   =    vrsvp-vrsof
xntyp   =    0
xnlen   =    xntyp+1
xndta   =    xnlen+1
xnsi_   =    xndta
xrtyp   =    0
xrlen   =    xrtyp+1
xr  =    xrlen+1
xrsi_   =    xrptr
cnvst   =    8
cnvrt   =    cnvst+1
cnvbt   =    cnvrt
cnvtt   =    cnvbt+1
iniln   =    1024
inils   =    1024
ionmb   =    2
ionmo   =    4
mnlen   =    1024
mxern   =    329
num01   =    1
num02   =    2
num03   =    3
num04   =    4
num05   =    5
num06   =    6
num07   =    7
num08   =    8
num09   =    9
num10   =    10
nm320   =    320
nm321   =    321
nini8   =    998
nini9   =    999
thsnd   =    1000
opbun   =    5
opuun   =    6
prsnf   =    13
prtmf   =    21
rilen   =    1024
stgic   =    0
stgxc   =    stgic+1
stgev   =    stgxc+1
stgxt   =    stgev+1
stgce   =    stgxt+1
stgxe   =    stgce+1
stgnd   =    stgce-stgic
stgee   =    stgxe+1
stgno   =    stgee+1
stnpd   =    8
t_uop   =    0
t_lpr   =    t_uop+3
t_lbr   =    t_lpr+3
t_cma   =    t_lbr+3
t_fnc   =    t_cma+3
t_var   =    t_fnc+3
t_con   =    t_var+3
t_bop   =    t_con+3
t_rpr   =    t_bop+3
t_rbr   =    t_rpr+3
t_col   =    t_rbr+3
t_smc   =    t_col+3
t_fgo   =    t_smc+1
t_sgo   =    t_fgo+1
t_uok   =    t_fnc
t_uo0   =    t_uop+0
t_uo1   =    t_uop+1
t_uo2   =    t_uop+2
t_lp0   =    t_lpr+0
t_lp1   =    t_lpr+1
t_lp2   =    t_lpr+2
t_lb0   =    t_lbr+0
t_lb1   =    t_lbr+1
t_lb2   =    t_lbr+2
t_cm0   =    t_cma+0
t_cm1   =    t_cma+1
t_cm2   =    t_cma+2
t_fn0   =    t_fnc+0
t_fn1   =    t_fnc+1
t_fn2   =    t_fnc+2
t_va0   =    t_var+0
t_va1   =    t_var+1
t_va2   =    t_var+2
t_co0   =    t_con+0
t_co1   =    t_con+1
t_co2   =    t_con+2
t_bo0   =    t_bop+0
t_bo1   =    t_bop+1
t_bo2   =    t_bop+2
t_rp0   =    t_rpr+0
t_rp1   =    t_rpr+1
t_rp2   =    t_rpr+2
t_rb0   =    t_rbr+0
t_rb1   =    t_rbr+1
t_rb2   =    t_rbr+2
t_cl0   =    t_col+0
t_cl1   =    t_col+1
t_cl2   =    t_col+2
t_sm0   =    t_smc+0
t_sm1   =    t_smc+1
t_sm2   =    t_smc+2
t_nes   =    t_sm2+1
cc_ca   =    0
cc_do   =    cc_ca+1
cc_co   =    cc_do+1
cc_du   =    cc_co+1
cc_cp   =    cc_du+1
cc_ej   =    cc_cp+1
cc_er   =    cc_ej+1
cc_ex   =    cc_er+1
cc_fa   =    cc_ex+1
cc_in   =    cc_fa+1
cc_ln   =    cc_in+1
cc_li   =    cc_ln+1
cc_nr   =    cc_li+1
cc_nx   =    cc_nr+1
cc_nf   =    cc_nx+1
cc_nl   =    cc_nf+1
cc_no   =    cc_nl+1
cc_np   =    cc_no+1
cc_op   =    cc_np+1
cc_pr   =    cc_op+1
cc_si   =    cc_pr+1
cc_sp   =    cc_si+1
cc_st   =    cc_sp+1
cc_ti   =    cc_st+1
cc_tr   =    cc_ti+1
cc_nc   =    cc_tr+1
ccnoc   =    4
ccofs   =    7
ccinm   =    9
cmstm   =    0
cmsgo   =    cmstm+1
cmfgo   =    cmsgo+1
cmcgo   =    cmfgo+1
cmpcd   =    cmcgo+1
cmffp   =    cmpcd+1
cmffc   =    cmffp+1
cmsop   =    cmffc+1
cmsoc   =    cmsop+1
cmlbl   =    cmsoc+1
cmtra   =    cmlbl+1
cmnen   =    cmtra+1
pfpd1   =    8
pfpd2   =    20
pfpd3   =    32
pf_i2   =    cfp_i+cfp_i
rlend   =    0
rladj   =    rlend+1
rlstr   =    rladj+1
rssi_   =    rlstr+1
rnsi_   =    5
rldye   =    0
rldya   =    rldye+1
rldys   =    rldya+1
rlste   =    rldys+1
rlsta   =    rlste+1
rlsts   =    rlsta+1
rlwke   =    rlsts+1
rlwka   =    rlwke+1
rlwks   =    rlwka+1
rlcne   =    rlwks+1
rlcna   =    rlcne+1
rlcns   =    rlcna+1
rlcde   =    rlcns+1
rlcda   =    rlcde+1
rlcds   =    rlcda+1
rlsi_   =    rlcds+1
        .sbttl "s p i t b o l -- constant section"
        dsegend_
        dseg_
        .global sec03
sec03:
c_aaa:  .long 0
alfsp:  .long e_fsp
bits0:  .long 0
bits1:  .long 1
bits2:  .long 2
bits3:  .long 4
bits4:  .long 8
bits5:  .long 16
bits6:  .long 32
bits7:  .long 64
bits8:  .long 128
bits9:  .long 256
bit10:  .long 512
bit11:  .long 1024
bit12:  .long 2048
bitsm:  .long cfp_m
btfnc:  .long svfnc
btknm:  .long svknm
btlbl:  .long svlbl
btffc:  .long svffc
btckw:  .long svckw
btkwv:  .long svkwv
btprd:  .long svprd
btpre:  .long svpre
btval:  .long svval
ccnms:  .ascii "case"
        .ascii "doub"
        .ascii "comp"
        .ascii "dump"
        .ascii "copy"
        .ascii "ejec"
        .ascii "erro"
        .ascii "exec"
        .ascii "fail"
        .ascii "incl"
        .ascii "line"
        .ascii "list"
        .ascii "noer"
        .ascii "noex"
        .ascii "nofa"
        .ascii "noli"
        .ascii "noop"
        .ascii "nopr"
        .ascii "opti"
        .ascii "prin"
        .ascii "sing"
        .ascii "spac"
        .ascii "stit"
        .ascii "titl"
        .ascii "trac"
dmhdk:  .long b_scl
        .long 22
        .ascii "dump of keyword values\x00\x00"
dmhdv:  .long b_scl
        .long 25
        .ascii "dump of natural variables\x00\x00\x00"
encm1:  .long b_scl
        .long 19
        .ascii "memory used (bytes)\x00"
encm2:  .long b_scl
        .long 19
        .ascii "memory left (bytes)\x00"
encm3:  .long b_scl
        .long 11
        .ascii "comp errors\x00"
encm4:  .long b_scl
        .long 20
        .ascii "comp time (millisec)"
encm5:  .long b_scl
        .long 20
        .ascii "execution suppressed"
endab:  .long b_scl
        .long 12
        .ascii "abnormal end"
endmo:  .long b_scl
endml:  .long 15
        .ascii "memory overflow\x00"
endms:  .long b_scl
        .long 10
        .ascii "normal end\x00\x00"
endso:  .long b_scl
        .long 36
        .ascii "stack overflow in garbage collection"
endtu:  .long b_scl
        .long 15
        .ascii "error - time up\x00"
ermms:  .long b_scl
        .long 5
        .ascii "error\x00\x00\x00"
ermns:  .long b_scl
        .long 4
        .ascii " -- "
lstms:  .long b_scl
        .long 5
        .ascii "page \x00\x00\x00"
headr:  .long b_scl
        .long 25
        .ascii "macro spitbol version 3.8\x00\x00\x00"
headv:  .long b_scl
        .long 5
        .ascii "3.8.2\x00\x00\x00"
gbsdp:  .long e_sed
int_r:  .long b_icl
intv0:  .long +0
inton:  .long b_icl
intv1:  .long +1
inttw:  .long b_icl
intv2:  .long +2
intvt:  .long +10
intvh:  .long +100
intth:  .long +1000
intab:  .long int_r
        .long inton
        .long inttw
ndabb:  .long p_abb
ndabd:  .long p_abd
ndarc:  .long p_arc
ndexb:  .long p_exb
ndfnb:  .long p_fnb
ndfnd:  .long p_fnd
ndexc:  .long p_exc
ndimb:  .long p_imb
ndimd:  .long p_imd
ndnth:  .long p_nth
ndpab:  .long p_pab
ndpad:  .long p_pad
nduna:  .long p_una
ndabo:  .long p_abo
        .long ndnth
ndarb:  .long p_arb
        .long ndnth
ndbal:  .long p_bal
        .long ndnth
ndfal:  .long p_fal
        .long ndnth
ndfen:  .long p_fen
        .long ndnth
ndrem:  .long p_rem
        .long ndnth
ndsuc:  .long p_suc
        .long ndnth
nulls:  .long b_scl
        .long 0
nullw:  .ascii "          \x00\x00"
lcase:  .long b_scl
        .long 26
        .ascii "abcdefghijklmnopqrstuvwxyz\x00\x00"
ucase:  .long b_scl
        .long 26
        .ascii "abcdefghijklmnopqrstuvwxyz\x00\x00"
opdvc:  .long o_cnc
        .long c_cnc
        .long llcnc
        .long rrcnc
opdvp:  .long o_cnc
        .long c_cnp
        .long llcnc
        .long rrcnc
opdvs:  .long o_ass
        .long c_ass
        .long llass
        .long rrass
        .long 6
        .long c_uuo
        .long lluno
        .long o_pmv
        .long c_pmt
        .long llpmt
        .long rrpmt
        .long o_int
        .long c_uvl
        .long lluno
        .long 1
        .long c_ubo
        .long llamp
        .long rramp
        .long o_kwv
        .long c_key
        .long lluno
        .long o_alt
        .long c_alt
        .long llalt
        .long rralt
        .long 5
        .long c_uuo
        .long lluno
        .long 0
        .long c_ubo
        .long llats
        .long rrats
        .long o_cas
        .long c_unm
        .long lluno
        .long 2
        .long c_ubo
        .long llnum
        .long rrnum
        .long 7
        .long c_uuo
        .long lluno
        .long o_dvd
        .long c_bvl
        .long lldvd
        .long rrdvd
        .long 9
        .long c_uuo
        .long lluno
        .long o_mlt
        .long c_bvl
        .long llmlt
        .long rrmlt
        .long 0
        .long c_def
        .long lluno
        .long 3
        .long c_ubo
        .long llpct
        .long rrpct
        .long 8
        .long c_uuo
        .long lluno
        .long o_exp
        .long c_bvl
        .long llexp
        .long rrexp
        .long 10
        .long c_uuo
        .long lluno
        .long o_ima
        .long c_bvn
        .long lldld
        .long rrdld
        .long o_inv
        .long c_ind
        .long lluno
        .long 4
        .long c_ubo
        .long llnot
        .long rrnot
        .long 0
        .long c_neg
        .long lluno
        .long o_sub
        .long c_bvl
        .long llplm
        .long rrplm
        .long o_com
        .long c_uvl
        .long lluno
        .long o_add
        .long c_bvl
        .long llplm
        .long rrplm
        .long o_aff
        .long c_uvl
        .long lluno
        .long o_pas
        .long c_bvn
        .long lldld
        .long rrdld
        .long o_nam
        .long c_unm
        .long lluno
opdvd:  .long o_god
        .long c_uvl
        .long lluno
opdvn:  .long o_goc
        .long c_unm
        .long lluno
oamn_:  .long o_amn
oamv_:  .long o_amv
oaon_:  .long o_aon
oaov_:  .long o_aov
ocer_:  .long o_cer
ofex_:  .long o_fex
ofif_:  .long o_fif
ofnc_:  .long o_fnc
ofne_:  .long o_fne
ofns_:  .long o_fns
ogof_:  .long o_gof
oinn_:  .long o_inn
okwn_:  .long o_kwn
olex_:  .long o_lex
olpt_:  .long o_lpt
olvn_:  .long o_lvn
onta_:  .long o_nta
ontb_:  .long o_ntb
ontc_:  .long o_ntc
opmn_:  .long o_pmn
opms_:  .long o_pms
opop_:  .long o_pop
ornm_:  .long o_rnm
orpl_:  .long o_rpl
orvl_:  .long o_rvl
osla_:  .long o_sla
oslb_:  .long o_slb
oslc_:  .long o_slc
osld_:  .long o_sld
ostp_:  .long o_stp
ounf_:  .long o_unf
opsnb:  .long ch_at
        .long ch_am
        .long ch_nm
        .long ch_pc
        .long ch_nt
opnsu:  .long ch_br
        .long ch_eq
        .long ch_nm
        .long ch_pc
        .long ch_sl
        .long ch_ex
pfi2a:  .long pf_i2
pfms1:  .long b_scl
        .long 15
        .ascii "program profile\x00"
pfms2:  .long b_scl
        .long 42
        .ascii "stmt    number of     -- execution time --\x00\x00"
pfms3:  .long b_scl
        .long 47
        .ascii "number  executions  total(msec) per excn(mcsec)\x00"
        .balign 4
reav0:  .double 0e0.0
        .balign 4
reap1:  .double 0e0.1
        .balign 4
reap5:  .double 0e0.5
        .balign 4
reav1:  .double 0e1.0
        .balign 4
reavt:  .double 0e1.0e+1
        .balign 4
        .double 0e1.0e+2
        .balign 4
        .double 0e1.0e+3
        .balign 4
        .double 0e1.0e+4
        .balign 4
        .double 0e1.0e+5
        .balign 4
        .double 0e1.0e+6
        .balign 4
        .double 0e1.0e+7
        .balign 4
        .double 0e1.0e+8
        .balign 4
        .double 0e1.0e+9
        .balign 4
reatt:  .double 0e1.0e+10
scarr:  .long b_scl
        .long 5
        .ascii "array\x00\x00\x00"
sccod:  .long b_scl
        .long 4
        .ascii "code"
scexp:  .long b_scl
        .long 10
        .ascii "expression\x00\x00"
scext:  .long b_scl
        .long 8
        .ascii "external"
scint:  .long b_scl
        .long 7
        .ascii "integer\x00"
scnam:  .long b_scl
        .long 4
        .ascii "name"
scnum:  .long b_scl
        .long 7
        .ascii "numeric\x00"
scpat:  .long b_scl
        .long 7
        .ascii "pattern\x00"
screa:  .long b_scl
        .long 4
        .ascii "real"
scstr:  .long b_scl
        .long 6
        .ascii "string\x00\x00"
sctab:  .long b_scl
        .long 5
        .ascii "table\x00\x00\x00"
scfil:  .long b_scl
        .long 4
        .ascii "file"
scfrt:  .long b_scl
        .long 7
        .ascii "freturn\x00"
scnrt:  .long b_scl
        .long 7
        .ascii "nreturn\x00"
scrtn:  .long b_scl
        .long 6
        .ascii "return\x00\x00"
scnmt:  .long scarr
        .long sccod
        .long scexp
        .long scint
        .long scnam
        .long scpat
        .long scpat
        .long scpat
        .long screa
        .long scstr
        .long scexp
        .long sctab
        .long scarr
        .long scext
        .long scext
        .long nulls
scre0:  .long b_scl
        .long 2
        .ascii "0.\x00\x00"
stlim:  .long +2147483647
stndf:  .long o_fun
        .long 0
stndl:  .long l_und
stndo:  .long o_oun
        .long 0
stnvr:  .long b_vrl
        .long b_vrs
        .long nulls
        .long b_vrg
        .long stndl
        .long stndf
        .long 0
stpm1:  .long b_scl
        .long 12
        .ascii "in statement"
stpm2:  .long b_scl
        .long 14
        .ascii "stmts executed\x00\x00"
stpm3:  .long b_scl
        .long 19
        .ascii "run time (millisec)\x00"
stpm4:  .long b_scl
        .long 12
        .ascii "mcsec / stmt"
stpm5:  .long b_scl
        .long 13
        .ascii "regenerations\x00\x00\x00"
stpm6:  .long b_scl
        .long 7
        .ascii "in line\x00"
stpm7:  .long b_scl
        .long 7
        .ascii "in file\x00"
strtu:  .ascii "tu\x00\x00"
svctb:  .long scstr
        .long scint
        .long scnam
        .long scpat
        .long scarr
        .long sctab
        .long scexp
        .long sccod
        .long scnum
        .long screa
        .long 0
tmasb:  .long b_scl
        .long 13
        .ascii "************ \x00\x00\x00"
tmbeb:  .long b_scl
        .long 3
        .ascii " = \x00"
trbev:  .long b_trt
trbkv:  .long b_trt
trxdr:  .long o_txr
trxdc:  .long trxdr
v_eqf:  .long svfpr
        .long 2
        .ascii "eq\x00\x00"
        .long s_eqf
        .long 2
v_gef:  .long svfpr
        .long 2
        .ascii "ge\x00\x00"
        .long s_gef
        .long 2
v_gtf:  .long svfpr
        .long 2
        .ascii "gt\x00\x00"
        .long s_gtf
        .long 2
v_lef:  .long svfpr
        .long 2
        .ascii "le\x00\x00"
        .long s_lef
        .long 2
v_lnf:  .long svfnp
        .long 2
        .ascii "ln\x00\x00"
        .long s_lnf
        .long 1
v_ltf:  .long svfpr
        .long 2
        .ascii "lt\x00\x00"
        .long s_ltf
        .long 2
v_nef:  .long svfpr
        .long 2
        .ascii "ne\x00\x00"
        .long s_nef
        .long 2
v_any:  .long svfnp
        .long 3
        .ascii "any\x00"
        .long s_any
        .long 1
v_arb:  .long svkvc
        .long 3
        .ascii "arb\x00"
        .long k_arb
        .long ndarb
v_arg:  .long svfnn
        .long 3
        .ascii "arg\x00"
        .long s_arg
        .long 2
v_bal:  .long svkvc
        .long 3
        .ascii "bal\x00"
        .long k_bal
        .long ndbal
v_cos:  .long svfnp
        .long 3
        .ascii "cos\x00"
        .long s_cos
        .long 1
v_end:  .long svlbl
        .long 3
        .ascii "end\x00"
        .long l_end
v_exp:  .long svfnp
        .long 3
        .ascii "exp\x00"
        .long s_exp
        .long 1
v_len:  .long svfnp
        .long 3
        .ascii "len\x00"
        .long s_len
        .long 1
v_leq:  .long svfpr
        .long 3
        .ascii "leq\x00"
        .long s_leq
        .long 2
v_lge:  .long svfpr
        .long 3
        .ascii "lge\x00"
        .long s_lge
        .long 2
v_lgt:  .long svfpr
        .long 3
        .ascii "lgt\x00"
        .long s_lgt
        .long 2
v_lle:  .long svfpr
        .long 3
        .ascii "lle\x00"
        .long s_lle
        .long 2
v_llt:  .long svfpr
        .long 3
        .ascii "llt\x00"
        .long s_llt
        .long 2
v_lne:  .long svfpr
        .long 3
        .ascii "lne\x00"
        .long s_lne
        .long 2
v_pos:  .long svfnp
        .long 3
        .ascii "pos\x00"
        .long s_pos
        .long 1
v_rem:  .long svkvc
        .long 3
        .ascii "rem\x00"
        .long k_rem
        .long ndrem
v_set:  .long svfnn
        .long 3
        .ascii "set\x00"
        .long s_set
        .long 3
v_sin:  .long svfnp
        .long 3
        .ascii "sin\x00"
        .long s_sin
        .long 1
v_tab:  .long svfnp
        .long 3
        .ascii "tab\x00"
        .long s_tab
        .long 1
v_tan:  .long svfnp
        .long 3
        .ascii "tan\x00"
        .long s_tan
        .long 1
v_atn:  .long svfnp
        .long 4
        .ascii "atan"
        .long s_atn
        .long 1
v_cas:  .long svknm
        .long 4
        .ascii "case"
        .long k_cas
v_chr:  .long svfnp
        .long 4
        .ascii "char"
        .long s_chr
        .long 1
v_chp:  .long svfnp
        .long 4
        .ascii "chop"
        .long s_chp
        .long 1
v_cod:  .long svfnk
        .long 4
        .ascii "code"
        .long k_cod
        .long s_cod
        .long 1
v_cop:  .long svfnn
        .long 4
        .ascii "copy"
        .long s_cop
        .long 1
v_dat:  .long svfnn
        .long 4
        .ascii "data"
        .long s_dat
        .long 1
v_dte:  .long svfnn
        .long 4
        .ascii "date"
        .long s_dte
        .long 1
v_dmp:  .long svfnk
        .long 4
        .ascii "dump"
        .long k_dmp
        .long s_dmp
        .long 1
v_dup:  .long svfnn
        .long 4
        .ascii "dupl"
        .long s_dup
        .long 2
v_evl:  .long svfnn
        .long 4
        .ascii "eval"
        .long s_evl
        .long 1
v_ext:  .long svfnn
        .long 4
        .ascii "exit"
        .long s_ext
        .long 2
v_fal:  .long svkvc
        .long 4
        .ascii "fail"
        .long k_fal
        .long ndfal
v_fil:  .long svknm
        .long 4
        .ascii "file"
        .long k_fil
v_hst:  .long svfnn
        .long 4
        .ascii "host"
        .long s_hst
        .long 5
v_itm:  .long svfnf
        .long 4
        .ascii "item"
        .long s_itm
        .long 999
v_lin:  .long svknm
        .long 4
        .ascii "line"
        .long k_lin
v_lod:  .long svfnn
        .long 4
        .ascii "load"
        .long s_lod
        .long 2
v_lpd:  .long svfnp
        .long 4
        .ascii "lpad"
        .long s_lpd
        .long 3
v_rpd:  .long svfnp
        .long 4
        .ascii "rpad"
        .long s_rpd
        .long 3
v_rps:  .long svfnp
        .long 4
        .ascii "rpos"
        .long s_rps
        .long 1
v_rtb:  .long svfnp
        .long 4
        .ascii "rtab"
        .long s_rtb
        .long 1
v_si_:  .long svfnp
        .long 4
        .ascii "size"
        .long s_si_
        .long 1
v_srt:  .long svfnn
        .long 4
        .ascii "sort"
        .long s_srt
        .long 2
v_spn:  .long svfnp
        .long 4
        .ascii "span"
        .long s_spn
        .long 1
v_sqr:  .long svfnp
        .long 4
        .ascii "sqrt"
        .long s_sqr
        .long 1
v_stn:  .long svknm
        .long 4
        .ascii "stno"
        .long k_stn
v_tim:  .long svfnn
        .long 4
        .ascii "time"
        .long s_tim
        .long 0
v_trm:  .long svfnk
        .long 4
        .ascii "trim"
        .long k_trm
        .long s_trm
        .long 1
v_abe:  .long svknm
        .long 5
        .ascii "abend\x00\x00\x00"
        .long k_abe
v_abo:  .long svkvl
        .long 5
        .ascii "abort\x00\x00\x00"
        .long k_abo
        .long l_abo
        .long ndabo
v_app:  .long svfnf
        .long 5
        .ascii "apply\x00\x00\x00"
        .long s_app
        .long 999
v_abn:  .long svfnp
        .long 5
        .ascii "arbno\x00\x00\x00"
        .long s_abn
        .long 1
v_arr:  .long svfnn
        .long 5
        .ascii "array\x00\x00\x00"
        .long s_arr
        .long 2
v_brk:  .long svfnp
        .long 5
        .ascii "break\x00\x00\x00"
        .long s_brk
        .long 1
v_clr:  .long svfnn
        .long 5
        .ascii "clear\x00\x00\x00"
        .long s_clr
        .long 1
v_ejc:  .long svfnn
        .long 5
        .ascii "eject\x00\x00\x00"
        .long s_ejc
        .long 1
v_fen:  .long svfpk
        .long 5
        .ascii "fence\x00\x00\x00"
        .long k_fen
        .long s_fnc
        .long 1
        .long ndfen
v_fld:  .long svfnn
        .long 5
        .ascii "field\x00\x00\x00"
        .long s_fld
        .long 2
v_idn:  .long svfpr
        .long 5
        .ascii "ident\x00\x00\x00"
        .long s_idn
        .long 2
v_inp:  .long svfnk
        .long 5
        .ascii "input\x00\x00\x00"
        .long k_inp
        .long s_inp
        .long 3
v_lcs:  .long svkwc
        .long 5
        .ascii "lcase\x00\x00\x00"
        .long k_lcs
v_loc:  .long svfnn
        .long 5
        .ascii "local\x00\x00\x00"
        .long s_loc
        .long 2
v_ops:  .long svfnn
        .long 5
        .ascii "opsyn\x00\x00\x00"
        .long s_ops
        .long 3
v_rmd:  .long svfnp
        .long 5
        .ascii "remdr\x00\x00\x00"
        .long s_rmd
        .long 2
v_rsr:  .long svfnn
        .long 5
        .ascii "rsort\x00\x00\x00"
        .long s_rsr
        .long 2
v_tbl:  .long svfnn
        .long 5
        .ascii "table\x00\x00\x00"
        .long s_tbl
        .long 3
v_tra:  .long svfnk
        .long 5
        .ascii "trace\x00\x00\x00"
        .long k_tra
        .long s_tra
        .long 4
v_ucs:  .long svkwc
        .long 5
        .ascii "ucase\x00\x00\x00"
        .long k_ucs
v_anc:  .long svknm
        .long 6
        .ascii "anchor\x00\x00"
        .long k_anc
v_bkx:  .long svfnp
        .long 6
        .ascii "breakx\x00\x00"
        .long s_bkx
        .long 1
v_def:  .long svfnn
        .long 6
        .ascii "define\x00\x00"
        .long s_def
        .long 2
v_det:  .long svfnn
        .long 6
        .ascii "detach\x00\x00"
        .long s_det
        .long 1
v_dif:  .long svfpr
        .long 6
        .ascii "differ\x00\x00"
        .long s_dif
        .long 2
v_ftr:  .long svknm
        .long 6
        .ascii "ftrace\x00\x00"
        .long k_ftr
v_lst:  .long svknm
        .long 6
        .ascii "lastno\x00\x00"
        .long k_lst
v_nay:  .long svfnp
        .long 6
        .ascii "notany\x00\x00"
        .long s_nay
        .long 1
v_oup:  .long svfnk
        .long 6
        .ascii "output\x00\x00"
        .long k_oup
        .long s_oup
        .long 3
v_ret:  .long svlbl
        .long 6
        .ascii "return\x00\x00"
        .long l_rtn
v_rew:  .long svfnn
        .long 6
        .ascii "rewind\x00\x00"
        .long s_rew
        .long 1
v_stt:  .long svfnn
        .long 6
        .ascii "stoptr\x00\x00"
        .long s_stt
        .long 2
v_sub:  .long svfnn
        .long 6
        .ascii "substr\x00\x00"
        .long s_sub
        .long 3
v_unl:  .long svfnn
        .long 6
        .ascii "unload\x00\x00"
        .long s_unl
        .long 1
v_col:  .long svfnn
        .long 7
        .ascii "collect\x00"
        .long s_col
        .long 1
v_com:  .long svknm
        .long 7
        .ascii "compare\x00"
        .long k_com
v_cnv:  .long svfnn
        .long 7
        .ascii "convert\x00"
        .long s_cnv
        .long 2
v_enf:  .long svfnn
        .long 7
        .ascii "endfile\x00"
        .long s_enf
        .long 1
v_etx:  .long svknm
        .long 7
        .ascii "errtext\x00"
        .long k_etx
v_ert:  .long svknm
        .long 7
        .ascii "errtype\x00"
        .long k_ert
v_frt:  .long svlbl
        .long 7
        .ascii "freturn\x00"
        .long l_frt
v_int:  .long svfpr
        .long 7
        .ascii "integer\x00"
        .long s_int
        .long 1
v_nrt:  .long svlbl
        .long 7
        .ascii "nreturn\x00"
        .long l_nrt
v_pfl:  .long svknm
        .long 7
        .ascii "profile\x00"
        .long k_pfl
v_rpl:  .long svfnp
        .long 7
        .ascii "replace\x00"
        .long s_rpl
        .long 3
v_rvs:  .long svfnp
        .long 7
        .ascii "reverse\x00"
        .long s_rvs
        .long 1
v_rtn:  .long svknm
        .long 7
        .ascii "rtntype\x00"
        .long k_rtn
v_stx:  .long svfnn
        .long 7
        .ascii "setexit\x00"
        .long s_stx
        .long 1
v_stc:  .long svknm
        .long 7
        .ascii "stcount\x00"
        .long k_stc
v_stl:  .long svknm
        .long 7
        .ascii "stlimit\x00"
        .long k_stl
v_suc:  .long svkvc
        .long 7
        .ascii "succeed\x00"
        .long k_suc
        .long ndsuc
v_alp:  .long svkwc
        .long 8
        .ascii "alphabet"
        .long k_alp
v_cnt:  .long svlbl
        .long 8
        .ascii "continue"
        .long l_cnt
v_dtp:  .long svfnp
        .long 8
        .ascii "datatype"
        .long s_dtp
        .long 1
v_erl:  .long svknm
        .long 8
        .ascii "errlimit"
        .long k_erl
v_fnc:  .long svknm
        .long 8
        .ascii "fnclevel"
        .long k_fnc
v_fls:  .long svknm
        .long 8
        .ascii "fullscan"
        .long k_fls
v_lfl:  .long svknm
        .long 8
        .ascii "lastfile"
        .long k_lfl
v_lln:  .long svknm
        .long 8
        .ascii "lastline"
        .long k_lln
v_mxl:  .long svknm
        .long 8
        .ascii "maxlngth"
        .long k_mxl
v_ter:  .long 0
        .long 8
        .ascii "terminal"
        .long 0
v_bsp:  .long svfnn
        .long 9
        .ascii "backspace\x00\x00\x00"
        .long s_bsp
        .long 1
v_pro:  .long svfnn
        .long 9
        .ascii "prototype\x00\x00\x00"
        .long s_pro
        .long 1
v_scn:  .long svlbl
        .long 9
        .ascii "scontinue\x00\x00\x00"
        .long l_scn
        .long 0
        .long 10
vdmkw:  .long v_anc
        .long v_cas
        .long v_cod
        .long 1
        .long v_dmp
        .long v_erl
        .long v_etx
        .long v_ert
        .long v_fil
        .long v_fnc
        .long v_ftr
        .long v_fls
        .long v_inp
        .long v_lfl
        .long v_lln
        .long v_lst
        .long v_lin
        .long v_mxl
        .long v_oup
        .long v_pfl
        .long v_rtn
        .long v_stc
        .long v_stl
        .long v_stn
        .long v_tra
        .long v_trm
        .long 0
vsrch:  .long 0
        .long v_eqf
        .long v_eqf
        .long v_any
        .long v_atn
        .long v_abe
        .long v_anc
        .long v_col
        .long v_alp
        .long v_bsp
c_yyy:  .long 0
        .sbttl "s p i t b o l -- working storage section"
        .global esec03
esec03:
        dsegend_
        dseg_
        .global sec04
sec04:
cmlab:  .long b_scl
        .long 2
        .ascii "  \x00\x00"
w_aaa:  .long 0
actrm:  .long 0
aldyn:  .long 0
allia:  .long +0
allsv:  .long 0
alsta:  .long 0
arcdm:  .long 0
arnel:  .long +0
arptr:  .long 0
arsvl:  .long +0
arfsi:  .long +0
arfxs:  .long 0
befof:  .long 0
bpfpf:  .long 0
bpfsv:  .long 0
bpfxt:  .long 0
clsvi:  .long +0
cnscc:  .long 0
cnswc:  .long 0
cnr_t:  .long 0
cnvtp:  .long 0
datdv:  .long 0
datxs:  .long 0
deflb:  .long 0
defna:  .long 0
defvr:  .long 0
defxs:  .long 0
dmarg:  .long 0
dmpsa:  .long 0
dmpsb:  .long 0
dmpsv:  .long 0
dmvch:  .long 0
dmpch:  .long 0
dmpkb:  .long 0
dmpkt:  .long 0
dmpkn:  .long 0
dtcnb:  .long 0
dtcnm:  .long 0
dupsi:  .long +0
enfch:  .long 0
ertwa:  .long 0
ertwb:  .long 0
evlin:  .long 0
evlis:  .long 0
evliv:  .long 0
evlio:  .long 0
evlif:  .long 0
expsv:  .long 0
gbcfl:  .long 0
gbclm:  .long 0
gbcnm:  .long 0
gbcns:  .long 0
gbcia:  .long +0
gbcsd:  .long 0
gbcsf:  .long 0
gbsva:  .long 0
gbsvb:  .long 0
gbsvc:  .long 0
gnvhe:  .long 0
gnvnw:  .long 0
gnvsa:  .long 0
gnvsb:  .long 0
gnvsp:  .long 0
gnvst:  .long 0
gtawa:  .long 0
gtina:  .long 0
gtinb:  .long 0
gtnnf:  .long 0
gtnsi:  .long +0
gtndf:  .long 0
gtnes:  .long 0
gtnex:  .long +0
gtnsc:  .long 0
        .balign 4
gtnsr:  .double 0e0.0
gtnrd:  .long 0
gtpsb:  .long 0
gtssf:  .long 0
gtsvc:  .long 0
gtsvb:  .long 0
gtses:  .long 0
        .balign 4
gtsrs:  .double 0e0.0
gtvrc:  .long 0
ioptt:  .long 0
lodfn:  .long 0
lodna:  .long 0
pfsvw:  .long 0
prnsi:  .long +0
prsna:  .long 0
prsva:  .long 0
prsvb:  .long 0
prsvc:  .long 0
prtsa:  .long 0
prtsb:  .long 0
prvsi:  .long 0
psave:  .long 0
psavc:  .long 0
rlals:  .long 0
rldcd:  .long 0
rldst:  .long 0
rldls:  .long 0
rtnbp:  .long 0
rtnfv:  .long 0
rtnsv:  .long 0
sbssv:  .long 0
scnsa:  .long 0
scnsb:  .long 0
scnsc:  .long 0
scnof:  .long 0
srtdf:  .long 0
srtfd:  .long 0
srtff:  .long 0
srtfo:  .long 0
srtnr:  .long 0
srtof:  .long 0
srtrt:  .long 0
srts1:  .long 0
srts2:  .long 0
srtsc:  .long 0
srtsf:  .long 0
srtsn:  .long 0
srtso:  .long 0
srtsr:  .long 0
srtst:  .long 0
srtwc:  .long 0
stpsi:  .long +0
stpti:  .long +0
tfnsi:  .long +0
xscrt:  .long 0
xscwb:  .long 0
g_aaa:  .long 0
alfsf:  .long +0
cmerc:  .long 0
cmpln:  .long 0
cmpxs:  .long 0
cmpsn:  .long 1
cnsil:  .long 0
cnind:  .long 0
cnspt:  .long 0
cnttl:  .long 0
cpsts:  .long 0
cswdb:  .long 0
cswer:  .long 0
cswex:  .long 0
cswfl:  .long 1
cswin:  .long iniln
cswls:  .long 1
cswno:  .long 0
cswpr:  .long 0
ctmsk:  .long 0
curid:  .long 0
cwcof:  .long 0
dnams:  .long 0
erich:  .long 0
erlst:  .long 0
errft:  .long 0
errsp:  .long 0
exsts:  .long 0
flprt:  .long 0
flptr:  .long 0
gbsed:  .long +0
gbcnt:  .long 0
gtcef:  .long 0
        .balign 4
gtsrn:  .double 0e0.0
        .balign 4
gtssc:  .double 0e0.0
gtswk:  .long 0
headp:  .long 0
hshnb:  .long +0
initr:  .long 0
kvabe:  .long 0
kvanc:  .long 0
kvcas:  .long 0
kvcod:  .long 0
kvcom:  .long 0
kvdmp:  .long 0
kverl:  .long 0
kvert:  .long 0
kvftr:  .long 0
kvfls:  .long 1
kvinp:  .long 1
kvmxl:  .long 5000
kvoup:  .long 1
kvpfl:  .long 0
kvtra:  .long 0
kvtrm:  .long 0
kvfnc:  .long 0
kvlst:  .long 0
kvlln:  .long 0
kvlin:  .long 0
kvstn:  .long 0
kvalp:  .long 0
kvrtn:  .long nulls
kvstl:  .long +2147483647
kvstc:  .long +2147483647
lstid:  .long 0
lstlc:  .long 0
lstnp:  .long 0
lstpf:  .long 1
lstpg:  .long 0
lstpo:  .long 0
lstsn:  .long 0
mxlen:  .long 0
noxeq:  .long 0
pfdmp:  .long 0
pffnc:  .long 0
pfstm:  .long +0
pfetm:  .long +0
pfnte:  .long 0
pfste:  .long +0
pmdfl:  .long 0
pmhbs:  .long 0
pmssl:  .long 0
polcs:  .long 1
polct:  .long 1
prich:  .long 0
prstd:  .long 0
prsto:  .long 0
prbuf:  .long 0
precl:  .long 0
prlen:  .long 0
prlnw:  .long 0
profs:  .long 0
prtef:  .long 0
rdcln:  .long 0
rdnln:  .long 0
rsmem:  .long 0
stmcs:  .long 1
stmct:  .long 1
a_aaa:  .long 0
cmpss:  .long 0
dnamb:  .long 0
dnamp:  .long 0
dname:  .long 0
hshtb:  .long 0
hshte:  .long 0
iniss:  .long 0
pftbl:  .long 0
prnmv:  .long 0
statb:  .long 0
state:  .long 0
stxvr:  .long nulls
r_aaa:  .long 0
r_arf:  .long 0
r_ccb:  .long 0
r_cim:  .long 0
r_cmp:  .long 0
r_cni:  .long 0
r_cnt:  .long 0
r_cod:  .long 0
r_ctp:  .long 0
r_cts:  .long 0
r_ert:  .long 0
r_etx:  .long nulls
r_exs:  .long 0
r_fcb:  .long 0
r_fnc:  .long 0
r_gtc:  .long 0
r_ici:  .long 0
r_ifa:  .long 0
r_ifl:  .long 0
r_ifn:  .long 0
r_inc:  .long 0
r_io1:  .long 0
r_io2:  .long 0
r_iof:  .long 0
r_ion:  .long 0
r_iop:  .long 0
r_iot:  .long 0
r_pms:  .long 0
r_ra2:  .long 0
r_ra3:  .long 0
r_rpt:  .long 0
r_scp:  .long 0
r_sfc:  .long nulls
r_sfn:  .long 0
r_sxl:  .long 0
r_sxr:  .long 0
r_stc:  .long 0
r_stl:  .long 0
r_sxc:  .long 0
r_ttl:  .long nulls
r_xsc:  .long 0
r_uba:  .long stndo
r_ubm:  .long stndo
r_ubn:  .long stndo
r_ubp:  .long stndo
r_ubt:  .long stndo
r_uub:  .long stndo
r_uue:  .long stndo
r_uun:  .long stndo
r_uup:  .long stndo
r_uus:  .long stndo
r_uux:  .long stndo
r_yyy:  .long 0
scnbl:  .long 0
scncc:  .long 0
scngo:  .long 0
scnil:  .long 0
scnpt:  .long 0
scnrs:  .long 0
scnse:  .long 0
scntp:  .long 0
stage:  .long 0
stbas:  .long 0
stxoc:  .long 0
stxof:  .long 0
timsx:  .long +0
timup:  .long 0
xsofs:  .long 0
w_yyy:  .long 0
        .sbttl "s p i t b o l -- minimal code"
        .global esec04
esec04:
prc_:   .fill 19,4,0
        .global lowspmin
lowspmin: .long 0
        .global end_min_data
end_min_data:
        dsegend_
        cseg_
        .global sec05
sec05:
        .balign 2
        .byte bl__i
s_aaa:
        .sbttl "s p i t b o l -- relocation"
relaj:
        .global relaj
        push edi
        push ecx
        mov  dword rlals,esi
        mov  edi,ebx
rlaj0:  mov  esi,dword rlals
        cmp  edi,dword [esp]
        jne  rlaj1
        pop  ecx
        pop  edi
        ret
rlaj1:  mov  ecx,dword [edi]
        mov  ebx,rnsi_
rlaj2:  cmp  ecx,dword (4*rlend)[esi]
        ja   rlaj3
        cmp  ecx,dword (4*rlstr)[esi]
        jb   rlaj3
        add  ecx,dword (4*rladj)[esi]
        mov  dword [edi],ecx
        jmp  rlaj4
rlaj3:  add  esi,4*rssi_
        dec  ebx
        jnz  rlaj2
rlaj4:  add  edi,4
        jmp  rlaj0
relcr:
        .global relcr
        add  esi,4*rlsi_
        lea  esi,[esi-4]
        mov  dword [esi],ecx
        mov  ecx,offset s_aaa
        sub  ecx,dword [esi]
        lea  esi,[esi-4]
        mov  dword [esi],ecx
        mov  ecx,offset s_yyy
        sub  ecx,offset s_aaa
        add  ecx,dword (4*num01)[esi]
        lea  esi,[esi-4]
        mov  dword [esi],ecx
        lea  esi,[esi-4]
        mov  dword [esi],ebx
        mov  ebx,offset c_aaa
        mov  ecx,offset c_yyy
        sub  ecx,ebx
        sub  ebx,dword [esi]
        lea  esi,[esi-4]
        mov  dword [esi],ebx
        add  ecx,dword (4*num01)[esi]
        lea  esi,[esi-4]
        mov  dword [esi],ecx
        lea  esi,[esi-4]
        mov  dword [esi],edx
        mov  edx,offset g_aaa
        mov  ecx,offset w_yyy
        sub  ecx,edx
        sub  edx,dword [esi]
        lea  esi,[esi-4]
        mov  dword [esi],edx
        add  ecx,dword (4*num01)[esi]
        lea  esi,[esi-4]
        mov  dword [esi],ecx
        mov  ebx,dword statb
        lea  esi,[esi-4]
        mov  dword [esi],ebx
        sub  edi,ebx
        lea  esi,[esi-4]
        mov  dword [esi],edi
        lea  esi,[esi-4]
        mov  eax,dword state
        mov  dword [esi],eax
        mov  ebx,dword dnamb
        lea  esi,[esi-4]
        mov  dword [esi],ebx
        mov  ecx,ebp
        sub  ecx,ebx
        lea  esi,[esi-4]
        mov  dword [esi],ecx
        mov  edx,dword dnamp
        lea  esi,[esi-4]
        mov  dword [esi],edx
        ret
reldn:
        .global reldn
        mov  eax,dword (4*rlcda)[esi]
        mov  dword rldcd,eax
        mov  eax,dword (4*rlsta)[esi]
        mov  dword rldst,eax
        mov  dword rldls,esi
rld01:  mov  eax,dword rldcd
        add  dword [edi],eax
        mov  esi,dword [edi]
        movzx esi,byte [esi-1]
        jmp  dword l0001[esi*4]
        dseg_
l0001:
        .long rld03
        .long rld07
        .long rld10
        .long rld05
        .long rld13
        .long rld13
        .long rld14
        .long rld14
        .long rld05
        .long rld05
        .long rld13
        .long rld17
        .long rld17
        .long rld05
        .long rld20
        .long rld05
        .long rld15
        .long rld19
        .long rld05
        .long rld05
        .long rld05
        .long rld05
        .long rld05
        .long rld08
        .long rld09
        .long rld11
        .long rld13
        .long rld16
        .long rld18
        dsegend_
        cseg_
rld03:  mov  ecx,dword (4*arlen)[edi]
        mov  ebx,dword (4*arofs)[edi]
rld04:  add  ecx,edi
        add  ebx,edi
        mov  esi,dword rldls
        call relaj
rld05:  mov  ecx,dword [edi]
        call blkln
        add  edi,ecx
        cmp  edi,edx
        jb   rld01
        mov  esi,dword rldls
        ret
rld07:  mov  ecx,dword (4*cdlen)[edi]
        mov  ebx,4*cdfal
        cmp  dword [edi],offset b_cdc
        jne  rld04
        mov  ebx,4*cdcod
        jmp  rld04
rld08:  mov  ecx,4*efrsl
        mov  ebx,4*efcod
        jmp  rld04
rld09:  mov  ecx,4*offs3
        mov  ebx,4*evexp
        jmp  rld04
rld10:  mov  ecx,dword (4*exlen)[edi]
        mov  ebx,4*exflc
        jmp  rld04
rld11:  cmp  dword (4*ffofs)[edi],4*pdfld
        jne  rld12
        push edi
        mov  edi,dword (4*ffdfp)[edi]
        add  edi,dword rldst
        mov  eax,dword rldcd
        add  dword [edi],eax
        mov  ecx,dword (4*dflen)[edi]
        mov  ebx,4*dfnam
        add  ecx,edi
        add  ebx,edi
        mov  esi,dword rldls
        call relaj
        mov  edi,dword (4*dfnam)[edi]
        mov  eax,dword rldcd
        add  dword [edi],eax
        pop  edi
rld12:  mov  ecx,4*ffofs
        mov  ebx,4*ffdfp
        jmp  rld04
rld13:  mov  ecx,4*offs2
        mov  ebx,4*offs1
        jmp  rld04
rld14:  mov  ecx,4*parm2
        mov  ebx,4*pthen
        jmp  rld04
rld15:  mov  esi,dword (4*pddfp)[edi]
        add  esi,dword rldst
        mov  ecx,dword (4*dfpdl)[esi]
        mov  ebx,4*pddfp
        jmp  rld04
rld16:  mov  eax,dword rldst
        add  dword (4*pfvbl)[edi],eax
        mov  ecx,dword (4*pflen)[edi]
        mov  ebx,4*pfcod
        jmp  rld04
rld17:  mov  ecx,dword (4*offs2)[edi]
        mov  ebx,4*offs3
        jmp  rld04
rld18:  mov  ecx,4*tesi_
        mov  ebx,4*tesub
        jmp  rld04
rld19:  mov  ecx,4*trsi_
        mov  ebx,4*trval
        jmp  rld04
rld20:  mov  ecx,dword (4*xrlen)[edi]
        mov  ebx,4*xrptr
        jmp  rld04
reloc:
        .global reloc
        mov  edi,dword (4*rldys)[esi]
        mov  edx,dword (4*rldye)[esi]
        add  edi,dword (4*rldya)[esi]
        add  edx,dword (4*rldya)[esi]
        call reldn
        call relws
        call relst
        ret
relst:
        .global relst
        mov  edi,dword pftbl
        or   edi,edi
        jz   rls01
        mov  eax,dword (4*rlcda)[esi]
        add  dword [edi],eax
rls01:  mov  edx,dword hshtb
        mov  ebx,edx
        mov  ecx,dword hshte
        call relaj
rls02:  cmp  edx,dword hshte
        je   rls05
        mov  edi,edx
        add  edx,4
        sub  edi,4*vrnxt
rls03:  mov  edi,dword (4*vrnxt)[edi]
        or   edi,edi
        jz   rls02
        mov  ecx,4*vrlen
        mov  ebx,4*vrget
        cmp  dword dword ptr (4*vrlen)[edi],0
        jnz  rls04
        mov  ecx,4*vrsi_
rls04:  add  ecx,edi
        add  ebx,edi
        call relaj
        jmp  rls03
rls05:  ret
relws:
        .global relws
        mov  ebx,offset a_aaa
        mov  ecx,offset r_yyy
        call relaj
        mov  eax,dword (4*rldya)[esi]
        add  dword dname,eax
        mov  ebx,offset kvrtn
        mov  ecx,ebx
        add  ecx,4
        call relaj
        ret
        .sbttl "s p i t b o l -- initialization"
start:
        .global start
        mov  esp,ecx
        call systm
        mov  dword timsx,edx
        mov  dword statb,edi
        mov  dword rsmem,4*e_srs
        mov  dword stbas,esp
        mov  edx,dword intvh
        mov  eax,dword alfsp
        call dvi_
        mov  dword alfsf,edx
        mov  edx,dword intvh
        mov  eax,dword gbsdp
        call dvi_
        mov  dword gbsed,edx
        mov  ebx,cfp_s
        mov  eax,offset dword reav1
        call ldr_
ini03:  mov  eax,offset dword reavt
        call mlr_
        dec  ebx
        jnz  ini03
        mov  eax,offset dword gtssc
        call str_
        mov  eax,offset dword reap5
        call ldr_
        mov  eax,offset dword gtssc
        call dvr_
        mov  eax,offset dword gtsrn
        call str_
        xor  edx,edx
        call prpar
        sub  esi,4*e_srs
        mov  ecx,dword prlen
        add  ecx,cfp_a
        add  ecx,nstmx
        add  ecx,3+4*8
        and  ecx,-4
        mov  edi,dword statb
        add  edi,ecx
        add  edi,4*e_hnb
        add  edi,4*e_sts
        call sysmx
        mov  dword kvmxl,ecx
        mov  dword mxlen,ecx
        cmp  edi,ecx
        ja   ini06
        add  ecx,3+4*1
        and  ecx,-4
        mov  edi,ecx
ini06:  mov  dword dnamb,edi
        mov  dword dnamp,edi
        or   ecx,ecx
        jnz  ini07
        sub  edi,4
        mov  dword kvmxl,edi
        mov  dword mxlen,edi
ini07:  mov  dword dname,esi
        cmp  dword dnamb,esi
        jb   ini09
        call sysmm
        sal  edi,2
        add  esi,edi
        or   edi,edi
        jnz  ini07
        mov  ecx,mxern
        xor  ebx,ebx
        xor  edx,edx
        mov  edi,stgic
        mov  esi,offset nulls
        call sysea
        .ini08-dffnc
        jmp  ini08
        call err_1
        .byte 73
ini08:  mov  edi,offset endmo
        mov  ecx,dword endml
        call syspr
        .err_-299-dffnc
        xor  esi,esi
        mov  ebx,num10
        call sysej
ini09:  mov  edi,dword statb
        call insta
        mov  ecx,e_hnb
        mov  edx,ecx
        mov  dword hshnb,edx
        mov  dword hshtb,edi
ini11:  xor  eax,eax
        stosd
        loop ini11
        mov  dword hshte,edi
        mov  dword state,edi
        mov  edx,num01
        mov  esi,offset nulls
        mov  dword r_sfc,esi
        call tmake
        mov  dword r_sfn,edi
        mov  edx,num01
        mov  esi,offset nulls
        call tmake
        mov  dword r_inc,edi
        mov  ecx,ccinm
        mov  esi,offset nulls
        call vmake
        .err_-299-dffnc
        mov  dword r_ifa,edi
        mov  ecx,ccinm
        mov  esi,offset inton
        call vmake
        .err_-299-dffnc
        mov  dword r_ifl,edi
        mov  esi,offset v_inp
        mov  ebx,trtin
        call inout
        mov  esi,offset v_oup
        mov  ebx,trtou
        call inout
        mov  edx,dword initr
        or   edx,edx
        jz   ini13
        call prpar
ini13:  call sysdc
        mov  dword flptr,esp
        call cmpil
        mov  dword r_cod,edi
        mov  dword r_ttl,offset nulls
        mov  dword r_stl,offset nulls
        xor  eax,eax
        mov  dword r_cim,eax
        xor  eax,eax
        mov  dword r_ccb,eax
        xor  eax,eax
        mov  dword cnind,eax
        xor  eax,eax
        mov  dword lstid,eax
        xor  esi,esi
        xor  ebx,ebx
        xor  eax,eax
        mov  dword dnams,eax
        call gbcol
        mov  dword dnams,edi
        cmp  dword dword ptr cpsts,0
        jnz  inix0
        call prtpg
        call prtmm
        mov  edx,dword cmerc
        mov  edi,offset encm3
        call prtmi
        mov  edx,dword gbcnt
        sub  edx,dword intv1
        mov  edi,offset stpm5
        call prtmi
        call systm
        sub  edx,dword timsx
        mov  edi,offset encm4
        call prtmi
        add  dword lstlc,num05
        cmp  dword dword ptr headp,0
        jz   inix0
        call prtpg
inix0:  cmp  dword cswin,iniln
        ja   inix1
        mov  dword cswin,inils
inix1:  call systm
        mov  dword timsx,edx
        xor  eax,eax
        mov  dword gbcnt,eax
        call sysbx
        mov  eax,dword cswex
        add  dword noxeq,eax
        cmp  dword dword ptr noxeq,0
        jnz  inix2
iniy0:  mov  dword headp,esp
        push 0
        mov  dword flptr,esp
        mov  edi,dword r_cod
        mov  dword stage,stgxt
        mov  dword polcs,num01
        mov  dword polct,num01
        mov  eax,dword cmpsn
        mov  dword pfnte,eax
        mov  eax,dword kvpfl
        mov  dword pfdmp,eax
        call systm
        mov  dword pfstm,edx
        call stgcc
        jmp  dword [edi]
inix2:  xor  ecx,ecx
        mov  ebx,nini9
        xor  esi,esi
        call sysej
rstrt:
        .global rstrt
        mov  esp,dword stbas
        xor  esi,esi
        jmp  iniy0
        .sbttl "s p i t b o l -- snobol4 operator routines"
        .balign 2
        nop
o_add:
        call arith
        .err_-1-dffnc
        .err_-2-dffnc
        .oadd1-dffnc
        add  edx,dword (4*icval)[esi]
        jno  exint
        call err_0
        .byte 3
oadd1:  lea  eax,dword (4*rcval)[esi]
        call adr_
        call ovr_
        jno  exrea
        call err_1
        .byte 5
        .balign 2
        nop
o_aff:
        pop  edi
        call gtnum
        .err_-4-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_alt:
        pop  edi
        call gtpat
        .err_-5-dffnc
oalt1:  mov  ebx,offset p_alt
        call pbild
        mov  esi,edi
        pop  edi
        call gtpat
        .err_-6-dffnc
        cmp  edi,offset p_alt
        je   oalt2
        mov  dword (4*pthen)[esi],edi
        push esi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
oalt2:  mov  eax,dword (4*parm1)[edi]
        mov  dword (4*pthen)[esi],eax
        push dword (4*pthen)[edi]
        mov  edi,esi
        jmp  oalt1
        .balign 2
        nop
o_amn:
        mov  edi,[ebp]
        add  ebp,4
        mov  ebx,edi
        jmp  arref
        .balign 2
        nop
o_amv:
        mov  edi,[ebp]
        add  ebp,4
        xor  ebx,ebx
        jmp  arref
        .balign 2
        nop
o_aon:
        mov  edi,dword [esp]
        mov  esi,dword (4*num01)[esp]
        mov  ecx,dword [esi]
        cmp  ecx,offset b_vct
        je   oaon2
        cmp  ecx,offset b_tbt
        je   oaon3
oaon1:  mov  edi,num01
        mov  ebx,edi
        jmp  arref
oaon2:  cmp  dword [edi],offset b_icl
        jne  oaon1
        mov  edx,dword (4*icval)[edi]
        or   edx,edx
        js   exfal
        mov  ecx,edx
        or   ecx,ecx
        jz   exfal
        add  ecx,vcvlb
        sal  ecx,2
        mov  dword [esp],ecx
        cmp  ecx,dword (4*vclen)[esi]
        jb   oaon4
        jmp  exfal
oaon3:  mov  ebx,esp
        call tfind
        .exfal-dffnc
        mov  dword (4*num01)[esp],esi
        mov  dword [esp],ecx
oaon4:  mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_aov:
        pop  edi
        pop  esi
        mov  ecx,dword [esi]
        cmp  ecx,offset b_vct
        je   oaov2
        cmp  ecx,offset b_tbt
        je   oaov3
oaov1:  push esi
        push edi
        mov  edi,num01
        xor  ebx,ebx
        jmp  arref
oaov2:  cmp  dword [edi],offset b_icl
        jne  oaov1
        mov  edx,dword (4*icval)[edi]
        or   edx,edx
        js   exfal
        mov  ecx,edx
        or   ecx,ecx
        jz   exfal
        add  ecx,vcvlb
        sal  ecx,2
        cmp  ecx,dword (4*vclen)[esi]
        jae  exfal
        call acess
        .exfal-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
oaov3:  xor  ebx,ebx
        call tfind
        .exfal-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_ass:
oass0:  pop  ebx
        pop  ecx
        mov  esi,dword [esp]
        mov  dword [esp],ebx
        call asign
        .exfal-dffnc
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_cer:
        call err_0
        .byte 7
        .balign 2
        nop
o_cas:
        pop  edx
        pop  edi
        mov  ebx,offset p_cas
        call pbild
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_cnc:
        mov  edi,dword [esp]
        cmp  edi,offset nulls
        je   ocnc3
        mov  esi,dword (4*1)[esp]
        cmp  esi,offset nulls
        je   ocnc4
        mov  ecx,offset b_scl
        cmp  ecx,dword [esi]
        jne  ocnc2
        cmp  ecx,dword [edi]
        jne  ocnc2
ocnc1:  mov  ecx,dword (4*sclen)[esi]
        add  ecx,dword (4*sclen)[edi]
        call alocs
        mov  dword (4*1)[esp],edi
        add  edi,cfp_f
        mov  ecx,dword (4*sclen)[esi]
        add  esi,cfp_f
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
        pop  esi
        mov  ecx,dword (4*sclen)[esi]
        add  esi,cfp_f
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
        xor  esi,esi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
ocnc2:  call gtstg
        .ocnc5-dffnc
        mov  esi,edi
        call gtstg
        .ocnc6-dffnc
        push edi
        push esi
        mov  esi,edi
        mov  edi,dword [esp]
        jmp  ocnc1
ocnc3:  add  esp,4
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
ocnc4:  add  esp,4
        mov  dword [esp],edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
ocnc5:  mov  esi,edi
        pop  edi
ocnc6:  call gtpat
        .err_-8-dffnc
        push edi
        mov  edi,esi
        call gtpat
        .err_-9-dffnc
        mov  esi,edi
        pop  edi
        call pconc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_com:
        pop  edi
        mov  ecx,dword [edi]
ocom1:  cmp  ecx,offset b_icl
        je   ocom2
        cmp  ecx,offset b_rcl
        je   ocom3
        call gtnum
        .err_-10-dffnc
        jmp  ocom1
ocom2:  mov  edx,dword (4*icval)[edi]
        neg  edx
        jno  exint
        call err_0
        .byte 11
ocom3:  lea  eax,dword (4*rcval)[edi]
        call ldr_
        call ngr_
        jmp  exrea
        .balign 2
        nop
o_dvd:
        call arith
        .err_-12-dffnc
        .err_-13-dffnc
        .odvd2-dffnc
        mov  eax,dword (4*icval)[esi]
        call dvi_
        jno  exint
        call err_0
        .byte 14
odvd2:  lea  eax,dword (4*rcval)[esi]
        call dvr_
        call ovr_
        jno  exrea
        call err_1
        .byte 6
        .balign 2
        nop
o_exp:
        pop  edi
        call gtnum
        .err_-15-dffnc
        mov  esi,edi
        pop  edi
        call gtnum
        .err_-16-dffnc
        cmp  dword [esi],offset b_rcl
        je   oexp7
        mov  edx,dword (4*icval)[esi]
        or   edx,edx
        jl   oex12
        cmp  ecx,offset b_rcl
        je   oexp3
        or   edx,edx
        js   oexp2
        mov  ecx,edx
        mov  edx,dword (4*icval)[edi]
        or   ecx,ecx
        jnz  oexp1
        or   edx,edx
        je   oexp4
        mov  edx,dword intv1
        jmp  exint
oex13:  imul edx,dword (4*icval)[edi]
        jo   oexp2
oexp1:  loop oex13
        jmp  exint
oexp2:  call err_0
        .byte 17
oexp3:  or   edx,edx
        js   oexp6
        mov  ecx,edx
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        or   ecx,ecx
        jnz  oexp5
        call cpr_
        je   oexp4
        mov  eax,offset dword reav1
        call ldr_
        jmp  exrea
oexp4:  call err_0
        .byte 18
oex14:  lea  eax,dword (4*rcval)[edi]
        call mlr_
        call ovr_
        jo   oexp6
oexp5:  loop oex14
        jmp  exrea
oexp6:  call err_1
        .byte 10
oexp7:  cmp  dword [edi],offset b_rcl
        je   oexp8
        mov  edx,dword (4*icval)[edi]
        call itr_
        call rcbld
oexp8:  xor  ebx,ebx
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        call cpr_
        jne  oexp9
        lea  eax,dword (4*rcval)[esi]
        call ldr_
        call cpr_
        je   oexp4
        mov  eax,offset dword reav0
        call ldr_
        jmp  exrea
oexp9:  call cpr_
        jg   oex10
        call ngr_
        call rcbld
        lea  eax,dword (4*rcval)[esi]
        call ldr_
        call chp_
        call rti_
        jc   oexp6
        lea  eax,dword (4*rcval)[esi]
        call sbr_
        call cpr_
        jne  oex11
        mov  ebx,edx
        and  ebx,dword bits1
        lea  eax,dword (4*rcval)[edi]
        call ldr_
oex10:  call lnf_
        call ovr_
        jo   oexp6
        lea  eax,dword (4*rcval)[esi]
        call mlr_
        call ovr_
        jo   oexp6
        call etx_
        call ovr_
        jo   oexp6
        or   ebx,ebx
        jz   exrea
        call ngr_
        jmp  exrea
oex11:  call err_1
        .byte 55
oex12:  push edi
        call itr_
        call rcbld
        mov  esi,edi
        pop  edi
        jmp  oexp7
        .balign 2
        nop
o_fex:
        jmp  evlx6
        .balign 2
        nop
o_fif:
        call err_0
        .byte 20
        .balign 2
        nop
o_fnc:
        mov  ecx,[ebp]
        add  ebp,4
        mov  edi,[ebp]
        add  ebp,4
        mov  esi,dword (4*vrfnc)[edi]
        cmp  ecx,dword (4*fargs)[esi]
        jne  cfunc
        jmp  dword [esi]
        .balign 2
        nop
o_fne:
        mov  ecx,[ebp]
        add  ebp,4
        cmp  ecx,offset ornm_
        jne  ofne1
        cmp  dword dword ptr (4*num02)[esp],0
        jz   evlx3
ofne1:  call err_0
        .byte 21
        .balign 2
        nop
o_fns:
        mov  edi,[ebp]
        add  ebp,4
        mov  ecx,num01
        mov  esi,dword (4*vrfnc)[edi]
        cmp  ecx,dword (4*fargs)[esi]
        jne  cfunc
        jmp  dword [esi]
        .balign 2
        nop
o_fun:
        call err_0
        .byte 22
        .balign 2
        nop
o_goc:
        mov  edi,dword (4*num01)[esp]
        cmp  edi,dword state
        ja   ogoc1
        add  edi,4*vrtra
        jmp  dword [edi]
ogoc1:  call err_0
        .byte 23
        .balign 2
        nop
o_god:
        mov  edi,dword [esp]
        mov  ecx,dword [edi]
        cmp  ecx,offset b_cds
        je   bcds0
        cmp  ecx,offset b_cdc
        je   bcdc0
        call err_0
        .byte 24
        .balign 2
        nop
o_gof:
        mov  edi,dword flptr
        add  dword [edi],4
        add  ebp,4
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_ima:
        mov  ebx,offset p_imc
        pop  edx
        pop  edi
        call pbild
        mov  esi,edi
        mov  edi,dword [esp]
        call gtpat
        .err_-25-dffnc
        mov  dword [esp],edi
        mov  ebx,offset p_ima
        call pbild
        pop  dword (4*pthen)[edi]
        call pconc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_inn:
        mov  ebx,esp
        jmp  indir
        .balign 2
        nop
o_int:
        mov  dword [esp],offset nulls
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_inv:
        xor  ebx,ebx
        jmp  indir
        .balign 2
        nop
o_kwn:
        call kwnam
        jmp  exnam
        .balign 2
        nop
o_kwv:
        call kwnam
        mov  dword dnamp,edi
        call acess
        .exnul-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_lex:
        mov  ecx,4*evsi_
        call alloc
        mov  dword [edi],offset b_evt
        mov  dword (4*evvar)[edi],offset trbev
        mov  ecx,[ebp]
        add  ebp,4
        mov  dword (4*evexp)[edi],ecx
        mov  esi,edi
        mov  ecx,4*evvar
        jmp  exnam
        .balign 2
        nop
o_lpt:
        mov  edi,[ebp]
        add  ebp,4
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_lvn:
        mov  ecx,[ebp]
        add  ebp,4
        push ecx
        push 4*vrval
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_mlt:
        call arith
        .err_-26-dffnc
        .err_-27-dffnc
        .omlt1-dffnc
        imul edx,dword (4*icval)[esi]
        jno  exint
        call err_0
        .byte 28
omlt1:  lea  eax,dword (4*rcval)[esi]
        call mlr_
        call ovr_
        jno  exrea
        call err_1
        .byte 7
        .balign 2
        nop
o_nam:
        mov  ecx,4*nmsi_
        call alloc
        mov  dword [edi],offset b_nml
        pop  dword (4*nmofs)[edi]
        pop  dword (4*nmbas)[edi]
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_nta:
        mov  ecx,[ebp]
        add  ebp,4
        push dword flptr
        push ecx
        mov  dword flptr,esp
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_ntb:
        mov  eax,dword (4*num02)[esp]
        mov  dword flptr,eax
        jmp  exfal
        .balign 2
        nop
o_ntc:
        add  esp,4
        pop  dword flptr
        jmp  exnul
        .balign 2
        nop
o_oun:
        call err_0
        .byte 29
        .balign 2
        nop
o_pas:
        mov  ebx,offset p_pac
        pop  edx
        pop  edi
        call pbild
        mov  esi,edi
        mov  edi,dword [esp]
        call gtpat
        .err_-30-dffnc
        mov  dword [esp],edi
        mov  ebx,offset p_paa
        call pbild
        pop  dword (4*pthen)[edi]
        call pconc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_pmn:
        xor  ebx,ebx
        jmp  match
        .balign 2
        nop
o_pms:
        mov  ebx,num02
        jmp  match
        .balign 2
        nop
o_pmv:
        mov  ebx,num01
        jmp  match
        .balign 2
        nop
o_pop:
        add  esp,4
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_stp:
        jmp  lend0
        .balign 2
        nop
o_rnm:
        jmp  evlx4
        .balign 2
        nop
o_rpl:
        call gtstg
        .err_-31-dffnc
        mov  esi,dword [esp]
        add  ecx,dword (4*sclen)[esi]
        add  ecx,dword (4*num02)[esp]
        sub  ecx,dword (4*num01)[esp]
#        or   ecx,ecx         (optimized)
        jz   orpl3
        push edi
        call alocs
        mov  ecx,dword (4*num03)[esp]
        mov  dword (4*num03)[esp],edi
        add  edi,cfp_f
        or   ecx,ecx
        jz   orpl1
        mov  esi,dword (4*num01)[esp]
        add  esi,cfp_f
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
orpl1:  pop  esi
        mov  ecx,dword (4*sclen)[esi]
        or   ecx,ecx
        jz   orpl2
        add  esi,cfp_f
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
orpl2:  pop  esi
        pop  edx
        mov  ecx,dword (4*sclen)[esi]
        sub  ecx,edx
#        or   ecx,ecx         (optimized)
        jz   oass0
        lea  esi,[cfp_f+esi+edx]
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
        jmp  oass0
orpl3:  add  esp,4*num02
        mov  dword [esp],offset nulls
        jmp  oass0
        .balign 2
        nop
o_rvl:
        jmp  evlx3
        .balign 2
        nop
o_sla:
        mov  ecx,[ebp]
        add  ebp,4
        push dword flptr
        push ecx
        mov  dword flptr,esp
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_slb:
        pop  edi
        add  esp,4
        mov  eax,dword [esp]
        mov  dword flptr,eax
        mov  dword [esp],edi
        mov  ecx,[ebp]
        add  ebp,4
        add  ecx,dword r_cod
        mov  ebp,ecx
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_slc:
        mov  ecx,[ebp]
        add  ebp,4
        mov  dword [esp],ecx
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_sld:
        add  esp,4
        pop  dword flptr
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
o_sub:
        call arith
        .err_-32-dffnc
        .err_-33-dffnc
        .osub1-dffnc
        sub  edx,dword (4*icval)[esi]
        jno  exint
        call err_0
        .byte 34
osub1:  lea  eax,dword (4*rcval)[esi]
        call sbr_
        call ovr_
        jno  exrea
        call err_1
        .byte 8
        .balign 2
        nop
o_txr:
        jmp  trxq1
        .balign 2
        nop
o_unf:
        call err_0
        .byte 35
        .sbttl "s p i t b o l -- block action routines"
        .balign 2
        .byte bl__i
b_aaa:
        .balign 2
        .byte bl_ex
b_exl:
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        .byte bl_se
b_sel:
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        .byte bl__i
b_e__:
        .balign 2
        .byte bl_tr
b_trt:
        .balign 2
        .byte bl__i
b_t__:
        .balign 2
        .byte bl_ar
b_art:
        .balign 2
        .byte bl_bc
b_bct:
        .balign 2
        .byte bl_bf
b_bft:
        .balign 2
        .byte bl_cc
b_cct:
        .balign 2
        .byte bl_cd
b_cdc:
bcdc0:  mov  esp,dword flptr
        mov  eax,dword (4*cdfal)[edi]
        mov  dword [esp],eax
        jmp  stmgo
        .balign 2
        .byte bl_cd
b_cds:
bcds0:  mov  esp,dword flptr
        mov  dword [esp],4*cdfal
        jmp  stmgo
        .balign 2
        .byte bl_cm
b_cmt:
        .balign 2
        .byte bl_ct
b_ctt:
        .balign 2
        .byte bl_df
b_dfc:
        mov  ecx,dword (4*dfpdl)[esi]
        call alloc
        mov  dword [edi],offset b_pdt
        mov  dword (4*pddfp)[edi],esi
        mov  edx,edi
        add  edi,ecx
        mov  ecx,dword (4*fargs)[esi]
bdfc1:  lea  edi,[edi-4]
        pop  dword [edi]
        loop bdfc1
        mov  edi,edx
        jmp  exsid
        .balign 2
        .byte bl_ef
b_efc:
        mov  edx,dword (4*fargs)[esi]
        sal  edx,2
        push esi
        mov  esi,esp
befc1:  add  esi,4
        mov  edi,dword [esp]
        sub  edx,4
        add  edi,edx
        mov  edi,dword (4*eftar)[edi]
        jmp  dword l0002[edi*4]
        dseg_
l0002:
        .long befc7
        .long befc2
        .long befc3
        .long befc4
        .long beff1
        dsegend_
        cseg_
beff1:  push esi
        mov  dword befof,edx
        push dword [esi]
        call iofcb
        .err_-298-dffnc
        .err_-298-dffnc
        .err_-298-dffnc
        mov  edi,ecx
        pop  esi
        jmp  befc5
befc2:  push dword [esi]
        call gtstg
        .err_-39-dffnc
        jmp  befc6
befc3:  mov  edi,dword [esi]
        mov  dword befof,edx
        call gtint
        .err_-40-dffnc
        jmp  befc5
befc4:  mov  edi,dword [esi]
        mov  dword befof,edx
        call gtrea
        .err_-265-dffnc
befc5:  mov  edx,dword befof
befc6:  mov  dword [esi],edi
befc7:  or   edx,edx
        jnz  befc1
        pop  esi
        mov  ecx,dword (4*fargs)[esi]
        call sysex
        .exfal-dffnc
        .err_-327-dffnc
        .err_-326-dffnc
        sal  ecx,2
        add  esp,ecx
        mov  ebx,dword (4*efrsl)[esi]
        or   ebx,ebx
        jnz  befa8
        cmp  dword [edi],offset b_scl
        jne  befc8
        cmp  dword dword ptr (4*sclen)[edi],0
        jz   exnul
befa8:  cmp  ebx,num01
        jne  befc8
        cmp  dword dword ptr (4*sclen)[edi],0
        jz   exnul
befc8:  cmp  edi,dword dnamb
        jb   befc9
        cmp  edi,dword dnamp
        jbe  exixr
befc9:  mov  ecx,dword [edi]
        or   ebx,ebx
        jz   bef11
        mov  ecx,offset b_scl
        cmp  ebx,num01
        je   bef10
        mov  ecx,offset b_icl
        cmp  ebx,num02
        je   bef10
        mov  ecx,offset b_rcl
bef10:  mov  dword [edi],ecx
bef11:  cmp  dword [edi],offset b_scl
        je   bef12
        call blkln
        mov  esi,edi
        call alloc
        push edi
        shr  ecx,2
        rep  movsd
        xor  esi,esi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
bef12:  mov  esi,edi
        mov  ecx,dword (4*sclen)[edi]
        or   ecx,ecx
        jz   exnul
        call alocs
        push edi
        add  edi,cfp_f
        add  esi,cfp_f
        mov  ecx,edx
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
        xor  esi,esi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        .byte bl_ev
b_evt:
        .balign 2
        .byte bl_ff
b_ffc:
        mov  edi,esi
        mov  edx,[ebp]
        add  ebp,4
        mov  esi,dword [esp]
        cmp  dword [esi],offset b_pdt
        jne  bffc2
        mov  ecx,dword (4*pddfp)[esi]
bffc1:  cmp  ecx,dword (4*ffdfp)[edi]
        je   bffc3
        mov  edi,dword (4*ffnxt)[edi]
        or   edi,edi
        jnz  bffc1
bffc2:  call err_0
        .byte 41
bffc3:  mov  ecx,dword (4*ffofs)[edi]
        cmp  edx,offset ofne_
        je   bffc5
        add  esi,ecx
        mov  edi,dword [esi]
        cmp  dword [edi],offset b_trt
        jne  bffc4
        sub  esi,ecx
        mov  dword [esp],edx
        call acess
        .exfal-dffnc
        mov  edx,dword [esp]
bffc4:  mov  dword [esp],edi
        mov  edi,edx
        mov  esi,dword [edi]
        jmp  esi
bffc5:  push ecx
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        .byte bl_ic
b_icl:
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        .byte bl_kv
b_kvt:
        .balign 2
        .byte bl_nm
b_nml:
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        .byte bl_pd
b_pdt:
        .balign 2
        .byte bl_pf
b_pfc:
        mov  dword bpfpf,esi
        mov  edi,esi
        mov  esi,dword (4*pfvbl)[edi]
bpf01:  mov  ebx,esi
        mov  esi,dword (4*vrval)[esi]
        cmp  dword [esi],offset b_trt
        je   bpf01
        mov  dword bpfsv,esi
        mov  esi,ebx
        mov  dword (4*vrval)[esi],offset nulls
        mov  ecx,dword (4*fargs)[edi]
        add  edi,4*pfarg
        or   ecx,ecx
        jz   bpf04
        mov  esi,esp
        sal  ecx,2
        add  esi,ecx
        mov  dword bpfxt,esi
bpf02:  mov  esi,dword [edi]
        lea  edi,[edi+4]
bpf03:  mov  edx,esi
        mov  esi,dword (4*vrval)[esi]
        cmp  dword [esi],offset b_trt
        je   bpf03
        mov  ecx,esi
        mov  esi,dword bpfxt
        lea  esi,[esi-4]
        mov  ebx,dword [esi]
        mov  dword [esi],ecx
        mov  dword bpfxt,esi
        mov  esi,edx
        mov  dword (4*vrval)[esi],ebx
        cmp  esp,dword bpfxt
        jne  bpf02
bpf04:  mov  esi,dword bpfpf
        mov  ecx,dword (4*pfnlo)[esi]
        or   ecx,ecx
        jz   bpf07
        mov  ebx,offset nulls
bpf05:  mov  esi,dword [edi]
        lea  edi,[edi+4]
bpf06:  mov  edx,esi
        mov  esi,dword (4*vrval)[esi]
        cmp  dword [esi],offset b_trt
        je   bpf06
        push esi
        mov  esi,edx
        mov  dword (4*vrval)[esi],ebx
        loop bpf05
bpf07:  xor  edi,edi
        cmp  dword dword ptr kvpfl,0
        jz   bpf7c
        cmp  dword kvpfl,num02
        je   bpf7a
        call systm
        mov  dword pfetm,edx
        sub  edx,dword pfstm
        call icbld
        mov  edx,dword pfetm
        jmp  bpf7b
bpf7a:  mov  edx,dword pfstm
        call icbld
        call systm
bpf7b:  mov  dword pfstm,edx
        mov  dword pffnc,esp
bpf7c:  push edi
        mov  ecx,dword r_cod
        mov  ebx,ebp
        sub  ebx,ecx
        mov  esi,dword bpfpf
        push dword bpfsv
        push ecx
        push ebx
        push dword flprt
        push dword flptr
        push esi
        push 0
        cmp  esp,lowspmin
        jb   sec06
        mov  dword flptr,esp
        mov  dword flprt,esp
        mov  ecx,dword kvtra
        add  ecx,dword kvftr
#        or   ecx,ecx         (optimized)
        jnz  bpf09
        inc  dword kvfnc
bpf08:  mov  edi,dword (4*pfcod)[esi]
        mov  edi,dword (4*vrlbl)[edi]
        cmp  edi,offset stndl
        je   bpf17
        cmp  dword [edi],offset b_trt
        jne  bpf8a
        mov  edi,dword (4*trlbl)[edi]
bpf8a:  jmp  dword [edi]
bpf09:  mov  edi,dword (4*pfctr)[esi]
        mov  esi,dword (4*pfvbl)[esi]
        mov  ecx,4*vrval
        cmp  dword dword ptr kvtra,0
        jz   bpf10
        or   edi,edi
        jz   bpf10
        dec  dword kvtra
        cmp  dword dword ptr (4*trfnc)[edi],0
        jz   bpf11
        call trxeq
bpf10:  cmp  dword dword ptr kvftr,0
        jz   bpf16
        dec  dword kvftr
bpf11:  call prtsn
        call prtnm
        mov  ecx,ch_pp
        call prtch
        mov  esi,dword (4*num01)[esp]
        cmp  dword dword ptr (4*fargs)[esi],0
        jz   bpf15
        xor  ebx,ebx
        jmp  bpf13
bpf12:  mov  ecx,ch_cm
        call prtch
bpf13:  mov  dword [esp],ebx
        sal  ebx,2
        add  esi,ebx
        mov  edi,dword (4*pfarg)[esi]
        sub  esi,ebx
        mov  edi,dword (4*vrval)[edi]
        call prtvl
        mov  ebx,dword [esp]
        inc  ebx
        cmp  ebx,dword (4*fargs)[esi]
        jb   bpf12
bpf15:  mov  ecx,ch_rp
        call prtch
        call prtnl
bpf16:  inc  dword kvfnc
        mov  esi,dword r_fnc
        call ktrex
        mov  esi,dword (4*num01)[esp]
        jmp  bpf08
bpf17:  mov  eax,dword (4*num02)[esp]
        mov  dword flptr,eax
        call err_1
        .byte 30
        .balign 2
        .byte bl_rc
b_rcl:
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        .byte bl_sc
b_scl:
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        .byte bl_tb
b_tbt:
        .balign 2
        .byte bl_te
b_tet:
        .balign 2
        .byte bl_vc
b_vct:
        .balign 2
        .byte bl__i
b_vr_:
        .balign 2
        .byte bl__i
b_vra:
        mov  esi,edi
        mov  ecx,4*vrval
        call acess
        .exfal-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
b_vre:
        call err_0
        .byte 42
        .balign 2
        nop
b_vrg:
        mov  edi,dword (4*vrlbo)[edi]
        mov  esi,dword [edi]
        jmp  esi
        .balign 2
        nop
b_vrl:
        push dword (4*vrval)[edi]
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
b_vrs:
        mov  eax,dword [esp]
        mov  dword (4*vrvlo)[edi],eax
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
b_vrt:
        sub  edi,4*vrtra
        mov  esi,edi
        mov  ecx,4*vrval
        mov  edi,dword (4*vrlbl)[esi]
        cmp  dword dword ptr kvtra,0
        jz   bvrt2
        dec  dword kvtra
        cmp  dword dword ptr (4*trfnc)[edi],0
        jz   bvrt1
        call trxeq
        jmp  bvrt2
bvrt1:  call prtsn
        mov  edi,esi
        mov  ecx,ch_cl
        call prtch
        mov  ecx,ch_pp
        call prtch
        call prtvn
        mov  ecx,ch_rp
        call prtch
        call prtnl
        mov  edi,dword (4*vrlbl)[esi]
bvrt2:  mov  edi,dword (4*trlbl)[edi]
        jmp  dword [edi]
        .balign 2
        nop
b_vrv:
        mov  ebx,dword [esp]
        sub  edi,4*vrsto
        mov  esi,edi
        mov  ecx,4*vrval
        call asign
        .exfal-dffnc
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        .byte bl_xn
b_xnt:
        .balign 2
        .byte bl_xr
b_xrt:
        .balign 2
        .byte bl__i
b_yyy:
        .sbttl "s p i t b o l -- pattern matching routines"
        .balign 2
        .byte bl__i
p_aaa:
        .balign 2
        .byte bl_p0
p_aba:
        push ebx
        push edi
        push dword pmhbs
        push offset ndabb
        mov  dword pmhbs,esp
        jmp  succp
        .balign 2
        nop
p_abb:
        mov  dword pmhbs,ebx
        jmp  flpop
        .balign 2
        .byte bl_p0
p_abc:
        mov  esi,dword pmhbs
        mov  ecx,dword (4*num03)[esi]
        mov  eax,dword (4*num01)[esi]
        mov  dword pmhbs,eax
        cmp  esi,esp
        je   pabc1
        push esi
        push offset ndabd
        jmp  pabc2
pabc1:  add  esp,4*num04
pabc2:  cmp  ecx,ebx
        jne  succp
        mov  edi,dword (4*pthen)[edi]
        jmp  succp
        .balign 2
        nop
p_abd:
        mov  dword pmhbs,ebx
        jmp  failp
        .balign 2
        .byte bl_p0
p_abo:
        jmp  exfal
        .balign 2
        .byte bl_p1
p_alt:
        push ebx
        push dword (4*parm1)[edi]
        cmp  esp,lowspmin
        jb   sec06
        jmp  succp
        .balign 2
        .byte bl_p1
p_ans:
        cmp  ebx,dword pmssl
        je   failp
        mov  esi,dword r_pms
        lea  esi,[cfp_f+esi+ebx]
        movzx ecx,byte [esi]
        cmp  ecx,dword (4*parm1)[edi]
        jne  failp
        inc  ebx
        jmp  succp
        .balign 2
        .byte bl_p2
p_any:
pany1:  cmp  ebx,dword pmssl
        je   failp
        mov  esi,dword r_pms
        lea  esi,[cfp_f+esi+ebx]
        movzx ecx,byte [esi]
        mov  esi,dword (4*parm1)[edi]
        sal  ecx,2
        add  esi,ecx
        mov  ecx,dword (4*ctchs)[esi]
        and  ecx,dword (4*parm2)[edi]
#        or   ecx,ecx         (optimized)
        jz   failp
        inc  ebx
        jmp  succp
        .balign 2
        .byte bl_p1
p_ayd:
        call evals
        .err_-43-dffnc
        .failp-dffnc
        .pany1-dffnc
        .balign 2
        .byte bl_p0
p_arb:
        mov  edi,dword (4*pthen)[edi]
        push ebx
        push edi
        push ebx
        push offset ndarc
        jmp  dword [edi]
        .balign 2
        nop
p_arc:
        cmp  ebx,dword pmssl
        je   flpop
        inc  ebx
        push ebx
        push edi
        mov  edi,dword (4*num02)[esp]
        jmp  dword [edi]
        .balign 2
        .byte bl_p0
p_bal:
        xor  edx,edx
        mov  esi,dword r_pms
        lea  esi,[cfp_f+esi+ebx]
        jmp  pbal2
pbal1:  movzx ecx,byte [esi]
        inc  esi
        inc  ebx
        cmp  ecx,ch_pp
        je   pbal3
        cmp  ecx,ch_rp
        je   pbal4
        or   edx,edx
        jz   pbal5
pbal2:  cmp  ebx,dword pmssl
        jne  pbal1
        jmp  failp
pbal3:  inc  edx
        jmp  pbal2
pbal4:  or   edx,edx
        jz   failp
        dec  edx
#        or   edx,edx         (optimized)
        jnz  pbal2
pbal5:  push ebx
        push edi
        jmp  succp
        .balign 2
        .byte bl_p1
p_bkd:
        call evals
        .err_-44-dffnc
        .failp-dffnc
        .pbrk1-dffnc
        .balign 2
        .byte bl_p1
p_bks:
        mov  edx,dword pmssl
        sub  edx,ebx
#        or   edx,edx         (optimized)
        jz   failp
        mov  esi,dword r_pms
        lea  esi,[cfp_f+esi+ebx]
pbks1:  movzx ecx,byte [esi]
        inc  esi
        cmp  ecx,dword (4*parm1)[edi]
        je   succp
        inc  ebx
        dec  edx
        jnz  pbks1
        jmp  failp
        .balign 2
        .byte bl_p2
p_brk:
pbrk1:  mov  edx,dword pmssl
        sub  edx,ebx
#        or   edx,edx         (optimized)
        jz   failp
        mov  esi,dword r_pms
        lea  esi,[cfp_f+esi+ebx]
        mov  dword psave,edi
pbrk2:  movzx ecx,byte [esi]
        inc  esi
        mov  edi,dword (4*parm1)[edi]
        sal  ecx,2
        add  edi,ecx
        mov  ecx,dword (4*ctchs)[edi]
        mov  edi,dword psave
        and  ecx,dword (4*parm2)[edi]
#        or   ecx,ecx         (optimized)
        jnz  succp
        inc  ebx
        dec  edx
        jnz  pbrk2
        jmp  failp
        .balign 2
        .byte bl_p0
p_bkx:
        inc  ebx
        jmp  succp
        .balign 2
        .byte bl_p1
p_bxd:
        call evals
        .err_-45-dffnc
        .failp-dffnc
        .pbrk1-dffnc
        .balign 2
        .byte bl_p2
p_cas:
        push edi
        push ebx
        mov  esi,dword (4*parm1)[edi]
        mov  edx,ebx
        mov  ebx,dword (4*parm2)[edi]
        call icbld
        mov  ecx,ebx
        mov  ebx,edi
        call asinp
        .flpop-dffnc
        pop  ebx
        pop  edi
        jmp  succp
        .balign 2
        .byte bl_p1
p_exa:
        call evalp
        .failp-dffnc
        cmp  ecx,offset p_aaa
        jb   pexa1
        push ebx
        push edi
        push dword pmhbs
        push offset ndexb
        mov  dword pmhbs,esp
        mov  edi,esi
        jmp  dword [edi]
pexa1:  cmp  ecx,offset b_scl
        je   pexa2
        push esi
        mov  esi,edi
        call gtstg
        .err_-46-dffnc
        mov  edx,edi
        mov  edi,esi
        mov  esi,edx
pexa2:  cmp  dword dword ptr (4*sclen)[esi],0
        jz   succp
        jmp  pstr1
        .balign 2
        nop
p_exb:
        mov  dword pmhbs,ebx
        jmp  flpop
        .balign 2
        nop
p_exc:
        mov  dword pmhbs,ebx
        jmp  failp
        .balign 2
        .byte bl_p0
p_fal:
        jmp  failp
        .balign 2
        .byte bl_p0
p_fen:
        push ebx
        push offset ndabo
        jmp  succp
        .balign 2
        .byte bl_p0
p_fna:
        push dword pmhbs
        push offset ndfnb
        mov  dword pmhbs,esp
        jmp  succp
        .balign 2
        .byte bl_p0
p_fnb:
        mov  dword pmhbs,ebx
        jmp  failp
        .balign 2
        .byte bl_p0
p_fnc:
        mov  esi,dword pmhbs
        mov  eax,dword (4*num01)[esi]
        mov  dword pmhbs,eax
        cmp  esi,esp
        je   pfnc1
        push esi
        push offset ndfnd
        jmp  succp
pfnc1:  add  esp,4*num02
        jmp  succp
        .balign 2
        .byte bl_p0
p_fnd:
        mov  esp,ebx
        jmp  flpop
        .balign 2
        .byte bl_p0
p_ima:
        push ebx
        push edi
        push dword pmhbs
        push offset ndimb
        mov  dword pmhbs,esp
        jmp  succp
        .balign 2
        nop
p_imb:
        mov  dword pmhbs,ebx
        jmp  flpop
        .balign 2
        .byte bl_p2
p_imc:
        mov  esi,dword pmhbs
        mov  ecx,ebx
        mov  ebx,dword (4*num03)[esi]
        mov  eax,dword (4*num01)[esi]
        mov  dword pmhbs,eax
        cmp  esi,esp
        je   pimc1
        push esi
        push offset ndimd
        jmp  pimc2
pimc1:  add  esp,4*num04
pimc2:  push ecx
        push edi
        mov  esi,dword r_pms
        sub  ecx,ebx
        call sbstr
        mov  ebx,edi
        mov  edi,dword [esp]
        mov  esi,dword (4*parm1)[edi]
        mov  ecx,dword (4*parm2)[edi]
        call asinp
        .flpop-dffnc
        pop  edi
        pop  ebx
        jmp  succp
        .balign 2
        nop
p_imd:
        mov  dword pmhbs,ebx
        jmp  failp
        .balign 2
        .byte bl_p1
p_len:
plen1:  add  ebx,dword (4*parm1)[edi]
        cmp  ebx,dword pmssl
        jbe  succp
        jmp  failp
        .balign 2
        .byte bl_p1
p_lnd:
        call evali
        .err_-47-dffnc
        .err_-48-dffnc
        .failp-dffnc
        .plen1-dffnc
        .balign 2
        .byte bl_p1
p_nad:
        call evals
        .err_-49-dffnc
        .failp-dffnc
        .pnay1-dffnc
        .balign 2
        .byte bl_p1
p_nas:
        cmp  ebx,dword pmssl
        je   failp
        mov  esi,dword r_pms
        lea  esi,[cfp_f+esi+ebx]
        movzx ecx,byte [esi]
        cmp  ecx,dword (4*parm1)[edi]
        je   failp
        inc  ebx
        jmp  succp
        .balign 2
        .byte bl_p2
p_nay:
pnay1:  cmp  ebx,dword pmssl
        je   failp
        mov  esi,dword r_pms
        lea  esi,[cfp_f+esi+ebx]
        movzx ecx,byte [esi]
        sal  ecx,2
        mov  esi,dword (4*parm1)[edi]
        add  esi,ecx
        mov  ecx,dword (4*ctchs)[esi]
        and  ecx,dword (4*parm2)[edi]
#        or   ecx,ecx         (optimized)
        jnz  failp
        inc  ebx
        jmp  succp
        .balign 2
        .byte bl_p0
p_nth:
        mov  esi,dword pmhbs
        mov  ecx,dword (4*num01)[esi]
        cmp  ecx,num02
        jbe  pnth2
        mov  dword pmhbs,ecx
        mov  edi,dword (4*num02)[esi]
        cmp  esi,esp
        je   pnth1
        push esi
        push offset ndexc
        jmp  succp
pnth1:  add  esp,4*num04
        jmp  succp
pnth2:  mov  dword pmssl,ebx
        cmp  dword dword ptr pmdfl,0
        jz   pnth6
pnth3:  sub  esi,4
        lea  esi,[esi-4]
        mov  ecx,dword [esi]
        cmp  ecx,offset ndpad
        je   pnth4
        cmp  ecx,offset ndpab
        jne  pnth5
        push dword (4*num01)[esi]
        cmp  esp,lowspmin
        jb   sec06
        jmp  pnth3
pnth4:  mov  ecx,dword (4*num01)[esi]
        mov  ebx,dword [esp]
        mov  dword [esp],esi
        sub  ecx,ebx
        mov  esi,dword r_pms
        call sbstr
        mov  ebx,edi
        mov  esi,dword [esp]
        mov  esi,dword (4*num02)[esi]
        mov  ecx,dword (4*parm2)[esi]
        mov  esi,dword (4*parm1)[esi]
        call asinp
        .exfal-dffnc
        pop  esi
pnth5:  cmp  esi,esp
        jne  pnth3
pnth6:  mov  esp,dword pmhbs
        pop  ebx
        pop  edx
        mov  ecx,dword pmssl
        mov  esi,dword r_pms
        xor  eax,eax
        mov  dword r_pms,eax
        or   edx,edx
        jz   pnth7
        cmp  edx,num02
        je   pnth9
        sub  ecx,ebx
        call sbstr
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
pnth7:  push ebx
        push ecx
pnth8:  push esi
pnth9:  mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        .byte bl_p1
p_pos:
        cmp  ebx,dword (4*parm1)[edi]
        je   succp
        or   ebx,ebx
        jnz  failp
        mov  esi,dword pmhbs
        lea  esi,[esi-4]
        cmp  edi,dword [esi]
        jne  failp
ppos2:  lea  esi,[esi-4]
        cmp  dword [esi],offset nduna
        jne  failp
        mov  ebx,dword (4*parm1)[edi]
        cmp  ebx,dword pmssl
        ja   exfal
        mov  dword (4*num02)[esi],ebx
        jmp  succp
        .balign 2
        .byte bl_p1
p_psd:
        call evali
        .err_-50-dffnc
        .err_-51-dffnc
        .failp-dffnc
        .ppos1-dffnc
ppos1:  cmp  ebx,dword (4*parm1)[edi]
        je   succp
        or   ebx,ebx
        jnz  failp
        cmp  dword dword ptr evlif,0
        jnz  failp
        mov  esi,dword pmhbs
        mov  ecx,dword evlio
        lea  esi,[esi-4]
        cmp  ecx,dword [esi]
        jne  failp
        jmp  ppos2
        .balign 2
        .byte bl_p0
p_paa:
        push ebx
        push offset ndpab
        jmp  succp
        .balign 2
        nop
p_pab:
        jmp  failp
        .balign 2
        .byte bl_p2
p_pac:
        push ebx
        push edi
        push ebx
        push offset ndpad
        mov  dword pmdfl,esp
        jmp  succp
        .balign 2
        nop
p_pad:
        jmp  flpop
        .balign 2
        .byte bl_p0
p_rem:
        mov  ebx,dword pmssl
        jmp  succp
        .balign 2
        .byte bl_p1
p_rpd:
        call evali
        .err_-52-dffnc
        .err_-53-dffnc
        .failp-dffnc
        .prps1-dffnc
prps1:  mov  edx,dword pmssl
        sub  edx,ebx
        cmp  edx,dword (4*parm1)[edi]
        je   succp
        or   ebx,ebx
        jnz  failp
        cmp  dword dword ptr evlif,0
        jnz  failp
        mov  esi,dword pmhbs
        mov  ecx,dword evlio
        lea  esi,[esi-4]
        cmp  ecx,dword [esi]
        jne  failp
        jmp  prps2
        .balign 2
        .byte bl_p1
p_rps:
        mov  edx,dword pmssl
        sub  edx,ebx
        cmp  edx,dword (4*parm1)[edi]
        je   succp
        or   ebx,ebx
        jnz  failp
        mov  esi,dword pmhbs
        lea  esi,[esi-4]
        cmp  edi,dword [esi]
        jne  failp
prps2:  lea  esi,[esi-4]
        cmp  dword [esi],offset nduna
        jne  failp
        mov  ebx,dword pmssl
        cmp  ebx,dword (4*parm1)[edi]
        jb   failp
        sub  ebx,dword (4*parm1)[edi]
        mov  dword (4*num02)[esi],ebx
        jmp  succp
        .balign 2
        .byte bl_p1
p_rtb:
prtb1:  mov  edx,ebx
        mov  ebx,dword pmssl
        cmp  ebx,dword (4*parm1)[edi]
        jb   failp
        sub  ebx,dword (4*parm1)[edi]
        cmp  ebx,edx
        jae  succp
        jmp  failp
        .balign 2
        .byte bl_p1
p_rtd:
        call evali
        .err_-54-dffnc
        .err_-55-dffnc
        .failp-dffnc
        .prtb1-dffnc
        .balign 2
        .byte bl_p1
p_spd:
        call evals
        .err_-56-dffnc
        .failp-dffnc
        .pspn1-dffnc
        .balign 2
        .byte bl_p2
p_spn:
pspn1:  mov  edx,dword pmssl
        sub  edx,ebx
#        or   edx,edx         (optimized)
        jz   failp
        mov  esi,dword r_pms
        lea  esi,[cfp_f+esi+ebx]
        mov  dword psavc,ebx
        mov  dword psave,edi
pspn2:  movzx ecx,byte [esi]
        inc  esi
        sal  ecx,2
        mov  edi,dword (4*parm1)[edi]
        add  edi,ecx
        mov  ecx,dword (4*ctchs)[edi]
        mov  edi,dword psave
        and  ecx,dword (4*parm2)[edi]
#        or   ecx,ecx         (optimized)
        jz   pspn3
        inc  ebx
        dec  edx
        jnz  pspn2
pspn3:  cmp  ebx,dword psavc
        jne  succp
        jmp  failp
        .balign 2
        .byte bl_p1
p_sps:
        mov  edx,dword pmssl
        sub  edx,ebx
#        or   edx,edx         (optimized)
        jz   failp
        mov  esi,dword r_pms
        lea  esi,[cfp_f+esi+ebx]
        mov  dword psavc,ebx
psps1:  movzx ecx,byte [esi]
        inc  esi
        cmp  ecx,dword (4*parm1)[edi]
        jne  psps2
        inc  ebx
        dec  edx
        jnz  psps1
psps2:  cmp  ebx,dword psavc
        jne  succp
        jmp  failp
        .balign 2
        .byte bl_p1
p_str:
        mov  esi,dword (4*parm1)[edi]
pstr1:  mov  dword psave,edi
        mov  edi,dword r_pms
        lea  edi,[cfp_f+edi+ebx]
        add  ebx,dword (4*sclen)[esi]
        cmp  ebx,dword pmssl
        ja   failp
        mov  dword psavc,ebx
        mov  ecx,dword (4*sclen)[esi]
        add  esi,cfp_f
        repe cmpsb
        mov  esi,0
        mov  edi,esi
        jnz  failp
        mov  edi,dword psave
        mov  ebx,dword psavc
        jmp  succp
        .balign 2
        .byte bl_p0
p_suc:
        push ebx
        push edi
        jmp  succp
        .balign 2
        .byte bl_p1
p_tab:
ptab1:  cmp  ebx,dword (4*parm1)[edi]
        ja   failp
        mov  ebx,dword (4*parm1)[edi]
        cmp  ebx,dword pmssl
        jbe  succp
        jmp  failp
        .balign 2
        .byte bl_p1
p_tbd:
        call evali
        .err_-57-dffnc
        .err_-58-dffnc
        .failp-dffnc
        .ptab1-dffnc
        .balign 2
        nop
p_una:
        mov  edi,ebx
        mov  ebx,dword [esp]
        cmp  ebx,dword pmssl
        je   exfal
        inc  ebx
        mov  dword [esp],ebx
        push edi
        push offset nduna
        jmp  dword [edi]
        .balign 2
        .byte bl__i
p_yyy:
        .sbttl "s p i t b o l -- snobol4 built-in label routines"
        .balign 2
        nop
l_abo:
labo1:  mov  ecx,dword kvert
        or   ecx,ecx
        jz   labo3
        call sysax
        mov  edx,dword kvstn
        call filnm
        mov  edi,dword r_cod
        mov  edx,dword (4*cdsln)[edi]
        xor  ebx,ebx
        mov  edi,dword stage
        call sysea
        .stpr4-dffnc
        call prtpg
        or   edi,edi
        jz   labo2
        call prtst
labo2:  call ermsg
        xor  edi,edi
        jmp  stopr
labo3:  call err_0
        .byte 36
        .balign 2
        nop
l_cnt:
lcnt1:  mov  edi,dword r_cnt
        or   edi,edi
        jz   lcnt3
        xor  eax,eax
        mov  dword r_cnt,eax
        mov  dword r_cod,edi
        cmp  dword [edi],offset b_cdc
        jne  lcnt2
        mov  ecx,dword stxoc
        cmp  ecx,dword stxof
        jae  lcnt4
lcnt2:  add  edi,dword stxof
        mov  ebp,edi
        mov  esp,dword flptr
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
lcnt3:  inc  dword errft
        call err_0
        .byte 37
lcnt4:  inc  dword errft
        call err_1
        .byte 76
        .balign 2
        nop
l_end:
lend0:  mov  edi,offset endms
        jmp  stopr
        .balign 2
        nop
l_frt:
        mov  ecx,offset scfrt
        jmp  retrn
        .balign 2
        nop
l_nrt:
        mov  ecx,offset scnrt
        jmp  retrn
        .balign 2
        nop
l_rtn:
        mov  ecx,offset scrtn
        jmp  retrn
        .balign 2
        nop
l_scn:
        mov  edi,dword r_cnt
        or   edi,edi
        jz   lscn2
        xor  eax,eax
        mov  dword r_cnt,eax
        cmp  dword kvert,nm320
        jne  lscn1
        cmp  dword kvert,nm321
        je   lscn2
        mov  dword r_cod,edi
        add  edi,dword stxoc
        mov  ebp,edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
lscn1:  inc  dword errft
        call err_1
        .byte 75
lscn2:  inc  dword errft
        call err_1
        .byte 65
        .balign 2
        nop
l_und:
        call err_0
        .byte 38
        .sbttl "s p i t b o l -- predefined snobol4 functions"
        .balign 2
        nop
s_any:
        mov  ebx,offset p_ans
        mov  esi,offset p_any
        mov  edx,offset p_ayd
        call patst
        .err_-59-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_app:
        or   ecx,ecx
        jz   sapp3
        dec  ecx
        mov  ebx,ecx
        sal  ebx,2
        mov  esi,esp
        add  esi,ebx
        mov  edi,dword [esi]
        or   ecx,ecx
        jz   sapp2
        mov  ebx,ecx
sapp1:  sub  esi,4
        mov  eax,dword [esi]
        mov  dword (4*num01)[esi],eax
        dec  ebx
        jnz  sapp1
sapp2:  add  esp,4
        call gtnvr
        .sapp3-dffnc
        mov  esi,dword (4*vrfnc)[edi]
        jmp  cfunc
sapp3:  call err_0
        .byte 60
        .balign 2
        nop
s_abn:
        xor  edi,edi
        mov  ebx,offset p_alt
        call pbild
        mov  esi,edi
        mov  ebx,offset p_abc
        xor  edi,edi
        call pbild
        mov  dword (4*pthen)[edi],esi
        mov  ecx,esi
        mov  esi,edi
        mov  edi,dword [esp]
        mov  dword [esp],ecx
        call gtpat
        .err_-61-dffnc
        call pconc
        mov  esi,edi
        mov  ebx,offset p_aba
        xor  edi,edi
        call pbild
        mov  dword (4*pthen)[edi],esi
        mov  esi,dword [esp]
        mov  dword (4*parm1)[esi],edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_arg:
        call gtsmi
        .err_-62-dffnc
        .exfal-dffnc
        mov  ecx,edi
        pop  edi
        call gtnvr
        .sarg1-dffnc
        mov  edi,dword (4*vrfnc)[edi]
        cmp  dword [edi],offset b_pfc
        jne  sarg1
        or   ecx,ecx
        jz   exfal
        cmp  ecx,dword (4*fargs)[edi]
        ja   exfal
        sal  ecx,2
        add  edi,ecx
        mov  edi,dword (4*pfagb)[edi]
        jmp  exvnm
sarg1:  call err_0
        .byte 63
        .balign 2
        nop
s_arr:
        pop  esi
        pop  edi
        call gtint
        .sar02-dffnc
        mov  edx,dword (4*icval)[edi]
        or   edx,edx
        jle  sar10
        or   edx,edx
        js   sar11
        mov  ecx,edx
        call vmake
        .sar11-dffnc
        jmp  exsid
sar02:  push edi
        call xscni
        .err_-64-dffnc
        .exnul-dffnc
        push dword r_xsc
        push esi
        xor  eax,eax
        mov  dword arcdm,eax
        xor  eax,eax
        mov  dword arptr,eax
        mov  edx,dword intv1
        mov  dword arnel,edx
sar03:  mov  edx,dword intv1
        mov  dword arsvl,edx
        mov  edx,ch_cl
        mov  esi,ch_cm
        xor  ecx,ecx
        call xscan
        cmp  ecx,num01
        jne  sar04
        call gtint
        .err_-65-dffnc
        mov  edx,dword (4*icval)[edi]
        mov  dword arsvl,edx
        mov  edx,ch_cm
        mov  esi,edx
        xor  ecx,ecx
        call xscan
sar04:  call gtint
        .err_-66-dffnc
        mov  edx,dword (4*icval)[edi]
        sub  edx,dword arsvl
        jo   sar10
        or   edx,edx
        jl   sar10
        add  edx,dword intv1
        jo   sar10
        mov  esi,dword arptr
        or   esi,esi
        jz   sar05
        add  esi,dword [esp]
        mov  dword (4*cfp_i)[esi],edx
        mov  edx,dword arsvl
        mov  dword [esi],edx
        add  dword arptr,4*ardms
        jmp  sar06
sar05:  inc  dword arcdm
        imul edx,dword arnel
        jo   sar11
        mov  dword arnel,edx
sar06:  or   ecx,ecx
        jnz  sar03
        cmp  dword dword ptr arptr,0
        jnz  sar09
        mov  edx,dword arnel
        or   edx,edx
        js   sar11
        mov  ebx,edx
        sal  ebx,2
        mov  ecx,4*arsi_
        mov  edx,dword arcdm
sar07:  add  ecx,4*ardms
        dec  edx
        jnz  sar07
        mov  esi,ecx
        add  ecx,ebx
        add  ecx,4
        cmp  ecx,dword mxlen
        ja   sar11
        call alloc
        mov  ebx,dword [esp]
        mov  dword [esp],edi
        mov  edx,ecx
        shr  ecx,2
sar08:  mov  eax,ebx
        stosd
        loop sar08
        pop  edi
        mov  ebx,dword [esp]
        mov  dword [edi],offset b_art
        mov  dword (4*arlen)[edi],edx
        xor  eax,eax
        mov  dword (4*idval)[edi],eax
        mov  dword (4*arofs)[edi],esi
        mov  eax,dword arcdm
        mov  dword (4*arndm)[edi],eax
        mov  edx,edi
        add  edi,esi
        mov  dword [edi],ebx
        mov  dword arptr,4*arlbd
        mov  dword r_xsc,ebx
        mov  dword [esp],edx
        xor  eax,eax
        mov  dword xsofs,eax
        jmp  sar03
sar09:  pop  edi
        jmp  exsid
sar10:  call err_0
        .byte 67
sar11:  call err_0
        .byte 68
        .balign 2
        nop
s_atn:
        pop  edi
        call gtrea
        .err_-301-dffnc
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        call atn_
        jmp  exrea
        .balign 2
        nop
s_bsp:
        call iofcb
        .err_-316-dffnc
        .err_-316-dffnc
        .err_-317-dffnc
        call sysbs
        .err_-317-dffnc
        .err_-318-dffnc
        .err_-319-dffnc
        jmp  exnul
        .balign 2
        nop
s_brk:
        mov  ebx,offset p_bks
        mov  esi,offset p_brk
        mov  edx,offset p_bkd
        call patst
        .err_-69-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_bkx:
        mov  ebx,offset p_bks
        mov  esi,offset p_brk
        mov  edx,offset p_bxd
        call patst
        .err_-70-dffnc
        push edi
        mov  ebx,offset p_bkx
        call pbild
        mov  eax,dword [esp]
        mov  dword (4*pthen)[edi],eax
        mov  ebx,offset p_alt
        call pbild
        mov  ecx,edi
        mov  edi,dword [esp]
        mov  dword (4*pthen)[edi],ecx
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_chr:
        call gtsmi
        .err_-281-dffnc
        .schr1-dffnc
        cmp  edx,cfp_a
        jae  schr1
        mov  ecx,num01
        mov  ebx,edx
        call alocs
        mov  esi,edi
        add  esi,cfp_f
        mov  [esi],bl
        xor  esi,esi
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
schr1:  call err_1
        .byte 26
        .balign 2
        nop
s_chp:
        pop  edi
        call gtrea
        .err_-302-dffnc
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        call chp_
        jmp  exrea
        .balign 2
        nop
s_clr:
        call xscni
        .err_-71-dffnc
        .sclr2-dffnc
sclr1:  mov  edx,ch_cm
        mov  esi,edx
        mov  ecx,esp
        call xscan
        call gtnvr
        .err_-72-dffnc
        xor  eax,eax
        mov  dword (4*vrget)[edi],eax
        or   ecx,ecx
        jnz  sclr1
sclr2:  mov  ebx,dword hshtb
sclr3:  cmp  ebx,dword hshte
        je   exnul
        mov  edi,ebx
        add  ebx,4
        sub  edi,4*vrnxt
sclr4:  mov  edi,dword (4*vrnxt)[edi]
        or   edi,edi
        jz   sclr3
        cmp  dword dword ptr (4*vrget)[edi],0
        jnz  sclr5
        call setvr
        jmp  sclr4
sclr5:  cmp  dword (4*vrsto)[edi],offset b_vre
        je   sclr4
        mov  esi,edi
sclr6:  mov  ecx,esi
        mov  esi,dword (4*vrval)[esi]
        cmp  dword [esi],offset b_trt
        je   sclr6
        mov  esi,ecx
        mov  dword (4*vrval)[esi],offset nulls
        jmp  sclr4
        .balign 2
        nop
s_cod:
        pop  edi
        call gtcod
        .exfal-dffnc
        push edi
        xor  eax,eax
        mov  dword r_ccb,eax
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_col:
        pop  edi
        call gtint
        .err_-73-dffnc
        mov  edx,dword (4*icval)[edi]
        mov  dword clsvi,edx
        xor  ebx,ebx
        xor  eax,eax
        mov  dword r_ccb,eax
        xor  eax,eax
        mov  dword dnams,eax
        call gbcol
        mov  dword dnams,edi
        mov  ecx,dword dname
        sub  ecx,dword dnamp
        shr  ecx,2
        mov  edx,ecx
        sub  edx,dword clsvi
        jo   exfal
        or   edx,edx
        jl   exfal
        add  edx,dword clsvi
        jmp  exint
        .balign 2
        nop
s_cnv:
        call gtstg
        .scv29-dffnc
        or   ecx,ecx
        jz   scv29
        call flstg
        mov  esi,dword [esp]
        cmp  dword [esi],offset b_pdt
        jne  scv01
        mov  esi,dword (4*pddfp)[esi]
        mov  esi,dword (4*dfnam)[esi]
        call ident
        .exits-dffnc
        jmp  exfal
scv01:  push edi
        mov  esi,offset svctb
        xor  ebx,ebx
        mov  edx,ecx
scv02:  lodsd
        mov  edi,eax
        or   edi,edi
        jz   exfal
        cmp  edx,dword (4*sclen)[edi]
        jne  scv05
        mov  dword cnvtp,esi
        add  edi,cfp_f
        mov  esi,dword [esp]
        add  esi,cfp_f
        mov  ecx,edx
        repe cmpsb
        mov  esi,0
        mov  edi,esi
        jnz  scv04
scv03:  mov  esi,ebx
        add  esp,4
        pop  edi
        jmp  dword l0003[esi*4]
        dseg_
l0003:
        .long scv06
        .long scv07
        .long scv09
        .long scv10
        .long scv11
        .long scv19
        .long scv25
        .long scv26
        .long scv27
        .long scv08
        dsegend_
        cseg_
scv04:  mov  esi,dword cnvtp
scv05:  inc  ebx
        jmp  scv02
scv06:  push edi
        call gtstg
        .exfal-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
scv07:  call gtint
        .exfal-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
scv08:  call gtrea
        .exfal-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
scv09:  cmp  dword [edi],offset b_nml
        je   exixr
        call gtnvr
        .exfal-dffnc
        jmp  exvnm
scv10:  call gtpat
        .exfal-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
scv11:  push edi
        xor  ecx,ecx
        call gtarr
        .exfal-dffnc
        .exfal-dffnc
        pop  esi
        cmp  dword [esi],offset b_tbt
        jne  exsid
        push edi
        push offset nulls
        xor  ecx,ecx
        call sorta
        .exfal-dffnc
        mov  ebx,edi
        mov  edx,dword (4*ardim)[edi]
        mov  ecx,edx
        add  edi,4*arvl2
scv12:  mov  esi,dword [edi]
        mov  eax,dword (4*tesub)[esi]
        stosd
        mov  eax,dword (4*teval)[esi]
        stosd
        loop scv12
        mov  edi,ebx
        jmp  exsid
scv19:  mov  ecx,dword [edi]
        push edi
        cmp  ecx,offset b_tbt
        je   exits
        cmp  ecx,offset b_art
        jne  exfal
        cmp  dword (4*arndm)[edi],num02
        jne  exfal
        mov  edx,dword (4*ardm2)[edi]
        sub  edx,dword intv2
#        or   edx,edx         (optimized)
        jne  exfal
        mov  edx,dword (4*ardim)[edi]
        mov  ecx,edx
        mov  ebx,ecx
        add  ecx,tbsi_
        sal  ecx,2
        call alloc
        mov  edx,edi
        push edi
        mov  eax,offset b_tbt
        stosd
        xor  eax,eax
        stosd
        mov  eax,ecx
        stosd
        mov  eax,offset nulls
        stosd
scv20:  mov  eax,edx
        stosd
        dec  ebx
        jnz  scv20
        mov  ebx,4*arvl2
scv21:  mov  esi,dword (4*num01)[esp]
        cmp  ebx,dword (4*arlen)[esi]
        je   scv24
        add  esi,ebx
        add  ebx,4*num02
        mov  edi,dword [esi]
        sub  esi,4
scv22:  mov  esi,dword (4*trval)[esi]
        cmp  dword [esi],offset b_trt
        je   scv22
scv23:  push esi
        mov  esi,dword (4*num01)[esp]
        call tfind
        .exfal-dffnc
        pop  dword (4*teval)[esi]
        jmp  scv21
scv24:  pop  edi
        add  esp,4
        jmp  exsid
scv25:  xor  ebx,ebx
        call gtexp
        .exfal-dffnc
        xor  eax,eax
        mov  dword r_ccb,eax
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
scv26:  call gtcod
        .exfal-dffnc
        xor  eax,eax
        mov  dword r_ccb,eax
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
scv27:  call gtnum
        .exfal-dffnc
scv31:  push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
scv29:  call err_0
        .byte 74
        .balign 2
        nop
s_cop:
        call copyb
        .exits-dffnc
        jmp  exsid
        .balign 2
        nop
s_cos:
        pop  edi
        call gtrea
        .err_-303-dffnc
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        call cos_
        call ovr_
        jno  exrea
        call err_1
        .byte 66
        .balign 2
        nop
s_dat:
        call xscni
        .err_-75-dffnc
        .err_-76-dffnc
        mov  edx,ch_pp
        mov  esi,edx
        mov  ecx,esp
        call xscan
        or   ecx,ecx
        jnz  sdat1
        call err_0
        .byte 77
sdat1:  mov  ecx,dword (4*sclen)[edi]
        or   ecx,ecx
        jz   sdt1a
        call flstg
sdt1a:  mov  esi,edi
        mov  ecx,dword (4*sclen)[edi]
        add  ecx,3+4*scsi_
        and  ecx,-4
        call alost
        push edi
        shr  ecx,2
        rep  movsd
        mov  edi,dword [esp]
        xor  esi,esi
        call gtnvr
        .err_-78-dffnc
        mov  dword datdv,edi
        mov  dword datxs,esp
        xor  ebx,ebx
sdat2:  mov  edx,ch_rp
        mov  esi,ch_cm
        mov  ecx,esp
        call xscan
        or   ecx,ecx
        jnz  sdat3
        call err_0
        .byte 79
sdat3:  call gtnvr
        .err_-80-dffnc
        push edi
        inc  ebx
        cmp  ecx,num02
        je   sdat2
        mov  ecx,dfsi_
        add  ecx,ebx
        sal  ecx,2
        mov  edx,ebx
        call alost
        mov  ebx,edx
        mov  esi,dword datxs
        mov  edx,dword [esi]
        mov  dword [esi],edi
        mov  eax,offset b_dfc
        stosd
        mov  eax,ebx
        stosd
        mov  eax,ecx
        stosd
        sub  ecx,4*pddfs
        mov  eax,ecx
        stosd
        mov  eax,edx
        stosd
        mov  edx,ebx
sdat4:  lea  esi,[esi-4]
        mov  eax,dword [esi]
        stosd
        dec  edx
        jnz  sdat4
        mov  edx,ecx
        mov  edi,dword datdv
        mov  esi,dword datxs
        mov  esi,dword [esi]
        call dffnc
sdat5:  mov  ecx,4*ffsi_
        call alloc
        mov  dword [edi],offset b_ffc
        mov  dword (4*fargs)[edi],num01
        mov  esi,dword datxs
        mov  eax,dword [esi]
        mov  dword (4*ffdfp)[edi],eax
        sub  edx,4
        mov  dword (4*ffofs)[edi],edx
        xor  eax,eax
        mov  dword (4*ffnxt)[edi],eax
        mov  esi,edi
        mov  edi,dword [esp]
        mov  edi,dword (4*vrfnc)[edi]
        cmp  dword [edi],offset b_ffc
        jne  sdat6
        mov  dword (4*ffnxt)[esi],edi
sdat6:  pop  edi
        call dffnc
        cmp  esp,dword datxs
        jne  sdat5
        add  esp,4
        jmp  exnul
        .balign 2
        nop
s_dtp:
        pop  edi
        call dtype
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_dte:
        pop  edi
        call gtint
        .err_-330-dffnc
        call sysdt
        mov  ecx,dword (4*num01)[esi]
        or   ecx,ecx
        jz   exnul
        xor  ebx,ebx
        call sbstr
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_def:
        pop  edi
        xor  eax,eax
        mov  dword deflb,eax
        cmp  edi,offset nulls
        je   sdf01
        call gtnvr
        .sdf12-dffnc
        mov  dword deflb,edi
sdf01:  call xscni
        .err_-81-dffnc
        .err_-82-dffnc
        mov  edx,ch_pp
        mov  esi,edx
        mov  ecx,esp
        call xscan
        or   ecx,ecx
        jnz  sdf02
        call err_0
        .byte 83
sdf02:  call gtnvr
        .err_-84-dffnc
        mov  dword defvr,edi
        xor  ebx,ebx
        mov  dword defxs,esp
        cmp  dword dword ptr deflb,0
        jnz  sdf03
        mov  dword deflb,edi
sdf03:  mov  edx,ch_rp
        mov  esi,ch_cm
        mov  ecx,esp
        call xscan
        or   ecx,ecx
        jnz  sdf04
        call err_0
        .byte 85
sdf04:  cmp  edi,offset nulls
        jne  sdf05
        or   ebx,ebx
        jz   sdf06
sdf05:  call gtnvr
        .sdf03-dffnc
        push edi
        inc  ebx
        cmp  ecx,num02
        je   sdf03
sdf06:  mov  dword defna,ebx
        xor  ebx,ebx
sdf07:  mov  edx,ch_cm
        mov  esi,edx
        mov  ecx,esp
        call xscan
        cmp  edi,offset nulls
        jne  sdf08
        or   ecx,ecx
        jz   sdf09
sdf08:  call gtnvr
        .sdf07-dffnc
        inc  ebx
        push edi
        or   ecx,ecx
        jnz  sdf07
sdf09:  mov  ecx,ebx
        add  ecx,dword defna
        mov  edx,ecx
        add  ecx,pfsi_
        sal  ecx,2
        call alloc
        mov  esi,edi
        mov  eax,offset b_pfc
        stosd
        mov  eax,dword defna
        stosd
        mov  eax,ecx
        stosd
        mov  eax,dword defvr
        stosd
        mov  eax,ebx
        stosd
        xor  eax,eax
        stosd
        xor  eax,eax
        stosd
        xor  eax,eax
        stosd
        or   edx,edx
        jz   sdf11
        mov  ecx,esi
        mov  esi,dword defxs
sdf10:  lea  esi,[esi-4]
        mov  eax,dword [esi]
        stosd
        dec  edx
        jnz  sdf10
        mov  esi,ecx
sdf11:  mov  esp,dword defxs
        mov  eax,dword deflb
        mov  dword (4*pfcod)[esi],eax
        mov  edi,dword defvr
        call dffnc
        jmp  exnul
sdf12:  call err_0
        .byte 86
        .balign 2
        nop
s_det:
        pop  edi
        call gtvar
        .err_-87-dffnc
        call dtach
        jmp  exnul
        .balign 2
        nop
s_dif:
        pop  edi
        pop  esi
        call ident
        .exfal-dffnc
        jmp  exnul
        .balign 2
        nop
s_dmp:
        call gtsmi
        .err_-88-dffnc
        .err_-89-dffnc
        call dumpr
        jmp  exnul
        .balign 2
        nop
s_dup:
        call gtsmi
        .err_-90-dffnc
        .sdup7-dffnc
        mov  ebx,edi
        call gtstg
        .sdup4-dffnc
        mov  edx,ecx
        mov  dword dupsi,edx
        mov  edx,ebx
        imul edx,dword dupsi
        jo   sdup3
        or   edx,edx
        je   exnul
        or   edx,edx
        js   sdup3
        mov  ecx,edx
sdup1:  mov  esi,edi
        call alocs
        push edi
        mov  edx,esi
        add  edi,cfp_f
sdup2:  mov  esi,edx
        mov  ecx,dword (4*sclen)[esi]
        add  esi,cfp_f
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
        dec  ebx
        jnz  sdup2
        xor  esi,esi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
sdup3:  mov  ecx,dword dname
        jmp  sdup1
sdup4:  call gtpat
        .err_-91-dffnc
        push edi
        mov  edi,offset ndnth
        or   ebx,ebx
        jz   sdup6
        push ebx
sdup5:  mov  esi,edi
        mov  edi,dword (4*num01)[esp]
        call pconc
        dec  dword [esp]
        cmp  dword dword ptr [esp],0
        jnz  sdup5
        add  esp,4
sdup6:  mov  dword [esp],edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
sdup7:  add  esp,4
        jmp  exfal
        .balign 2
        nop
s_ejc:
        call iofcb
        .err_-92-dffnc
        .sejc1-dffnc
        .err_-93-dffnc
        call sysef
        .err_-93-dffnc
        .err_-94-dffnc
        .err_-95-dffnc
        jmp  exnul
sejc1:  call sysep
        jmp  exnul
        .balign 2
        nop
s_enf:
        call iofcb
        .err_-96-dffnc
        .err_-97-dffnc
        .err_-98-dffnc
        call sysen
        .err_-98-dffnc
        .err_-99-dffnc
        .err_-100-dffnc
        mov  ebx,esi
        mov  edi,esi
senf1:  mov  esi,edi
        mov  edi,dword (4*trval)[edi]
        cmp  dword [edi],offset b_trt
        jne  exnul
        cmp  dword (4*trtyp)[edi],trtfc
        jne  senf1
        mov  eax,dword (4*trval)[edi]
        mov  dword (4*trval)[esi],eax
        mov  eax,dword (4*trtrf)[edi]
        mov  dword enfch,eax
        mov  edx,dword (4*trfpt)[edi]
        mov  edi,ebx
        call setvr
        mov  esi,offset r_fcb
        sub  esi,4*num02
senf2:  mov  edi,esi
        mov  esi,dword (4*num02)[esi]
        or   esi,esi
        jz   senf4
        cmp  dword (4*num03)[esi],edx
        je   senf3
        jmp  senf2
senf3:  mov  eax,dword (4*num02)[esi]
        mov  dword (4*num02)[edi],eax
senf4:  mov  esi,dword enfch
        or   esi,esi
        jz   exnul
        mov  eax,dword (4*trtrf)[esi]
        mov  dword enfch,eax
        mov  ecx,dword (4*ionmo)[esi]
        mov  esi,dword (4*ionmb)[esi]
        call dtach
        jmp  senf4
        .balign 2
        nop
s_eqf:
        call acomp
        .err_-101-dffnc
        .err_-102-dffnc
        .exfal-dffnc
        .exnul-dffnc
        .exfal-dffnc
        .balign 2
        nop
s_evl:
        pop  edi
        mov  edx,[ebp]
        add  ebp,4
        cmp  edx,offset ofne_
        jne  sevl1
        mov  esi,ebp
        mov  ecx,dword [esi]
        cmp  ecx,offset ornm_
        jne  sevl2
        cmp  dword dword ptr (4*num01)[esp],0
        jnz  sevl2
sevl1:  xor  ebx,ebx
        push edx
        call gtexp
        .err_-103-dffnc
        xor  eax,eax
        mov  dword r_ccb,eax
        xor  ebx,ebx
        call evalx
        .exfal-dffnc
        mov  esi,edi
        mov  edi,dword [esp]
        mov  dword [esp],esi
        jmp  dword [edi]
sevl2:  mov  ebx,num01
        call gtexp
        .err_-103-dffnc
        xor  eax,eax
        mov  dword r_ccb,eax
        mov  ebx,num01
        call evalx
        .exfal-dffnc
        jmp  exnam
        .balign 2
        nop
s_ext:
        xor  ebx,ebx
        xor  eax,eax
        mov  dword r_ccb,eax
        xor  eax,eax
        mov  dword dnams,eax
        call gbcol
        mov  dword dnams,edi
        call gtstg
        .err_-288-dffnc
        mov  esi,edi
        call gtstg
        .err_-104-dffnc
        push esi
        mov  esi,edi
        call gtint
        .sext1-dffnc
        xor  esi,esi
        mov  edx,dword (4*icval)[edi]
sext1:  mov  ebx,dword r_fcb
        mov  edi,offset headv
        pop  ecx
        call sysxi
        .err_-105-dffnc
        .err_-106-dffnc
        or   edx,edx
        je   exnul
        or   edx,edx
        jg   sext2
        neg  edx
sext2:
        add  ecx,edx
        cmp  ecx,num05
        je   sext5
        xor  eax,eax
        mov  dword gbcnt,eax
        cmp  edx,num03
        jae  sext3
        push edx
        xor  edx,edx
        call prpar
        pop  edx
sext3:  mov  dword headp,esp
        cmp  edx,num01
        jne  sext4
        xor  eax,eax
        mov  dword headp,eax
sext4:  call systm
        mov  dword timsx,edx
        mov  edx,dword kvstc
        mov  dword kvstl,edx
        call stgcc
        jmp  exnul
sext5:  mov  edi,offset inton
        jmp  exixr
        .balign 2
        nop
s_exp:
        pop  edi
        call gtrea
        .err_-304-dffnc
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        call etx_
        call ovr_
        jno  exrea
        call err_1
        .byte 49
        .balign 2
        nop
s_fld:
        call gtsmi
        .err_-107-dffnc
        .exfal-dffnc
        mov  ebx,edi
        pop  edi
        call gtnvr
        .sfld1-dffnc
        mov  edi,dword (4*vrfnc)[edi]
        cmp  dword [edi],offset b_dfc
        jne  sfld1
        or   ebx,ebx
        jz   exfal
        cmp  ebx,dword (4*fargs)[edi]
        ja   exfal
        sal  ebx,2
        add  edi,ebx
        mov  edi,dword (4*dfflb)[edi]
        jmp  exvnm
sfld1:  call err_0
        .byte 108
        .balign 2
        nop
s_fnc:
        mov  ebx,offset p_fnc
        xor  edi,edi
        call pbild
        mov  esi,edi
        pop  edi
        call gtpat
        .err_-259-dffnc
        call pconc
        mov  esi,edi
        mov  ebx,offset p_fna
        xor  edi,edi
        call pbild
        mov  dword (4*pthen)[edi],esi
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_gef:
        call acomp
        .err_-109-dffnc
        .err_-110-dffnc
        .exfal-dffnc
        .exnul-dffnc
        .exnul-dffnc
        .balign 2
        nop
s_gtf:
        call acomp
        .err_-111-dffnc
        .err_-112-dffnc
        .exfal-dffnc
        .exfal-dffnc
        .exnul-dffnc
        .balign 2
        nop
s_hst:
        pop  edx
        pop  ebx
        pop  edi
        pop  esi
        pop  ecx
        call syshs
        .err_-254-dffnc
        .err_-255-dffnc
        .shst1-dffnc
        .exnul-dffnc
        .exixr-dffnc
        .exfal-dffnc
        .shst3-dffnc
        .shst4-dffnc
shst1:  or   esi,esi
        jz   exnul
        mov  ecx,dword (4*sclen)[esi]
        xor  ebx,ebx
shst2:  call sbstr
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
shst3:  xor  ebx,ebx
        sub  ebx,cfp_f
        jmp  shst2
shst4:  push edi
        call copyb
        .exits-dffnc
        jmp  exsid
        .balign 2
        nop
s_idn:
        pop  edi
        pop  esi
        call ident
        .exnul-dffnc
        jmp  exfal
        .balign 2
        nop
s_inp:
        xor  ebx,ebx
        call ioput
        .err_-113-dffnc
        .err_-114-dffnc
        .err_-115-dffnc
        .err_-116-dffnc
        .exfal-dffnc
        .err_-117-dffnc
        .err_-289-dffnc
        jmp  exnul
        .balign 2
        nop
s_int:
        pop  edi
        call gtnum
        .exfal-dffnc
        cmp  ecx,offset b_icl
        je   exnul
        jmp  exfal
        .balign 2
        nop
s_itm:
        or   ecx,ecx
        jnz  sitm1
        push offset nulls
        mov  ecx,num01
sitm1:  mov  edi,ebp
        mov  esi,dword [edi]
        dec  ecx
        mov  edi,ecx
        cmp  esi,offset ofne_
        je   sitm2
        xor  ebx,ebx
        jmp  arref
sitm2:  mov  ebx,esp
        mov  ecx,[ebp]
        add  ebp,4
        jmp  arref
        .balign 2
        nop
s_lef:
        call acomp
        .err_-118-dffnc
        .err_-119-dffnc
        .exnul-dffnc
        .exnul-dffnc
        .exfal-dffnc
        .balign 2
        nop
s_len:
        mov  ebx,offset p_len
        mov  ecx,offset p_lnd
        call patin
        .err_-120-dffnc
        .err_-121-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_leq:
        call lcomp
        .err_-122-dffnc
        .err_-123-dffnc
        .exfal-dffnc
        .exnul-dffnc
        .exfal-dffnc
        .balign 2
        nop
s_lge:
        call lcomp
        .err_-124-dffnc
        .err_-125-dffnc
        .exfal-dffnc
        .exnul-dffnc
        .exnul-dffnc
        .balign 2
        nop
s_lgt:
        call lcomp
        .err_-126-dffnc
        .err_-127-dffnc
        .exfal-dffnc
        .exfal-dffnc
        .exnul-dffnc
        .balign 2
        nop
s_lle:
        call lcomp
        .err_-128-dffnc
        .err_-129-dffnc
        .exnul-dffnc
        .exnul-dffnc
        .exfal-dffnc
        .balign 2
        nop
s_llt:
        call lcomp
        .err_-130-dffnc
        .err_-131-dffnc
        .exnul-dffnc
        .exfal-dffnc
        .exfal-dffnc
        .balign 2
        nop
s_lne:
        call lcomp
        .err_-132-dffnc
        .err_-133-dffnc
        .exnul-dffnc
        .exfal-dffnc
        .exnul-dffnc
        .balign 2
        nop
s_lnf:
        pop  edi
        call gtrea
        .err_-306-dffnc
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        call cpr_
        je   slnf1
        call cpr_
        jl   slnf2
        call lnf_
        call ovr_
        jno  exrea
slnf1:  call err_1
        .byte 51
slnf2:  call err_1
        .byte 59
        .balign 2
        nop
s_loc:
        call gtsmi
        .err_-134-dffnc
        .exfal-dffnc
        mov  ebx,edi
        pop  edi
        call gtnvr
        .sloc1-dffnc
        mov  edi,dword (4*vrfnc)[edi]
        cmp  dword [edi],offset b_pfc
        jne  sloc1
        or   ebx,ebx
        jz   exfal
        cmp  ebx,dword (4*pfnlo)[edi]
        ja   exfal
        add  ebx,dword (4*fargs)[edi]
        sal  ebx,2
        add  edi,ebx
        mov  edi,dword (4*pfagb)[edi]
        jmp  exvnm
sloc1:  call err_0
        .byte 135
        .balign 2
        nop
s_lod:
        call gtstg
        .err_-136-dffnc
        mov  esi,edi
        call xscni
        .err_-137-dffnc
        .err_-138-dffnc
        push esi
        mov  edx,ch_pp
        mov  esi,edx
        mov  ecx,esp
        call xscan
        push edi
        or   ecx,ecx
        jnz  slod1
        call err_0
        .byte 139
slod1:  call gtnvr
        .err_-140-dffnc
        mov  dword lodfn,edi
        xor  eax,eax
        mov  dword lodna,eax
slod2:  mov  edx,ch_rp
        mov  esi,ch_cm
        mov  ecx,esp
        call xscan
        inc  dword lodna
        or   ecx,ecx
        jnz  slod3
        call err_0
        .byte 141
slod3:  mov  ebx,ecx
        mov  ecx,dword (4*sclen)[edi]
        or   ecx,ecx
        jz   sld3a
        call flstg
sld3a:  mov  ecx,ebx
        push edi
        mov  ebx,num01
        mov  esi,offset scstr
        call ident
        .slod4-dffnc
        mov  edi,dword [esp]
        add  ebx,ebx
        mov  esi,offset scint
        call ident
        .slod4-dffnc
        mov  edi,dword [esp]
        inc  ebx
        mov  esi,offset screa
        call ident
        .slod4-dffnc
        mov  edi,dword [esp]
        inc  ebx
        mov  esi,offset scfil
        call ident
        .slod4-dffnc
        xor  ebx,ebx
slod4:  mov  dword [esp],ebx
        cmp  ecx,num02
        je   slod2
        or   ecx,ecx
        jz   slod5
        mov  edx,dword mxlen
        mov  esi,edx
        mov  ecx,esp
        call xscan
        xor  ecx,ecx
        jmp  slod3
slod5:  mov  ecx,dword lodna
        mov  edx,ecx
        sal  ecx,2
        add  ecx,4*efsi_
        call alloc
        mov  dword [edi],offset b_efc
        mov  dword (4*fargs)[edi],edx
        xor  eax,eax
        mov  dword (4*efuse)[edi],eax
        xor  eax,eax
        mov  dword (4*efcod)[edi],eax
        pop  dword (4*efrsl)[edi]
        mov  eax,dword lodfn
        mov  dword (4*efvar)[edi],eax
        mov  dword (4*eflen)[edi],ecx
        mov  ebx,edi
        add  edi,ecx
slod6:  lea  edi,[edi-4]
        pop  dword [edi]
        dec  edx
        jnz  slod6
        pop  edi
        mov  ecx,dword (4*sclen)[edi]
        call flstg
        mov  esi,dword [esp]
        mov  dword [esp],ebx
        call sysld
        .err_-142-dffnc
        .err_-143-dffnc
        .err_-328-dffnc
        pop  esi
        mov  dword (4*efcod)[esi],edi
        mov  edi,dword lodfn
        call dffnc
        jmp  exnul
        .balign 2
        nop
s_lpd:
        call gtstg
        .err_-144-dffnc
        add  edi,cfp_f
        movzx ebx,byte [edi]
        call gtsmi
        .err_-145-dffnc
        .slpd4-dffnc
slpd1:  call gtstg
        .err_-146-dffnc
        cmp  ecx,edx
        jae  exixr
        mov  esi,edi
        mov  ecx,edx
        call alocs
        push edi
        mov  ecx,dword (4*sclen)[esi]
        sub  edx,ecx
        add  edi,cfp_f
slpd2:  mov  al,bl
        stosb
        dec  edx
        jnz  slpd2
        or   ecx,ecx
        jz   slpd3
        add  esi,cfp_f
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
        xor  esi,esi
slpd3:  mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
slpd4:  xor  edx,edx
        jmp  slpd1
        .balign 2
        nop
s_ltf:
        call acomp
        .err_-147-dffnc
        .err_-148-dffnc
        .exnul-dffnc
        .exfal-dffnc
        .exfal-dffnc
        .balign 2
        nop
s_nef:
        call acomp
        .err_-149-dffnc
        .err_-150-dffnc
        .exnul-dffnc
        .exfal-dffnc
        .exnul-dffnc
        .balign 2
        nop
s_nay:
        mov  ebx,offset p_nas
        mov  esi,offset p_nay
        mov  edx,offset p_nad
        call patst
        .err_-151-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_ops:
        call gtsmi
        .err_-152-dffnc
        .err_-153-dffnc
        mov  ebx,edx
        pop  edi
        call gtnvr
        .err_-154-dffnc
        mov  esi,dword (4*vrfnc)[edi]
        or   ebx,ebx
        jnz  sops2
        pop  edi
        call gtnvr
        .err_-155-dffnc
sops1:  call dffnc
        jmp  exnul
sops2:  call gtstg
        .sops5-dffnc
        cmp  ecx,num01
        jne  sops5
        add  edi,cfp_f
        movzx edx,byte [edi]
        mov  ecx,offset r_uub
        mov  edi,offset opnsu
        add  ebx,opbun
        cmp  ebx,opuun
        je   sops3
        mov  ecx,offset r_uba
        mov  edi,offset opsnb
        mov  ebx,opbun
sops3:
sops4:  cmp  edx,dword [edi]
        je   sops6
        add  ecx,4
        add  edi,4
        dec  ebx
        jnz  sops4
sops5:  call err_0
        .byte 156
sops6:  mov  edi,ecx
        sub  edi,4*vrfnc
        jmp  sops1
        .balign 2
        nop
s_oup:
        mov  ebx,num03
        call ioput
        .err_-157-dffnc
        .err_-158-dffnc
        .err_-159-dffnc
        .err_-160-dffnc
        .exfal-dffnc
        .err_-161-dffnc
        .err_-290-dffnc
        jmp  exnul
        .balign 2
        nop
s_pos:
        mov  ebx,offset p_pos
        mov  ecx,offset p_psd
        call patin
        .err_-162-dffnc
        .err_-163-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_pro:
        pop  edi
        mov  ebx,dword (4*tblen)[edi]
        shr  ebx,2
        mov  ecx,dword [edi]
        cmp  ecx,offset b_art
        je   spro4
        cmp  ecx,offset b_tbt
        je   spro1
        cmp  ecx,offset b_vct
        je   spro3
        call err_0
        .byte 164
spro1:  sub  ebx,tbsi_
spro2:  mov  edx,ebx
        jmp  exint
spro3:  sub  ebx,vcsi_
        jmp  spro2
spro4:  add  edi,dword (4*arofs)[edi]
        mov  edi,dword [edi]
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_rmd:
        call arith
        .err_-166-dffnc
        .err_-165-dffnc
        .srm06-dffnc
        xor  ebx,ebx
        mov  edx,dword (4*icval)[edi]
        or   edx,edx
        jge  srm01
        mov  ebx,esp
srm01:  mov  eax,dword (4*icval)[esi]
        call rmi_
        jo   srm05
        or   ebx,ebx
        jz   srm03
        or   edx,edx
        jle  exint
srm02:  neg  edx
        jmp  exint
srm03:  or   edx,edx
        jl   srm02
        jmp  exint
srm04:  call err_0
        .byte 166
srm05:  call err_0
        .byte 167
srm06:  xor  ebx,ebx
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        call cpr_
        jge  srm07
        mov  ebx,esp
srm07:  lea  eax,dword (4*rcval)[esi]
        call dvr_
        call ovr_
        jo   srm10
        call chp_
        lea  eax,dword (4*rcval)[esi]
        call mlr_
        lea  eax,dword (4*rcval)[edi]
        call sbr_
        or   ebx,ebx
        jz   srm09
        call cpr_
        jle  exrea
srm08:  call ngr_
        jmp  exrea
srm09:  call cpr_
        jl   srm08
        jmp  exrea
srm10:  call err_1
        .byte 56
        .balign 2
        nop
s_rpl:
        call gtstg
        .err_-168-dffnc
        mov  esi,edi
        call gtstg
        .err_-169-dffnc
        cmp  edi,dword r_ra2
        jne  srpl1
        cmp  esi,dword r_ra3
        je   srpl4
srpl1:  mov  ebx,dword (4*sclen)[esi]
        cmp  ecx,ebx
        jne  srpl6
        cmp  edi,dword kvalp
        je   srpl5
        or   ebx,ebx
        jz   srpl6
        mov  dword r_ra3,esi
        mov  dword r_ra2,edi
        mov  esi,dword kvalp
        mov  ecx,dword (4*sclen)[esi]
        mov  edi,dword r_rpt
        or   edi,edi
        jnz  srpl2
        call alocs
        mov  ecx,edx
        mov  dword r_rpt,edi
srpl2:  add  ecx,3+4*scsi_
        and  ecx,-4
        shr  ecx,2
        rep  movsd
        mov  esi,dword r_ra2
        xor  edx,edx
        mov  edi,dword r_ra3
        add  edi,cfp_f
srpl3:  mov  esi,dword r_ra2
        lea  esi,[cfp_f+esi+edx]
        inc  edx
        movzx ecx,byte [esi]
        mov  esi,dword r_rpt
        lea  esi,[cfp_f+esi+ecx]
        movzx ecx,byte [edi]
        inc  edi
        mov  [esi],cl
        dec  ebx
        jnz  srpl3
srpl4:  mov  esi,dword r_rpt
srpl5:  call gtstg
        .err_-170-dffnc
        or   ecx,ecx
        jz   exnul
        push esi
        mov  esi,edi
        mov  edx,ecx
        add  ecx,3+4*schar
        and  ecx,-4
        call alloc
        mov  ebx,edi
        shr  ecx,2
        rep  movsd
        pop  edi
        add  edi,cfp_f
        mov  esi,ebx
        add  esi,cfp_f
        mov  ecx,edx
        xchg esi,edi
l0004:  movzx eax,byte [edi]
        mov  al,[esi+eax]
        stosb
        loop l0004
        xor  esi,esi
        xor  edi,edi
srpl8:  push ebx
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
srpl6:  call err_0
        .byte 171
        .balign 2
        nop
s_rew:
        call iofcb
        .err_-172-dffnc
        .err_-173-dffnc
        .err_-174-dffnc
        call sysrw
        .err_-174-dffnc
        .err_-175-dffnc
        .err_-176-dffnc
        jmp  exnul
        .balign 2
        nop
s_rvs:
        call gtstg
        .err_-177-dffnc
        or   ecx,ecx
        jz   exixr
        mov  esi,edi
        call alocs
        push edi
        add  edi,cfp_f
        lea  esi,[cfp_f+esi+edx]
srvs1:  dec  esi
        movzx ebx,byte [esi]
        mov  al,bl
        stosb
        dec  edx
        jnz  srvs1
srvs4:
        xor  esi,esi
srvs2:  mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_rpd:
        call gtstg
        .err_-178-dffnc
        add  edi,cfp_f
        movzx ebx,byte [edi]
        call gtsmi
        .err_-179-dffnc
        .srpd3-dffnc
srpd1:  call gtstg
        .err_-180-dffnc
        cmp  ecx,edx
        jae  exixr
        mov  esi,edi
        mov  ecx,edx
        call alocs
        push edi
        mov  ecx,dword (4*sclen)[esi]
        sub  edx,ecx
        add  edi,cfp_f
        or   ecx,ecx
        jz   srpd2
        add  esi,cfp_f
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
        xor  esi,esi
srpd2:  mov  al,bl
        stosb
        dec  edx
        jnz  srpd2
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
srpd3:  xor  edx,edx
        jmp  srpd1
        .balign 2
        nop
s_rtb:
        mov  ebx,offset p_rtb
        mov  ecx,offset p_rtd
        call patin
        .err_-181-dffnc
        .err_-182-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_set:
        pop  dword r_io2
        pop  dword r_io1
        call iofcb
        .err_-291-dffnc
        .err_-292-dffnc
        .err_-295-dffnc
        mov  ebx,dword r_io1
        mov  edx,dword r_io2
        call sysst
        .err_-293-dffnc
        .err_-294-dffnc
        .err_-295-dffnc
        .err_-296-dffnc
        .err_-297-dffnc
        jmp  exint
        .balign 2
        nop
s_tab:
        mov  ebx,offset p_tab
        mov  ecx,offset p_tbd
        call patin
        .err_-183-dffnc
        .err_-184-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_rps:
        mov  ebx,offset p_rps
        mov  ecx,offset p_rpd
        call patin
        .err_-185-dffnc
        .err_-186-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_rsr:
        mov  ecx,esp
        call sorta
        .exfal-dffnc
        jmp  exsid
        .balign 2
        nop
s_stx:
        pop  edi
        mov  ecx,dword stxvr
        xor  esi,esi
        cmp  edi,offset nulls
        je   sstx1
        call gtnvr
        .sstx2-dffnc
        mov  esi,dword (4*vrlbl)[edi]
        cmp  esi,offset stndl
        je   sstx2
        cmp  dword [esi],offset b_trt
        jne  sstx1
        mov  esi,dword (4*trlbl)[esi]
sstx1:  mov  dword stxvr,edi
        mov  dword r_sxc,esi
        cmp  ecx,offset nulls
        je   exnul
        mov  edi,ecx
        jmp  exvnm
sstx2:  call err_0
        .byte 187
        .balign 2
        nop
s_sin:
        pop  edi
        call gtrea
        .err_-308-dffnc
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        call sin_
        call ovr_
        jno  exrea
        call err_1
        .byte 67
        .balign 2
        nop
s_sqr:
        pop  edi
        call gtrea
        .err_-313-dffnc
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        call cpr_
        jl   ssqr1
        call sqr_
        jmp  exrea
ssqr1:  call err_1
        .byte 58
        .balign 2
        nop
s_srt:
        xor  ecx,ecx
        call sorta
        .exfal-dffnc
        jmp  exsid
        .balign 2
        nop
s_spn:
        mov  ebx,offset p_sps
        mov  esi,offset p_spn
        mov  edx,offset p_spd
        call patst
        .err_-188-dffnc
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_si_:
        call gtstg
        .err_-189-dffnc
        mov  edx,ecx
        jmp  exint
        .balign 2
        nop
s_stt:
        xor  esi,esi
        call trace
        .err_-190-dffnc
        .err_-191-dffnc
        jmp  exnul
        .balign 2
        nop
s_sub:
        call gtsmi
        .err_-192-dffnc
        .exfal-dffnc
        mov  dword sbssv,edi
        call gtsmi
        .err_-193-dffnc
        .exfal-dffnc
        mov  edx,edi
        or   edx,edx
        jz   exfal
        dec  edx
        call gtstg
        .err_-194-dffnc
        mov  ebx,edx
        mov  edx,dword sbssv
        or   edx,edx
        jnz  ssub2
        mov  edx,ecx
        cmp  ebx,edx
        ja   exfal
        sub  edx,ebx
ssub2:  mov  esi,ecx
        mov  ecx,edx
        add  edx,ebx
        cmp  edx,esi
        ja   exfal
        mov  esi,edi
        call sbstr
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_tbl:
        pop  esi
        add  esp,4
        call gtsmi
        .err_-195-dffnc
        .err_-196-dffnc
        or   edx,edx
        jnz  stbl1
        mov  edx,tbnbk
stbl1:  call tmake
        jmp  exsid
        .balign 2
        nop
s_tan:
        pop  edi
        call gtrea
        .err_-309-dffnc
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        call tan_
        call ovr_
        jno  exrea
        call err_1
        .byte 54
        .balign 2
        nop
s_tim:
        call systm
        sub  edx,dword timsx
        jmp  exint
        .balign 2
        nop
s_tra:
        cmp  dword (4*num03)[esp],offset nulls
        je   str02
        pop  edi
        xor  esi,esi
        cmp  edi,offset nulls
        je   str01
        call gtnvr
        .str03-dffnc
        mov  esi,edi
str01:  pop  edi
        xor  ebx,ebx
        call trbld
        mov  esi,edi
        call trace
        .err_-198-dffnc
        .err_-199-dffnc
        jmp  exnul
str02:  call systt
        add  esp,4*num04
        jmp  exnul
str03:  call err_0
        .byte 197
        .balign 2
        nop
s_trm:
        call gtstg
        .err_-200-dffnc
        or   ecx,ecx
        jz   exnul
        mov  esi,edi
        add  ecx,3+4*schar
        and  ecx,-4
        call alloc
        mov  ebx,edi
        shr  ecx,2
        rep  movsd
        mov  edi,ebx
        call trimr
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
        .balign 2
        nop
s_unl:
        pop  edi
        call gtnvr
        .err_-201-dffnc
        mov  esi,offset stndf
        call dffnc
        jmp  exnul
        .sbttl "s p i t b o l -- utility routines"
arref:
        .global arref
        mov  ecx,edi
        mov  esi,esp
        sal  edi,2
        add  esi,edi
        add  esi,4
        mov  dword arfxs,esi
        lea  esi,[esi-4]
        mov  edi,dword [esi]
        mov  dword r_arf,edi
        mov  edi,esi
        mov  esi,dword r_arf
        mov  edx,dword [esi]
        cmp  edx,offset b_art
        je   arf01
        cmp  edx,offset b_vct
        je   arf07
        cmp  edx,offset b_tbt
        je   arf10
        call err_0
        .byte 235
arf01:  cmp  ecx,dword (4*arndm)[esi]
        jne  arf09
        mov  edx,dword intv0
        mov  esi,edi
        xor  ecx,ecx
        jmp  arf03
arf02:  imul edx,dword (4*ardm2)[edi]
arf03:  lea  esi,[esi-4]
        mov  edi,dword [esi]
        mov  dword arfsi,edx
        mov  edx,dword (4*icval)[edi]
        cmp  dword [edi],offset b_icl
        je   arf04
        call gtint
        .arf12-dffnc
        mov  edx,dword (4*icval)[edi]
arf04:  mov  edi,dword r_arf
        add  edi,ecx
        sub  edx,dword (4*arlbd)[edi]
        jo   arf13
        or   edx,edx
        jl   arf13
        sub  edx,dword (4*ardim)[edi]
#        or   edx,edx         (optimized)
        jge  arf13
        add  edx,dword (4*ardim)[edi]
        add  edx,dword arfsi
        add  ecx,4*ardms
        cmp  esi,esp
        jne  arf02
        mov  ecx,edx
        sal  ecx,2
        mov  esi,dword r_arf
        add  ecx,dword (4*arofs)[esi]
        add  ecx,4
        or   ebx,ebx
        jnz  arf08
arf05:  call acess
        .arf13-dffnc
arf06:  mov  esp,dword arfxs
        xor  eax,eax
        mov  dword r_arf,eax
        push edi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
arf07:  cmp  ecx,num01
        jne  arf09
        mov  edi,dword [esp]
        call gtint
        .arf12-dffnc
        mov  edx,dword (4*icval)[edi]
        sub  edx,dword intv1
#        or   edx,edx         (optimized)
        js   arf13
        mov  ecx,edx
        add  ecx,vcvls
        sal  ecx,2
        cmp  ecx,dword (4*vclen)[esi]
        jae  arf13
        or   ebx,ebx
        jz   arf05
arf08:  mov  esp,dword arfxs
        xor  eax,eax
        mov  dword r_arf,eax
        jmp  exnam
arf09:  call err_0
        .byte 236
arf10:  cmp  ecx,num01
        jne  arf11
        mov  edi,dword [esp]
        call tfind
        .arf13-dffnc
        or   ebx,ebx
        jnz  arf08
        jmp  arf06
arf11:  call err_0
        .byte 237
arf12:  call err_0
        .byte 238
arf13:  xor  eax,eax
        mov  dword r_arf,eax
        jmp  exfal
cfunc:
        .global cfunc
        cmp  ecx,dword (4*fargs)[esi]
        jb   cfnc1
        cmp  ecx,dword (4*fargs)[esi]
        je   cfnc3
        mov  ebx,ecx
        sub  ebx,dword (4*fargs)[esi]
        sal  ebx,2
        add  esp,ebx
        jmp  cfnc3
cfnc1:  mov  ebx,dword (4*fargs)[esi]
        cmp  ebx,nini9
        je   cfnc3
        sub  ebx,ecx
cfnc2:  push offset nulls
        dec  ebx
        jnz  cfnc2
cfnc3:  jmp  dword [esi]
exfal:
        .global exfal
        mov  esp,dword flptr
        mov  edi,dword [esp]
        add  edi,dword r_cod
        mov  ebp,edi
        mov  edi,[ebp]
        add  ebp,4
        mov  esi,dword [edi]
        jmp  esi
exint:
        .global exint
        xor  esi,esi
        call icbld
exixr:
        .global exixr
        push edi
exits:
        .global exits
        mov  edi,[ebp]
        add  ebp,4
        mov  esi,dword [edi]
        jmp  esi
exnam:
        .global exnam
        push esi
        push ecx
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
exnul:
        .global exnul
        push offset nulls
        mov  edi,[ebp]
        add  ebp,4
        mov  esi,dword [edi]
        jmp  esi
exrea:
        .global exrea
        xor  esi,esi
        call rcbld
        jmp  exixr
exsid:
        .global exsid
        mov  ecx,dword curid
        cmp  ecx,cfp_m
        jne  exsi1
        xor  ecx,ecx
exsi1:  inc  ecx
        mov  dword curid,ecx
        mov  dword (4*idval)[edi],ecx
        jmp  exixr
exvnm:
        .global exvnm
        mov  esi,edi
        mov  ecx,4*nmsi_
        call alloc
        mov  dword [edi],offset b_nml
        mov  dword (4*nmbas)[edi],esi
        mov  dword (4*nmofs)[edi],4*vrval
        jmp  exixr
flpop:
        .global flpop
        add  esp,4*num02
failp:
        .global failp
        pop  edi
        pop  ebx
        mov  esi,dword [edi]
        jmp  esi
indir:
        .global indir
        pop  edi
        cmp  dword [edi],offset b_nml
        je   indr2
        call gtnvr
        .err_-239-dffnc
        or   ebx,ebx
        jz   indr1
        push edi
        push 4*vrval
        mov  edi,[ebp]
        add  ebp,4
        mov  esi,dword [edi]
        jmp  esi
indr1:  jmp  dword [edi]
indr2:  mov  esi,dword (4*nmbas)[edi]
        mov  ecx,dword (4*nmofs)[edi]
        or   ebx,ebx
        jnz  exnam
        call acess
        .exfal-dffnc
        jmp  exixr
match:
        .global match
        pop  edi
        call gtpat
        .err_-240-dffnc
        mov  esi,edi
        or   ebx,ebx
        jnz  mtch1
        mov  ecx,dword [esp]
        push esi
        mov  esi,dword (4*num02)[esp]
        call acess
        .exfal-dffnc
        mov  esi,dword [esp]
        mov  dword [esp],edi
        xor  ebx,ebx
mtch1:  call gtstg
        .err_-241-dffnc
        push ebx
        mov  dword r_pms,edi
        mov  dword pmssl,ecx
        push 0
        xor  ebx,ebx
        mov  dword pmhbs,esp
        xor  eax,eax
        mov  dword pmdfl,eax
        mov  edi,esi
        cmp  dword dword ptr kvanc,0
        jnz  mtch2
        push edi
        push offset nduna
        jmp  dword [edi]
mtch2:  push 0
        push offset ndabo
        jmp  dword [edi]
retrn:
        .global retrn
        cmp  dword dword ptr kvfnc,0
        jnz  rtn01
        call err_0
        .byte 242
rtn01:  mov  esp,dword flprt
        add  esp,4
        pop  edi
        pop  dword flptr
        pop  dword flprt
        pop  ebx
        pop  edx
        add  ebx,edx
        mov  ebp,ebx
        mov  dword r_cod,edx
        dec  dword kvfnc
        mov  ebx,dword kvtra
        add  ebx,dword kvftr
#        or   ebx,ebx         (optimized)
        jz   rtn06
        push ecx
        push edi
        mov  dword kvrtn,ecx
        mov  esi,dword r_fnc
        call ktrex
        mov  esi,dword (4*pfvbl)[edi]
        cmp  dword dword ptr kvtra,0
        jz   rtn02
        mov  edi,dword (4*pfrtr)[edi]
        or   edi,edi
        jz   rtn02
        dec  dword kvtra
        cmp  dword dword ptr (4*trfnc)[edi],0
        jz   rtn03
        mov  ecx,4*vrval
        mov  eax,dword (4*num01)[esp]
        mov  dword kvrtn,eax
        call trxeq
rtn02:  cmp  dword dword ptr kvftr,0
        jz   rtn05
        dec  dword kvftr
rtn03:  call prtsn
        mov  edi,dword (4*num01)[esp]
        call prtst
        mov  ecx,ch_bl
        call prtch
        mov  esi,dword (4*0)[esp]
        mov  esi,dword (4*pfvbl)[esi]
        mov  ecx,4*vrval
        cmp  edi,offset scfrt
        jne  rtn04
        call prtnm
        call prtnl
        jmp  rtn05
rtn04:  call prtnv
rtn05:  pop  edi
        pop  ecx
rtn06:  mov  dword kvrtn,ecx
        mov  esi,dword (4*pfvbl)[edi]
rtn07:  mov  dword rtnbp,esi
        mov  esi,dword (4*vrval)[esi]
        cmp  dword [esi],offset b_trt
        je   rtn07
        mov  dword rtnfv,esi
        pop  dword rtnsv
        pop  esi
        or   esi,esi
        jz   rtn7c
        cmp  dword dword ptr kvpfl,0
        jz   rtn7c
        call prflu
        cmp  dword kvpfl,num02
        je   rtn7a
        mov  edx,dword pfstm
        sub  edx,dword (4*icval)[esi]
        jmp  rtn7b
rtn7a:  mov  edx,dword (4*icval)[esi]
rtn7b:  mov  dword pfstm,edx
rtn7c:  mov  ebx,dword (4*fargs)[edi]
        add  ebx,dword (4*pfnlo)[edi]
#        or   ebx,ebx         (optimized)
        jz   rtn10
        add  edi,dword (4*pflen)[edi]
rtn08:  lea  edi,[edi-4]
        mov  esi,dword [edi]
rtn09:  mov  ecx,esi
        mov  esi,dword (4*vrval)[esi]
        cmp  dword [esi],offset b_trt
        je   rtn09
        mov  esi,ecx
        pop  dword (4*vrval)[esi]
        dec  ebx
        jnz  rtn08
rtn10:  mov  esi,dword rtnbp
        mov  eax,dword rtnsv
        mov  dword (4*vrval)[esi],eax
        mov  edi,dword rtnfv
        mov  esi,dword r_cod
        mov  eax,dword kvstn
        mov  dword kvlst,eax
        mov  eax,dword (4*cdstm)[esi]
        mov  dword kvstn,eax
        mov  eax,dword kvlin
        mov  dword kvlln,eax
        mov  eax,dword (4*cdsln)[esi]
        mov  dword kvlin,eax
        mov  ecx,dword kvrtn
        cmp  ecx,offset scrtn
        je   exixr
        cmp  ecx,offset scfrt
        je   exfal
        cmp  dword [edi],offset b_nml
        je   rtn11
        call gtnvr
        .err_-243-dffnc
        mov  esi,edi
        mov  ecx,4*vrval
        jmp  rtn12
rtn11:  mov  esi,dword (4*nmbas)[edi]
        mov  ecx,dword (4*nmofs)[edi]
rtn12:  mov  edi,esi
        mov  ebx,[ebp]
        add  ebp,4
        mov  esi,edi
        cmp  ebx,offset ofne_
        je   exnam
        push ebx
        call acess
        .exfal-dffnc
        mov  esi,edi
        mov  edi,dword [esp]
        mov  dword [esp],esi
        mov  esi,dword [edi]
        jmp  esi
stcov:
        .global stcov
        inc  dword errft
        mov  edx,dword intvt
        add  edx,dword kvstl
        mov  dword kvstl,edx
        mov  edx,dword intvt
        mov  dword kvstc,edx
        call stgcc
        call err_0
        .byte 244
stmgo:
        .global stmgo
        mov  dword r_cod,edi
        dec  dword stmct
        cmp  dword dword ptr stmct,0
        jz   stgo2
        mov  eax,dword kvstn
        mov  dword kvlst,eax
        mov  eax,dword (4*cdstm)[edi]
        mov  dword kvstn,eax
        mov  eax,dword kvlin
        mov  dword kvlln,eax
        mov  eax,dword (4*cdsln)[edi]
        mov  dword kvlin,eax
        add  edi,4*cdcod
        mov  ebp,edi
stgo1:  mov  edi,[ebp]
        add  ebp,4
        xor  esi,esi
        jmp  dword [edi]
stgo2:  cmp  dword dword ptr kvpfl,0
        jz   stgo3
        call prflu
stgo3:  mov  eax,dword kvstn
        mov  dword kvlst,eax
        mov  eax,dword (4*cdstm)[edi]
        mov  dword kvstn,eax
        mov  eax,dword kvlin
        mov  dword kvlln,eax
        mov  eax,dword (4*cdsln)[edi]
        mov  dword kvlin,eax
        add  edi,4*cdcod
        mov  ebp,edi
        push dword stmcs
        dec  dword polct
        cmp  dword dword ptr polct,0
        jnz  stgo4
        xor  ecx,ecx
        mov  ebx,dword kvstn
        mov  esi,edi
        call syspl
        .err_-320-dffnc
        .err_-299-dffnc
        .err_-299-dffnc
        mov  edi,esi
        mov  dword polcs,ecx
        call stgcc
stgo4:  mov  edx,dword kvstc
        or   edx,edx
        jl   stgo5
        pop  edx
        neg  edx
        add  edx,dword kvstc
        mov  dword kvstc,edx
        or   edx,edx
        jle  stcov
        cmp  dword dword ptr r_stc,0
        jz   stgo5
        xor  edi,edi
        mov  esi,dword r_stc
        call ktrex
stgo5:  mov  eax,dword stmcs
        mov  dword stmct,eax
        jmp  stgo1
stopr:
        .global stopr
        or   edi,edi
        jz   stpra
        call sysax
stpra:  mov  eax,dword rsmem
        add  dword dname,eax
        cmp  edi,offset endms
        jne  stpr0
        cmp  dword dword ptr exsts,0
        jnz  stpr3
        xor  eax,eax
        mov  dword erich,eax
stpr0:  call prtpg
        or   edi,edi
        jz   stpr1
        call prtst
stpr1:  call prtis
        cmp  dword dword ptr gbcfl,0
        jnz  stpr5
        mov  edi,offset stpm7
        call prtst
        mov  dword profs,prtmf
        mov  edx,dword kvstn
        call filnm
        mov  edi,esi
        call prtst
        call prtis
        mov  edi,dword r_cod
        mov  edx,dword (4*cdsln)[edi]
        mov  edi,offset stpm6
        call prtmx
stpr5:  mov  edx,dword kvstn
        mov  edi,offset stpm1
        call prtmx
        call systm
        sub  edx,dword timsx
        mov  dword stpti,edx
        mov  edi,offset stpm3
        call prtmx
        mov  edx,dword kvstl
        or   edx,edx
        jl   stpr2
        sub  edx,dword kvstc
        mov  dword stpsi,edx
        mov  ecx,dword stmcs
        sub  ecx,dword stmct
        mov  edx,ecx
        add  edx,dword stpsi
        mov  dword stpsi,edx
        mov  edi,offset stpm2
        call prtmx
        mov  edx,dword stpti
        imul edx,dword intth
        jo   stpr2
        mov  eax,dword stpsi
        call dvi_
        jo   stpr2
        mov  edi,offset stpm4
        call prtmx
stpr2:  mov  edx,dword gbcnt
        mov  edi,offset stpm5
        call prtmx
        call prtmm
        call prtis
stpr3:  call prflr
        mov  edi,dword kvdmp
        call dumpr
        mov  esi,dword r_fcb
        mov  ecx,dword kvabe
        mov  ebx,dword kvcod
        call sysej
stpr4:
        .global stpr4
        mov  eax,dword rsmem
        add  dword dname,eax
        cmp  dword dword ptr exsts,0
        jz   stpr1
        jmp  stpr3
succp:
        .global succp
        mov  edi,dword (4*pthen)[edi]
        mov  esi,dword [edi]
        jmp  esi
sysab:
        .global sysab
        mov  edi,offset endab
        mov  dword kvabe,num01
        call prtnl
        jmp  stopr
systu:
        .global systu
        mov  edi,offset endtu
        mov  ecx,dword strtu
        mov  dword kvcod,ecx
        mov  ecx,dword timup
        mov  dword timup,esp
        or   ecx,ecx
        jnz  stopr
        call err_0
        .byte 245
        .sbttl "s p i t b o l -- utility procedures"
acess:
        .global acess
        mov  edi,esi
        add  edi,ecx
        mov  edi,dword [edi]
acs02:  cmp  dword [edi],offset b_trt
        jne  acs18
        cmp  edi,offset trbkv
        je   acs12
        cmp  edi,offset trbev
        jne  acs05
        mov  edi,dword (4*evexp)[esi]
        xor  ebx,ebx
        call evalx
        .acs04-dffnc
        jmp  acs02
acs03:  add  esp,4*num03
        mov  dword dnamp,edi
acs04:  pop  eax
        jmp  exi__1
acs05:  mov  ebx,dword (4*trtyp)[edi]
        or   ebx,ebx
        jnz  acs10
        cmp  dword dword ptr kvinp,0
        jz   acs09
        push esi
        push ecx
        push edi
        mov  eax,dword kvtrm
        mov  dword actrm,eax
        mov  esi,dword (4*trfpt)[edi]
        or   esi,esi
        jnz  acs06
        cmp  dword (4*trter)[edi],offset v_ter
        je   acs21
        mov  ecx,dword cswin
        call alocs
        call sysrd
        .acs03-dffnc
        jmp  acs07
acs06:  mov  ecx,esi
        call sysil
        or   edx,edx
        jnz  acs6a
        mov  dword actrm,edx
acs6a:  call alocs
        mov  ecx,esi
        call sysin
        .acs03-dffnc
        .acs22-dffnc
        .acs23-dffnc
acs07:  mov  ebx,dword actrm
        call trimr
        mov  ebx,edi
        mov  edi,dword [esp]
acs08:  mov  esi,edi
        mov  edi,dword (4*trnxt)[edi]
        cmp  dword [edi],offset b_trt
        je   acs08
        mov  dword (4*trnxt)[esi],ebx
        pop  edi
        pop  ecx
        pop  esi
acs09:  mov  edi,dword (4*trnxt)[edi]
        jmp  acs02
acs10:  cmp  ebx,trtac
        jne  acs09
        cmp  dword dword ptr kvtra,0
        jz   acs09
        dec  dword kvtra
        cmp  dword dword ptr (4*trfnc)[edi],0
        jz   acs11
        call trxeq
        jmp  acs09
acs11:  call prtsn
        call prtnv
        jmp  acs09
acs12:  mov  edi,dword (4*kvnum)[esi]
        cmp  edi,k_v__
        jae  acs14
        mov  edx,kvabe[edi]
acs13:  call icbld
        jmp  acs18
acs14:  cmp  edi,k_s__
        jae  acs15
        sub  edi,k_v__
        sal  edi,2
        add  edi,offset ndabo
        jmp  acs18
acs15:  mov  esi,dword kvrtn
        mov  edx,dword kvstl
        sub  edi,k_s__
        jmp  dword l0005[edi*4]
        dseg_
l0005:
        .long acs16
        .long acs17
        .long acs19
        .long acs20
        .long acs26
        .long acs27
        .long acs13
        .long acs24
        .long acs25
        dsegend_
        cseg_
acs24:  mov  edi,offset lcase
        jmp  acs18
acs25:  mov  edi,offset ucase
        jmp  acs18
acs26:  mov  edx,dword kvstn
        jmp  acs28
acs27:  mov  edx,dword kvlst
acs28:  call filnm
        jmp  acs17
acs16:  mov  esi,dword kvalp
acs17:  mov  edi,esi
acs18:  pop  eax
        lea  eax,[eax+2]
        jmp  eax
acs19:  or   edx,edx
        jl   acs29
        mov  ecx,dword stmcs
        sub  ecx,dword stmct
        mov  edx,ecx
        add  edx,dword kvstl
acs29:  sub  edx,dword kvstc
        jmp  acs13
acs20:  mov  edi,dword r_etx
        jmp  acs18
acs21:  mov  ecx,rilen
        call alocs
        call sysri
        .acs03-dffnc
        jmp  acs07
acs22:  mov  dword dnamp,edi
        call err_0
        .byte 202
acs23:  mov  dword dnamp,edi
        call err_0
        .byte 203
acomp:
        .global acomp
        pop  prc_+0
        call arith
        .acmp7-dffnc
        .acmp8-dffnc
        .acmp4-dffnc
        sub  edx,dword (4*icval)[esi]
        jo   acmp3
        or   edx,edx
        jl   acmp5
        or   edx,edx
        je   acmp2
acmp1:  mov  eax,prc_+0
        jmp  exi__5
acmp2:  mov  eax,prc_+0
        jmp  exi__4
acmp3:  mov  edx,dword (4*icval)[esi]
        or   edx,edx
        jl   acmp1
        jmp  acmp5
acmp4:  lea  eax,dword (4*rcval)[esi]
        call sbr_
        call ovr_
        jo   acmp6
        call cpr_
        jg   acmp1
        call cpr_
        je   acmp2
acmp5:  mov  eax,prc_+0
        jmp  exi__3
acmp6:  lea  eax,dword (4*rcval)[esi]
        call ldr_
        call cpr_
        jl   acmp1
        jmp  acmp5
acmp7:  mov  eax,prc_+0
        jmp  exi__1
acmp8:  mov  eax,prc_+0
        jmp  exi__2
alloc:
        .global alloc
aloc1:  mov  edi,dword dnamp
        add  edi,ecx
        jc   aloc2
        cmp  edi,dword dname
        ja   aloc2
        mov  dword dnamp,edi
        sub  edi,ecx
        ret
aloc2:  mov  dword allsv,ebx
alc2a:  xor  ebx,ebx
        call gbcol
        mov  ebx,edi
aloc3:  mov  edi,dword dnamp
        add  edi,ecx
        jc   alc3a
        cmp  edi,dword dname
        jb   aloc4
alc3a:  call sysmm
        sal  edi,2
        add  dword dname,edi
        or   edi,edi
        jnz  aloc3
        cmp  dword dword ptr dnams,0
        jz   alc3b
        xor  eax,eax
        mov  dword dnams,eax
        jmp  alc2a
alc3b:  mov  eax,dword rsmem
        add  dword dname,eax
        xor  eax,eax
        mov  dword rsmem,eax
        inc  dword errft
        call err_0
        .byte 204
aloc4:  mov  dword allia,edx
        mov  dword dnams,ebx
        mov  ebx,dword dname
        sub  ebx,dword dnamp
        shr  ebx,2
        mov  edx,ebx
        imul edx,dword alfsf
        jo   aloc5
        mov  ebx,dword dname
        sub  ebx,dword dnamb
        shr  ebx,2
        mov  dword aldyn,ebx
        sub  edx,dword aldyn
#        or   edx,edx         (optimized)
        jg   aloc5
        call sysmm
        sal  edi,2
        add  dword dname,edi
aloc5:  mov  edx,dword allia
        mov  ebx,dword allsv
        jmp  aloc1
alocs:
        .global alocs
        cmp  ecx,dword kvmxl
        ja   alcs2
        mov  edx,ecx
        add  ecx,3+4*scsi_
        and  ecx,-4
        mov  edi,dword dnamp
        add  edi,ecx
        jc   alcs0
        cmp  edi,dword dname
        jb   alcs1
alcs0:  xor  edi,edi
        call alloc
        add  edi,ecx
alcs1:  mov  dword dnamp,edi
        lea  edi,[edi-4]
        xor  eax,eax
        mov  dword [edi],eax
        sub  ecx,4
        sub  edi,ecx
        mov  dword [edi],offset b_scl
        mov  dword (4*sclen)[edi],edx
        ret
alcs2:  call err_0
        .byte 205
alost:
        .global alost
alst1:  mov  edi,dword state
        add  edi,ecx
        jc   alst2
        cmp  edi,dword dnamb
        jae  alst2
        mov  dword state,edi
        sub  edi,ecx
        ret
alst2:  mov  dword alsta,ecx
        cmp  ecx,4*e_sts
        jae  alst3
        mov  ecx,4*e_sts
alst3:  call alloc
        mov  dword dnamp,edi
        mov  ebx,ecx
        call gbcol
        mov  dword dnams,edi
        mov  ecx,dword alsta
        jmp  alst1
arith:
        .global arith
        pop  prc_+4
        pop  esi
        pop  edi
        mov  ecx,dword [esi]
        cmp  ecx,offset b_icl
        je   arth1
        cmp  ecx,offset b_rcl
        je   arth4
        push edi
        mov  edi,esi
        call gtnum
        .arth6-dffnc
        mov  esi,edi
        mov  ecx,dword [esi]
        pop  edi
        cmp  ecx,offset b_rcl
        je   arth4
arth1:  cmp  dword [edi],offset b_icl
        jne  arth3
arth2:  mov  edx,dword (4*icval)[edi]
        mov  eax,prc_+4
        lea  eax,[eax+6]
        jmp  eax
arth3:  call gtnum
        .arth7-dffnc
        cmp  ecx,offset b_icl
        je   arth2
        push edi
        mov  edx,dword (4*icval)[esi]
        call itr_
        call rcbld
        mov  esi,edi
        pop  edi
        jmp  arth5
arth4:  cmp  dword [edi],offset b_rcl
        je   arth5
        call gtrea
        .arth7-dffnc
arth5:  lea  eax,dword (4*rcval)[edi]
        call ldr_
        mov  eax,prc_+4
        jmp  exi__3
arth6:  add  esp,4
        mov  eax,prc_+4
        jmp  exi__2
arth7:  mov  eax,prc_+4
        jmp  exi__1
asign:
        .global asign
asg01:  add  esi,ecx
        mov  edi,dword [esi]
        cmp  dword [edi],offset b_trt
        je   asg02
        mov  dword [esi],ebx
        xor  esi,esi
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
asg02:  sub  esi,ecx
        cmp  edi,offset trbkv
        je   asg14
        cmp  edi,offset trbev
        jne  asg04
        mov  edi,dword (4*evexp)[esi]
        push ebx
        mov  ebx,num01
        call evalx
        .asg03-dffnc
        pop  ebx
        jmp  asg01
asg03:  add  esp,4
        pop  eax
        jmp  exi__1
asg04:  push edi
asg05:  mov  edx,edi
        mov  edi,dword (4*trnxt)[edi]
        cmp  dword [edi],offset b_trt
        je   asg05
        mov  edi,edx
        mov  dword (4*trval)[edi],ebx
        pop  edi
asg06:  mov  ebx,dword (4*trtyp)[edi]
        cmp  ebx,trtvl
        je   asg08
        cmp  ebx,trtou
        je   asg10
asg07:  mov  edi,dword (4*trnxt)[edi]
        cmp  dword [edi],offset b_trt
        je   asg06
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
asg08:  cmp  dword dword ptr kvtra,0
        jz   asg07
        dec  dword kvtra
        cmp  dword dword ptr (4*trfnc)[edi],0
        jz   asg09
        call trxeq
        jmp  asg07
asg09:  call prtsn
        call prtnv
        jmp  asg07
asg10:  cmp  dword dword ptr kvoup,0
        jz   asg07
asg1b:  mov  esi,edi
        mov  edi,dword (4*trnxt)[edi]
        cmp  dword [edi],offset b_trt
        je   asg1b
        mov  edi,esi
        push dword (4*trval)[edi]
        call gtstg
        .asg12-dffnc
asg11:  mov  ecx,dword (4*trfpt)[esi]
        or   ecx,ecx
        jz   asg13
asg1a:  call sysou
        .err_-206-dffnc
        .err_-207-dffnc
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
asg12:  call dtype
        jmp  asg11
asg13:  cmp  dword (4*trter)[esi],offset v_ter
        je   asg1a
        inc  ecx
        jmp  asg1a
asg14:  mov  esi,dword (4*kvnum)[esi]
        cmp  esi,k_etx
        je   asg19
        mov  edi,ebx
        call gtint
        .err_-208-dffnc
        mov  edx,dword (4*icval)[edi]
        cmp  esi,k_stl
        je   asg16
        or   edx,edx
        js   asg18
        mov  ecx,edx
        cmp  ecx,dword mxlen
        ja   asg18
        cmp  esi,k_ert
        je   asg17
        cmp  esi,k_pfl
        je   asg21
        cmp  esi,k_mxl
        je   asg24
        cmp  esi,k_fls
        je   asg26
        cmp  esi,k_p__
        jb   asg15
        call err_0
        .byte 209
asg15:  mov  kvabe[esi],ecx
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
asg16:  sub  edx,dword kvstl
        add  edx,dword kvstc
        mov  dword kvstc,edx
        mov  edx,dword kvstl
        or   edx,edx
        jl   asg25
        mov  ecx,dword stmcs
        sub  ecx,dword stmct
        mov  edx,ecx
        neg  edx
        add  edx,dword kvstc
        mov  dword kvstc,edx
asg25:  mov  edx,dword (4*icval)[edi]
        mov  dword kvstl,edx
        call stgcc
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
asg17:  cmp  ecx,nini9
        jbe  error
asg18:  call err_0
        .byte 210
asg19:  push ebx
        call gtstg
        .err_-211-dffnc
        mov  dword r_etx,edi
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
asg21:  cmp  ecx,num02
        ja   asg18
        or   ecx,ecx
        jz   asg15
        cmp  dword dword ptr pfdmp,0
        jz   asg22
        cmp  ecx,dword pfdmp
        je   asg23
        call err_1
        .byte 12
asg22:  mov  dword pfdmp,ecx
asg23:  mov  dword kvpfl,ecx
        call stgcc
        call systm
        mov  dword pfstm,edx
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
asg24:  cmp  ecx,mnlen
        jae  asg15
        call err_1
        .byte 31
asg26:  or   ecx,ecx
        jnz  asg15
        call err_1
        .byte 18
asinp:
        .global asinp
        add  esi,ecx
        mov  edi,dword [esi]
        cmp  dword [edi],offset b_trt
        je   asnp1
        mov  dword [esi],ebx
        xor  esi,esi
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
asnp1:  sub  esi,ecx
        push dword pmssl
        push dword pmhbs
        push dword r_pms
        push dword pmdfl
        call asign
        .asnp2-dffnc
        pop  dword pmdfl
        pop  dword r_pms
        pop  dword pmhbs
        pop  dword pmssl
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
asnp2:  pop  dword pmdfl
        pop  dword r_pms
        pop  dword pmhbs
        pop  dword pmssl
        pop  eax
        jmp  exi__1
blkln:
        .global blkln
        mov  esi,ecx
        movzx esi,byte [esi-1]
        cmp  esi,bl___
        jge  bln00
        jmp  dword l0006[esi*4]
        dseg_
l0006:
        .long bln01
        .long bln12
        .long bln12
        .long bln07
        .long bln03
        .long bln02
        .long bln03
        .long bln04
        .long bln09
        .long bln10
        .long bln02
        .long bln01
        .long bln01
        .long bln00
        .long bln00
        .long bln00
        .long bln08
        .long bln05
        .long bln00
        .long bln00
        .long bln00
        .long bln06
        .long bln01
        .long bln01
        .long bln03
        .long bln05
        .long bln03
        .long bln01
        .long bln04
        dsegend_
        cseg_
bln00:  mov  ecx,dword (4*num01)[edi]
        ret
bln01:  mov  ecx,dword (4*num02)[edi]
        ret
bln02:  mov  ecx,4*num02
        ret
bln03:  mov  ecx,4*num03
        ret
bln04:  mov  ecx,4*num04
        ret
bln05:  mov  ecx,4*num05
        ret
bln06:  mov  ecx,4*ctsi_
        ret
bln07:  mov  ecx,4*icsi_
        ret
bln08:  mov  esi,dword (4*pddfp)[edi]
        mov  ecx,dword (4*dfpdl)[esi]
        ret
bln09:  mov  ecx,4*rcsi_
        ret
bln10:  mov  ecx,dword (4*sclen)[edi]
        add  ecx,3+4*scsi_
        and  ecx,-4
        ret
bln12:  mov  ecx,dword (4*num03)[edi]
        ret
copyb:
        .global copyb
        pop  prc_+8
        mov  edi,dword [esp]
        cmp  edi,offset nulls
        je   cop10
        mov  ecx,dword [edi]
        mov  ebx,ecx
        call blkln
        mov  esi,edi
        call alloc
        mov  dword [esp],edi
        shr  ecx,2
        rep  movsd
        xor  esi,esi
        mov  edi,dword [esp]
        cmp  ebx,offset b_tbt
        je   cop05
        cmp  ebx,offset b_vct
        je   cop01
        cmp  ebx,offset b_pdt
        je   cop01
        cmp  ebx,offset b_art
        jne  cop10
        add  edi,dword (4*arofs)[edi]
        jmp  cop02
cop01:  add  edi,4*pdfld
cop02:  mov  esi,dword [edi]
cop03:  cmp  dword [esi],offset b_trt
        jne  cop04
        mov  esi,dword (4*trval)[esi]
        jmp  cop03
cop04:  mov  eax,esi
        stosd
        cmp  edi,dword dnamp
        jne  cop02
        jmp  cop09
cop05:  xor  eax,eax
        mov  dword (4*idval)[edi],eax
        mov  ecx,4*tesi_
        mov  edx,4*tbbuk
cop06:  mov  edi,dword [esp]
        cmp  edx,dword (4*tblen)[edi]
        je   cop09
        mov  ebx,edx
        sub  ebx,4*tenxt
        add  edi,ebx
        add  edx,4
cop07:  mov  esi,dword (4*tenxt)[edi]
        mov  eax,dword [esp]
        mov  dword (4*tenxt)[edi],eax
        cmp  dword [esi],offset b_tbt
        je   cop06
        sub  edi,ebx
        push edi
        mov  ecx,4*tesi_
        call alloc
        push edi
        shr  ecx,2
        rep  movsd
        pop  edi
        pop  esi
        add  esi,ebx
        mov  dword (4*tenxt)[esi],edi
        mov  esi,edi
cop08:  mov  esi,dword (4*teval)[esi]
        cmp  dword [esi],offset b_trt
        je   cop08
        mov  dword (4*teval)[edi],esi
        xor  ebx,ebx
        jmp  cop07
cop09:  pop  edi
        mov  eax,prc_+8
        lea  eax,[eax+2]
        jmp  eax
cop10:  mov  eax,prc_+8
        jmp  exi__1
cdgcg:
        .global cdgcg
        mov  esi,dword (4*cmopn)[edi]
        mov  edi,dword (4*cmrop)[edi]
        cmp  esi,offset opdvd
        je   cdgc2
        call cdgnm
cdgc1:  mov  ecx,esi
        call cdwrd
        ret
cdgc2:  call cdgvl
        jmp  cdgc1
cdgex:
        .global cdgex
        cmp  dword [esi],offset b_vr_
        jb   cdgx1
        mov  ecx,4*sesi_
        call alloc
        mov  dword [edi],offset b_sel
        mov  dword (4*sevar)[edi],esi
        ret
cdgx1:  mov  edi,esi
        push edx
        mov  esi,dword cwcof
        or   ecx,ecx
        jz   cdgx2
        mov  ecx,dword [edi]
        cmp  ecx,offset b_cmt
        jne  cdgx2
        cmp  dword (4*cmtyp)[edi],c__nm
        jae  cdgx2
        call cdgnm
        mov  ecx,offset ornm_
        jmp  cdgx3
cdgx2:  call cdgvl
        mov  ecx,offset orvl_
cdgx3:  call cdwrd
        call exbld
        pop  edx
        ret
cdgnm:
        .global cdgnm
        push esi
        push ebx
        cmp  esp,lowspmin
        jb   sec06
        mov  ecx,dword [edi]
        cmp  ecx,offset b_cmt
        je   cgn04
        cmp  ecx,offset b_vr_
        ja   cgn02
cgn01:  call err_0
        .byte 212
cgn02:  mov  ecx,offset olvn_
        call cdwrd
        mov  ecx,edi
        call cdwrd
cgn03:  pop  ebx
        pop  esi
        ret
cgn04:  mov  esi,edi
        mov  edi,dword (4*cmtyp)[edi]
        cmp  edi,c__nm
        jae  cgn01
        jmp  dword l0007[edi*4]
        dseg_
l0007:
        .long cgn05
        .long cgn08
        .long cgn09
        .long cgn10
        .long cgn11
        .long cgn08
        .long cgn08
        dsegend_
        cseg_
cgn05:  mov  ebx,4*cmopn
cgn06:  call cmgen
        mov  edx,dword (4*cmlen)[esi]
        cmp  ebx,edx
        jb   cgn06
        mov  ecx,offset oaon_
        cmp  edx,4*cmar1
        je   cgn07
        mov  ecx,offset oamn_
        call cdwrd
        mov  ecx,edx
        shr  ecx,2
        sub  ecx,cmvls
cgn07:  mov  edx,esp
        call cdwrd
        jmp  cgn03
cgn08:  mov  edi,esi
        call cdgvl
        mov  ecx,offset ofne_
        jmp  cgn07
cgn09:  mov  edi,dword (4*cmrop)[esi]
        cmp  dword [edi],offset b_vr_
        ja   cgn02
        mov  esi,edi
        mov  ecx,num01
        call cdgex
        mov  ecx,offset olex_
        call cdwrd
        mov  ecx,edi
        call cdwrd
        jmp  cgn03
cgn10:  mov  edi,dword (4*cmrop)[esi]
        call cdgvl
        mov  ecx,offset oinn_
        jmp  cgn12
cgn11:  mov  edi,dword (4*cmrop)[esi]
        call cdgnm
        mov  ecx,offset okwn_
cgn12:  call cdwrd
        jmp  cgn03
cdgvl:
        .global cdgvl
        mov  ecx,dword [edi]
        cmp  ecx,offset b_cmt
        je   cgv01
        cmp  ecx,offset b_vra
        jb   cgv00
        cmp  dword dword ptr (4*vrlen)[edi],0
        jnz  cgvl0
        push edi
        mov  edi,dword (4*vrsvp)[edi]
        mov  ecx,dword (4*svbit)[edi]
        pop  edi
        and  ecx,dword btkwv
        cmp  ecx,dword btkwv
        je   cgv00
cgvl0:  mov  edx,esp
cgv00:  mov  ecx,edi
        call cdwrd
        ret
cgv01:  push ebx
        push esi
        push edx
        push dword cwcof
        cmp  esp,lowspmin
        jb   sec06
        mov  esi,edi
        mov  edi,dword (4*cmtyp)[edi]
        mov  edx,dword cswno
        cmp  edi,c_pr_
        jbe  cgv02
        mov  edx,esp
cgv02:  jmp  dword l0008[edi*4]
        dseg_
l0008:
        .long cgv03
        .long cgv05
        .long cgv14
        .long cgv31
        .long cgv27
        .long cgv29
        .long cgv30
        .long cgv18
        .long cgv19
        .long cgv18
        .long cgv24
        .long cgv24
        .long cgv27
        .long cgv26
        .long cgv21
        .long cgv31
        .long cgv28
        .long cgv15
        .long cgv18
        dsegend_
        cseg_
cgv03:  mov  ebx,4*cmopn
cgv04:  call cmgen
        mov  edx,dword (4*cmlen)[esi]
        cmp  ebx,edx
        jb   cgv04
        mov  ecx,offset oaov_
        cmp  edx,4*cmar1
        je   cgv32
        mov  ecx,offset oamv_
        call cdwrd
        mov  ecx,edx
        sub  ecx,4*cmvls
        shr  ecx,2
        jmp  cgv32
cgv05:  mov  ebx,4*cmvls
cgv06:  cmp  ebx,dword (4*cmlen)[esi]
        je   cgv07
        call cmgen
        jmp  cgv06
cgv07:  sub  ebx,4*cmvls
        shr  ebx,2
        mov  edi,dword (4*cmopn)[esi]
        cmp  dword dword ptr (4*vrlen)[edi],0
        jnz  cgv12
        mov  esi,dword (4*vrsvp)[edi]
        mov  ecx,dword (4*svbit)[esi]
        and  ecx,dword btffc
#        or   ecx,ecx         (optimized)
        jz   cgv12
        mov  ecx,dword (4*svbit)[esi]
        and  ecx,dword btpre
#        or   ecx,ecx         (optimized)
        jnz  cgv08
        mov  edx,esp
cgv08:  mov  esi,dword (4*vrfnc)[edi]
        mov  ecx,dword (4*fargs)[esi]
        cmp  ecx,ebx
        je   cgv11
        cmp  ecx,ebx
        ja   cgv09
        sub  ebx,ecx
        mov  ecx,offset opop_
        jmp  cgv10
cgv09:  sub  ecx,ebx
        mov  ebx,ecx
        mov  ecx,offset nulls
cgv10:  call cdwrd
        dec  ebx
        jnz  cgv10
cgv11:  mov  ecx,esi
        jmp  cgv36
cgv12:  mov  ecx,offset ofns_
        cmp  ebx,num01
        je   cgv13
        mov  ecx,offset ofnc_
        call cdwrd
        mov  ecx,ebx
cgv13:  call cdwrd
        mov  ecx,edi
        jmp  cgv32
cgv14:  mov  esi,dword (4*cmrop)[esi]
        xor  ecx,ecx
        call cdgex
        mov  ecx,edi
        call cdwrd
        jmp  cgv34
cgv15:  push 0
        push 0
        mov  ebx,4*cmvls
        mov  ecx,offset osla_
cgv16:  call cdwrd
        mov  eax,dword cwcof
        mov  dword [esp],eax
        call cdwrd
        call cmgen
        mov  ecx,offset oslb_
        call cdwrd
        mov  ecx,dword (4*num01)[esp]
        mov  eax,dword cwcof
        mov  dword (4*num01)[esp],eax
        call cdwrd
        mov  edi,dword [esp]
        add  edi,dword r_ccb
        mov  eax,dword cwcof
        mov  dword [edi],eax
        mov  ecx,offset oslc_
        mov  edi,ebx
        add  edi,4
        cmp  edi,dword (4*cmlen)[esi]
        jb   cgv16
        mov  ecx,offset osld_
        call cdwrd
        call cmgen
        add  esp,4
        pop  edi
cgv17:  add  edi,dword r_ccb
        mov  ecx,dword [edi]
        mov  eax,dword cwcof
        mov  dword [edi],eax
        mov  edi,ecx
        or   ecx,ecx
        jnz  cgv17
        jmp  cgv33
cgv18:  mov  edi,dword (4*cmlop)[esi]
        call cdgvl
cgv19:  mov  edi,dword (4*cmrop)[esi]
        call cdgvl
cgv20:  mov  ecx,dword (4*cmopn)[esi]
        jmp  cgv36
cgv21:  mov  edi,dword (4*cmlop)[esi]
        cmp  dword [edi],offset b_vr_
        jb   cgv22
        mov  edi,dword (4*cmrop)[esi]
        call cdgvl
        mov  ecx,dword (4*cmlop)[esi]
        add  ecx,4*vrsto
        jmp  cgv32
cgv22:  call expap
        .cgv23-dffnc
        mov  eax,dword (4*cmrop)[edi]
        mov  dword (4*cmlop)[esi],eax
        mov  edi,dword (4*cmlop)[edi]
        call cdgnm
        mov  edi,dword (4*cmlop)[esi]
        call cdgvl
        mov  ecx,offset opmn_
        call cdwrd
        mov  edi,dword (4*cmrop)[esi]
        call cdgvl
        mov  ecx,offset orpl_
        jmp  cgv32
cgv23:  mov  edx,esp
        call cdgnm
        jmp  cgv31
cgv24:  mov  edi,dword (4*cmlop)[esi]
        cmp  dword [edi],offset b_cmt
        jne  cgv18
        mov  ebx,dword (4*cmtyp)[edi]
        cmp  ebx,c_int
        je   cgv25
        cmp  ebx,c_neg
        je   cgv25
        cmp  ebx,c_fnc
        jne  cgv18
        mov  edi,dword (4*cmopn)[edi]
        cmp  dword dword ptr (4*vrlen)[edi],0
        jnz  cgv18
        mov  edi,dword (4*vrsvp)[edi]
        mov  ecx,dword (4*svbit)[edi]
        and  ecx,dword btprd
#        or   ecx,ecx         (optimized)
        jz   cgv18
cgv25:  mov  edi,dword (4*cmlop)[esi]
        call cdgvl
        mov  ecx,offset opop_
        call cdwrd
        mov  edi,dword (4*cmrop)[esi]
        call cdgvl
        jmp  cgv33
cgv26:  mov  edi,dword (4*cmlop)[esi]
        call cdgvl
cgv27:  mov  edi,dword (4*cmrop)[esi]
        call cdgnm
        mov  edi,dword (4*cmopn)[esi]
        cmp  dword [edi],offset o_kwv
        jne  cgv20
        or   edx,edx
        jnz  cgv20
        mov  edx,esp
        mov  edi,dword (4*cmrop)[esi]
        cmp  dword dword ptr (4*vrlen)[edi],0
        jnz  cgv20
        mov  edi,dword (4*vrsvp)[edi]
        mov  ecx,dword (4*svbit)[edi]
        and  ecx,dword btckw
#        or   ecx,ecx         (optimized)
        jz   cgv20
        xor  edx,edx
        jmp  cgv20
cgv28:  mov  ecx,offset onta_
        call cdwrd
        mov  ebx,dword cwcof
        call cdwrd
        mov  edi,dword (4*cmrop)[esi]
        call cdgvl
        mov  ecx,offset ontb_
        call cdwrd
        mov  edi,ebx
        add  edi,dword r_ccb
        mov  eax,dword cwcof
        mov  dword [edi],eax
        mov  ecx,offset ontc_
        jmp  cgv32
cgv29:  mov  edi,dword (4*cmlop)[esi]
        call cdgvl
cgv30:  mov  ebx,c_uo_
        sub  ebx,dword (4*cmtyp)[esi]
        mov  edi,dword (4*cmrop)[esi]
        call cdgvl
        mov  edi,dword (4*cmopn)[esi]
        mov  edi,dword (4*dvopn)[edi]
        sal  edi,2
        add  edi,offset r_uba
        sub  edi,4*vrfnc
        jmp  cgv12
cgv31:  mov  edx,esp
        jmp  cgv19
cgv32:  call cdwrd
cgv33:  mov  edx,esp
cgv34:  add  esp,4
        pop  ecx
        pop  esi
        pop  ebx
        or   edx,edx
        jnz  cgv35
        mov  edx,ecx
cgv35:  ret
cgv36:  call cdwrd
        or   edx,edx
        jnz  cgv34
        mov  ecx,offset orvl_
        call cdwrd
        mov  esi,dword [esp]
        call exbld
        xor  ebx,ebx
        call evalx
        .err_-299-dffnc
        mov  ecx,dword [edi]
        cmp  ecx,offset p_aaa
        jb   cgv37
        mov  ecx,offset olpt_
        call cdwrd
cgv37:  mov  ecx,edi
        call cdwrd
        xor  edx,edx
        jmp  cgv34
cdwrd:
        .global cdwrd
        push edi
        push ecx
cdwd1:  mov  edi,dword r_ccb
        or   edi,edi
        jnz  cdwd2
        mov  ecx,4*e_cbs
        call alloc
        mov  dword [edi],offset b_cct
        mov  dword cwcof,4*cccod
        mov  dword (4*cclen)[edi],ecx
        xor  eax,eax
        mov  dword (4*ccsln)[edi],eax
        mov  dword r_ccb,edi
cdwd2:  mov  ecx,dword cwcof
        add  ecx,4*num05
        cmp  ecx,dword (4*cclen)[edi]
        jb   cdwd4
        cmp  ecx,dword mxlen
        jae  cdwd5
        add  ecx,4*e_cbs
        push esi
        mov  esi,edi
        cmp  ecx,dword mxlen
        jb   cdwd3
        mov  ecx,dword mxlen
cdwd3:  call alloc
        mov  dword r_ccb,edi
        mov  eax,offset b_cct
        stosd
        mov  eax,ecx
        stosd
        mov  eax,dword (4*ccsln)[esi]
        stosd
        add  esi,4*ccuse
        mov  ecx,dword [esi]
        shr  ecx,2
        rep  movsd
        pop  esi
        jmp  cdwd1
cdwd4:  mov  ecx,dword cwcof
        add  ecx,4
        mov  dword cwcof,ecx
        mov  dword (4*ccuse)[edi],ecx
        sub  ecx,4
        add  edi,ecx
        pop  ecx
        mov  dword [edi],ecx
        pop  edi
        ret
cdwd5:  call err_0
        .byte 213
cmgen:
        .global cmgen
        mov  edi,esi
        add  edi,ebx
        mov  edi,dword [edi]
        call cdgvl
        add  ebx,4
        ret
cmpil:
        .global cmpil
        mov  ebx,cmnen
cmp00:  push 0
        dec  ebx
        jnz  cmp00
        mov  dword cmpxs,esp
cmp01:  mov  ebx,dword scnpt
        mov  dword scnse,ebx
        mov  ecx,offset ocer_
        call cdwrd
        cmp  ebx,dword scnil
        jb   cmp04
cmpce:  xor  edi,edi
        cmp  dword dword ptr cnind,0
        jnz  cmpc2
        cmp  dword stage,stgic
        jne  cmp02
cmpc2:  call readr
        or   edi,edi
        jz   cmp09
        call nexts
        mov  eax,dword cmpsn
        mov  dword lstsn,eax
        mov  eax,dword rdcln
        mov  dword cmpln,eax
        xor  eax,eax
        mov  dword scnpt,eax
        jmp  cmp04
cmp02:  mov  edi,dword r_cim
        mov  ebx,dword scnpt
        lea  edi,[cfp_f+edi+ebx]
cmp03:  mov  eax,dword scnpt
        cmp  eax,dword scnil
        jae  cmp09
        movzx edx,byte [edi]
        inc  edi
        inc  dword scnpt
        cmp  edx,ch_sm
        jne  cmp03
cmp04:  mov  edi,dword r_cim
        mov  ebx,dword scnpt
        mov  ecx,ebx
        lea  edi,[cfp_f+edi+ebx]
        movzx edx,byte [edi]
        inc  edi
        cmp  edx,ch_sm
        je   cmp12
        cmp  edx,ch_as
        je   cmpce
        cmp  edx,ch_mn
        je   cmp32
        mov  eax,dword r_cim
        mov  dword r_cmp,eax
        mov  esi,offset cmlab
        mov  dword r_cim,esi
        add  esi,cfp_f
        mov  [esi],dl
        inc  esi
        mov  edx,ch_sm
        mov  [esi],dl
        xor  esi,esi
        xor  eax,eax
        mov  dword scnpt,eax
        push dword scnil
        mov  dword scnil,num02
        call scane
        pop  dword scnil
        mov  edx,esi
        mov  esi,dword r_cmp
        mov  dword r_cim,esi
        mov  dword scnpt,ebx
        cmp  dword dword ptr scnbl,0
        jnz  cmp12
        mov  edi,esi
        lea  edi,[cfp_f+edi+ebx]
        cmp  edx,t_var
        je   cmp06
        cmp  edx,t_con
        je   cmp06
cmple:  mov  eax,dword r_cmp
        mov  dword r_cim,eax
        call err_0
        .byte 214
cmp05:  cmp  edx,ch_sm
        je   cmp07
        inc  ecx
        cmp  ecx,dword scnil
        je   cmp07
cmp06:  movzx edx,byte [edi]
        inc  edi
        cmp  edx,ch_ht
        je   cmp07
        cmp  edx,ch_bl
        jne  cmp05
cmp07:  mov  dword scnpt,ecx
        sub  ecx,ebx
#        or   ecx,ecx         (optimized)
        jz   cmp12
        xor  edi,edi
        call sbstr
        call gtnvr
        .err_-299-dffnc
        mov  dword (4*cmlbl)[esp],edi
        cmp  dword dword ptr (4*vrlen)[edi],0
        jnz  cmp11
        cmp  dword (4*vrsvp)[edi],offset v_end
        jne  cmp11
        add  dword stage,stgnd
        call scane
        cmp  esi,t_smc
        je   cmp10
        cmp  esi,t_var
        jne  cmp08
        cmp  dword (4*vrlbl)[edi],offset stndl
        je   cmp08
        mov  eax,dword (4*vrlbl)[edi]
        mov  dword (4*cmtra)[esp],eax
        call scane
        cmp  esi,t_smc
        je   cmp10
cmp08:  call err_0
        .byte 215
cmp09:  xor  edi,edi
        add  dword stage,stgnd
        cmp  dword stage,stgxe
        je   cmp10
        call err_0
        .byte 216
cmp10:  mov  ecx,offset ostp_
        call cdwrd
        jmp  cmpse
cmp11:  cmp  dword stage,stgic
        jne  cmp12
        cmp  dword (4*vrlbl)[edi],offset stndl
        je   cmp12
        xor  eax,eax
        mov  dword (4*cmlbl)[esp],eax
        call err_0
        .byte 217
cmp12:  xor  ebx,ebx
        call expan
        mov  dword (4*cmstm)[esp],edi
        xor  eax,eax
        mov  dword (4*cmsgo)[esp],eax
        xor  eax,eax
        mov  dword (4*cmfgo)[esp],eax
        xor  eax,eax
        mov  dword (4*cmcgo)[esp],eax
        call scane
        cmp  esi,t_col
        je   cmp13
        cmp  dword dword ptr cswno,0
        jnz  cmp18
        cmp  dword dword ptr (4*cmlbl)[esp],0
        jnz  cmp18
        mov  edi,dword (4*cmstm)[esp]
        mov  ecx,dword [edi]
        cmp  ecx,offset b_cmt
        je   cmp18
        cmp  ecx,offset b_vra
        jae  cmp18
        mov  esi,dword r_ccb
        mov  dword (4*ccuse)[esi],4*cccod
        mov  dword cwcof,4*cccod
        inc  dword cmpsn
        jmp  cmp01
cmp13:  mov  dword scngo,esp
        call scane
        cmp  esi,t_smc
        je   cmp31
        cmp  esi,t_sgo
        je   cmp14
        cmp  esi,t_fgo
        je   cmp16
        mov  dword scnrs,esp
        call scngf
        cmp  dword dword ptr (4*cmfgo)[esp],0
        jnz  cmp17
        mov  dword (4*cmfgo)[esp],edi
        jmp  cmp15
cmp14:  call scngf
        mov  dword (4*cmcgo)[esp],num01
cmp15:  cmp  dword dword ptr (4*cmsgo)[esp],0
        jnz  cmp17
        mov  dword (4*cmsgo)[esp],edi
        jmp  cmp13
cmp16:  call scngf
        mov  dword (4*cmcgo)[esp],num01
        cmp  dword dword ptr (4*cmfgo)[esp],0
        jnz  cmp17
        mov  dword (4*cmfgo)[esp],edi
        jmp  cmp13
cmp17:  call err_0
        .byte 218
cmp18:  xor  eax,eax
        mov  dword scnse,eax
        mov  edi,dword (4*cmstm)[esp]
        xor  ebx,ebx
        xor  edx,edx
        call expap
        .cmp19-dffnc
        mov  dword (4*cmopn)[edi],offset opms_
        mov  dword (4*cmtyp)[edi],c_pmt
cmp19:  call cdgvl
        mov  edi,dword (4*cmsgo)[esp]
        mov  ecx,edi
        or   edi,edi
        jz   cmp21
        xor  eax,eax
        mov  dword (4*cmsoc)[esp],eax
        cmp  edi,dword state
        ja   cmp20
        add  ecx,4*vrtra
        call cdwrd
        jmp  cmp22
cmp20:  cmp  edi,dword (4*cmfgo)[esp]
        je   cmp22
        xor  ebx,ebx
        call cdgcg
        jmp  cmp22
cmp21:  mov  eax,dword cwcof
        mov  dword (4*cmsoc)[esp],eax
        mov  ecx,offset ocer_
        call cdwrd
cmp22:  mov  edi,dword (4*cmfgo)[esp]
        mov  ecx,edi
        xor  eax,eax
        mov  dword (4*cmffc)[esp],eax
        or   edi,edi
        jz   cmp23
        add  ecx,4*vrtra
        cmp  edi,dword state
        jb   cmpse
        mov  ebx,dword cwcof
        mov  ecx,offset ogof_
        call cdwrd
        mov  ecx,offset ofif_
        call cdwrd
        call cdgcg
        mov  ecx,ebx
        mov  ebx,offset b_cdc
        jmp  cmp25
cmp23:  mov  ecx,offset ounf_
        mov  edx,dword cswfl
        or   edx,dword (4*cmcgo)[esp]
#        or   edx,edx         (optimized)
        jz   cmpse
        mov  dword (4*cmffc)[esp],esp
        mov  ecx,offset ocer_
cmpse:  mov  ebx,offset b_cds
cmp25:  mov  edi,dword r_ccb
        mov  esi,dword (4*cmlbl)[esp]
        or   esi,esi
        jz   cmp26
        xor  eax,eax
        mov  dword (4*cmlbl)[esp],eax
        mov  dword (4*vrlbl)[esi],edi
cmp26:  mov  dword [edi],ebx
        mov  dword (4*cdfal)[edi],ecx
        mov  esi,edi
        mov  ebx,dword (4*ccuse)[edi]
        mov  edx,dword (4*cclen)[edi]
        add  esi,ebx
        sub  edx,ebx
        mov  dword [esi],offset b_cct
        mov  dword (4*ccuse)[esi],4*cccod
        mov  dword cwcof,4*cccod
        mov  dword (4*cclen)[esi],edx
        mov  dword r_ccb,esi
        xor  eax,eax
        mov  dword (4*ccsln)[esi],eax
        mov  eax,dword cmpln
        mov  dword (4*cdsln)[edi],eax
        mov  eax,dword cmpsn
        mov  dword (4*cdstm)[edi],eax
        inc  dword cmpsn
        mov  esi,dword (4*cmpcd)[esp]
        cmp  dword dword ptr (4*cmffp)[esp],0
        jz   cmp27
        mov  dword (4*cdfal)[esi],edi
cmp27:  mov  ecx,dword (4*cmsop)[esp]
        or   ecx,ecx
        jz   cmp28
        add  esi,ecx
        mov  dword [esi],edi
        xor  esi,esi
cmp28:  mov  eax,dword (4*cmffc)[esp]
        mov  dword (4*cmffp)[esp],eax
        mov  eax,dword (4*cmsoc)[esp]
        mov  dword (4*cmsop)[esp],eax
        mov  dword (4*cmpcd)[esp],edi
        cmp  dword dword ptr (4*cmtra)[esp],0
        jnz  cmp29
        mov  dword (4*cmtra)[esp],edi
cmp29:  cmp  dword stage,stgce
        jb   cmp01
        cmp  dword dword ptr cswls,0
        jz   cmp30
        call listr
cmp30:  mov  edi,dword (4*cmtra)[esp]
        add  esp,4*cmnen
        ret
cmp31:  mov  ebx,dword (4*cmfgo)[esp]
        or   ebx,dword (4*cmsgo)[esp]
#        or   ebx,ebx         (optimized)
        jnz  cmp18
        call err_0
        .byte 219
cmp32:  inc  ebx
        call cncrd
        xor  eax,eax
        mov  dword scnse,eax
        jmp  cmpce
cncrd:
        .global cncrd
        mov  dword scnpt,ebx
        mov  ecx,ccnoc
        add  ecx,3+4*0
        shr  ecx,2
        mov  dword cnswc,ecx
cnc01:  mov  eax,dword scnpt
        cmp  eax,dword scnil
        jae  cnc09
        mov  edi,dword r_cim
        add  edi,cfp_f
        add  edi,dword scnpt
        movzx ecx,byte [edi]
        inc  edi
        cmp  cl,'a'
        jb   l0009
        cmp  cl,'z'
        ja   l0009
        sub  cl,32
l0009:
        cmp  ecx,ch_li
        je   cnc07
cnc0a:  mov  dword scncc,esp
        call scane
        xor  eax,eax
        mov  dword scncc,eax
        or   esi,esi
        jnz  cnc06
        mov  ecx,ccnoc
        cmp  dword (4*sclen)[edi],ecx
        jb   cnc08
        mov  esi,edi
        xor  ebx,ebx
        call sbstr
        mov  ecx,dword (4*sclen)[edi]
        call flstg
        mov  dword cnscc,edi
        mov  edi,offset ccnms
        xor  ebx,ebx
        mov  edx,cc_nc
cnc02:  mov  esi,dword cnscc
        mov  ecx,dword cnswc
        jmp  cnc04
cnc03:  add  edi,4
        add  esi,4
cnc04:  mov  eax,dword (4*schar)[esi]
        cmp  eax,dword [edi]
        jnz  cnc05
        loop cnc03
        mov  esi,ebx
        cmp  esi,cc_nc
        jge  cnc08
        jmp  dword l0010[esi*4]
        dseg_
l0010:
        .long cnc37
        .long cnc10
        .long cnc08
        .long cnc11
        .long cnc41
        .long cnc12
        .long cnc13
        .long cnc14
        .long cnc15
        .long cnc41
        .long cnc44
        .long cnc16
        .long cnc17
        .long cnc18
        .long cnc19
        .long cnc20
        .long cnc21
        .long cnc22
        .long cnc24
        .long cnc25
        .long cnc27
        .long cnc28
        .long cnc31
        .long cnc32
        .long cnc36
        dsegend_
        cseg_
cnc05:  add  edi,4
        loop cnc05
        inc  ebx
        dec  edx
        jnz  cnc02
        jmp  cnc08
cnc06:  call err_0
        .byte 247
cnc07:  movzx ecx,byte [edi]
        inc  edi
        cmp  cl,'a'
        jb   l0011
        cmp  cl,'z'
        ja   l0011
        sub  cl,32
l0011:
        cmp  ecx,ch_ln
        jne  cnc0a
        movzx ecx,byte [edi]
        cmp  ecx,ch_d0
        jb   cnc0a
        cmp  ecx,ch_d9
        ja   cnc0a
        add  dword scnpt,num02
        call scane
        push edi
        call gtsmi
        .cnc06-dffnc
        .cnc06-dffnc
        mov  dword cswin,edi
cnc08:  mov  ecx,dword scnpt
        call scane
        cmp  esi,t_cma
        je   cnc01
        mov  dword scnpt,ecx
cnc09:  ret
cnc10:  mov  dword cswdb,esp
        jmp  cnc08
cnc11:  call sysdm
        jmp  cnc09
cnc12:  cmp  dword dword ptr cswls,0
        jz   cnc09
        call prtps
        call listt
        jmp  cnc09
cnc13:  xor  eax,eax
        mov  dword cswer,eax
        jmp  cnc08
cnc14:  xor  eax,eax
        mov  dword cswex,eax
        jmp  cnc08
cnc15:  mov  dword cswfl,esp
        jmp  cnc08
cnc16:  mov  dword cswls,esp
        cmp  dword stage,stgic
        je   cnc08
        xor  eax,eax
        mov  dword lstpf,eax
        call listr
        jmp  cnc08
cnc17:  mov  dword cswer,esp
        jmp  cnc08
cnc18:  mov  dword cswex,esp
        jmp  cnc08
cnc19:  xor  eax,eax
        mov  dword cswfl,eax
        jmp  cnc08
cnc20:  xor  eax,eax
        mov  dword cswls,eax
        jmp  cnc08
cnc21:  mov  dword cswno,esp
        jmp  cnc08
cnc22:  xor  eax,eax
        mov  dword cswpr,eax
        jmp  cnc08
cnc24:  xor  eax,eax
        mov  dword cswno,eax
        jmp  cnc08
cnc25:  mov  dword cswpr,esp
        jmp  cnc08
cnc27:  xor  eax,eax
        mov  dword cswdb,eax
        jmp  cnc08
cnc28:  cmp  dword dword ptr cswls,0
        jz   cnc09
        call scane
        mov  edx,num01
        cmp  edi,t_smc
        je   cnc29
        push edi
        call gtsmi
        .cnc06-dffnc
        .cnc06-dffnc
        or   edx,edx
        jnz  cnc29
        mov  edx,num01
cnc29:  add  dword lstlc,edx
        mov  eax,dword lstlc
        cmp  eax,dword lstnp
        jb   cnc30
        call prtps
        call listt
        jmp  cnc09
cnc30:  call prtnl
        dec  edx
        jnz  cnc30
        jmp  cnc09
cnc31:  mov  dword cnr_t,offset r_stl
        jmp  cnc33
cnc32:  mov  dword r_stl,offset nulls
        mov  dword cnr_t,offset r_ttl
cnc33:  mov  edi,offset nulls
        mov  dword cnttl,esp
        mov  ebx,ccofs
        mov  ecx,dword scnil
        cmp  ecx,ebx
        jb   cnc34
        sub  ecx,ebx
        mov  esi,dword r_cim
        call sbstr
cnc34:  mov  esi,dword cnr_t
        mov  dword [esi],edi
        cmp  esi,offset r_stl
        je   cnc09
        cmp  dword dword ptr precl,0
        jnz  cnc09
        cmp  dword dword ptr prich,0
        jz   cnc09
        mov  esi,dword (4*sclen)[edi]
        mov  ecx,esi
        or   esi,esi
        jz   cnc35
        add  esi,num10
        cmp  esi,dword prlen
        ja   cnc09
        add  ecx,num04
cnc35:  mov  dword lstpo,ecx
        jmp  cnc09
cnc36:  call systt
        jmp  cnc08
cnc37:  call scane
        xor  edx,edx
        cmp  esi,t_smc
        je   cnc38
        push edi
        call gtsmi
        .cnc06-dffnc
        .cnc06-dffnc
cnc38:  mov  dword kvcas,edx
        jmp  cnc09
cnc41:  mov  dword scncc,esp
        call scane
        xor  eax,eax
        mov  dword scncc,eax
        cmp  esi,t_con
        jne  cnc06
        cmp  dword [edi],offset b_scl
        jne  cnc06
        mov  dword r_ifn,edi
        mov  esi,dword r_inc
        xor  ebx,ebx
        call tfind
        .err_-299-dffnc
        cmp  edi,offset inton
        je   cnc09
        mov  ebx,esp
        mov  edi,dword r_ifn
        call trimr
        mov  esi,dword r_inc
        mov  ebx,esp
        call tfind
        .err_-299-dffnc
        mov  dword (4*teval)[esi],offset inton
        inc  dword cnind
        mov  ecx,dword cnind
        cmp  ecx,ccinm
        ja   cnc42
        mov  esi,dword r_ifa
        add  ecx,vcvlb
        sal  ecx,2
        add  esi,ecx
        mov  eax,dword r_sfc
        mov  dword [esi],eax
        mov  esi,ecx
        mov  edx,dword rdnln
        call icbld
        add  esi,dword r_ifl
        mov  dword [esi],edi
        mov  ecx,dword cswin
        mov  esi,dword r_ifn
        call alocs
        call sysif
        .cnc43-dffnc
        xor  ebx,ebx
        call trimr
        mov  dword r_sfc,edi
        mov  edx,dword cmpsn
        call icbld
        mov  esi,dword r_sfn
        mov  ebx,esp
        call tfind
        .err_-299-dffnc
        mov  eax,dword r_sfc
        mov  dword (4*teval)[esi],eax
        xor  eax,eax
        mov  dword rdnln,eax
        cmp  dword stage,stgic
        je   cnc09
        cmp  dword cnind,num01
        jne  cnc09
        mov  eax,dword r_cim
        mov  dword r_ici,eax
        mov  eax,dword scnpt
        mov  dword cnspt,eax
        mov  eax,dword scnil
        mov  dword cnsil,eax
        jmp  cnc09
cnc42:  call err_1
        .byte 28
cnc43:  mov  dword dnamp,edi
        call err_1
        .byte 29
cnc44:  call scane
        cmp  esi,t_con
        jne  cnc06
        cmp  dword [edi],offset b_icl
        jne  cnc06
        mov  edx,dword (4*icval)[edi]
        or   edx,edx
        jle  cnc06
        cmp  dword stage,stgic
        je   cnc45
        mov  dword cmpln,edx
        jmp  cnc46
cnc45:  sub  edx,dword intv1
        mov  dword rdnln,edx
cnc46:  mov  dword scncc,esp
        call scane
        xor  eax,eax
        mov  dword scncc,eax
        cmp  esi,t_smc
        je   cnc47
        cmp  esi,t_con
        jne  cnc06
        cmp  dword [edi],offset b_scl
        jne  cnc06
        call newfn
        jmp  cnc09
cnc47:  dec  dword scnpt
        jmp  cnc09
dffnc:
        .global dffnc
        cmp  dword [esi],offset b_efc
        jne  dffn1
        inc  dword (4*efuse)[esi]
dffn1:  mov  ecx,edi
        mov  edi,dword (4*vrfnc)[edi]
        cmp  dword [edi],offset b_efc
        jne  dffn2
        mov  ebx,dword (4*efuse)[edi]
        dec  ebx
        mov  dword (4*efuse)[edi],ebx
        or   ebx,ebx
        jnz  dffn2
        call sysul
dffn2:  mov  edi,ecx
        mov  ecx,esi
        cmp  edi,offset r_yyy
        jb   dffn3
        cmp  dword dword ptr (4*vrlen)[edi],0
        jnz  dffn3
        mov  esi,dword (4*vrsvp)[edi]
        mov  ebx,dword (4*svbit)[esi]
        and  ebx,dword btfnc
#        or   ebx,ebx         (optimized)
        jz   dffn3
        call err_0
        .byte 248
dffn3:  mov  dword (4*vrfnc)[edi],ecx
        mov  esi,ecx
        ret
dtach:
        .global dtach
        mov  dword dtcnb,esi
        add  esi,ecx
        mov  dword dtcnm,esi
dtch1:  mov  edi,esi
dtch2:  mov  esi,dword [esi]
        cmp  dword [esi],offset b_trt
        jne  dtch6
        mov  ecx,dword (4*trtyp)[esi]
        cmp  ecx,trtin
        je   dtch3
        cmp  ecx,trtou
        je   dtch3
        add  esi,4*trnxt
        jmp  dtch1
dtch3:  mov  eax,dword (4*trval)[esi]
        mov  dword [edi],eax
        mov  ecx,esi
        mov  ebx,edi
        mov  esi,dword (4*trtrf)[esi]
        or   esi,esi
        jz   dtch5
        cmp  dword [esi],offset b_trt
        jne  dtch5
dtch4:  mov  edi,esi
        mov  esi,dword (4*trtrf)[esi]
        or   esi,esi
        jz   dtch5
        mov  edx,dword (4*ionmb)[esi]
        add  edx,dword (4*ionmo)[esi]
        cmp  edx,dword dtcnm
        jne  dtch4
        mov  eax,dword (4*trtrf)[esi]
        mov  dword (4*trtrf)[edi],eax
dtch5:  mov  esi,ecx
        mov  edi,ebx
        add  esi,4*trval
        jmp  dtch2
dtch6:  mov  edi,dword dtcnb
        call setvr
        ret
dtype:
        .global dtype
        cmp  dword [edi],offset b_pdt
        je   dtyp1
        mov  edi,dword [edi]
        movzx edi,byte [edi-1]
        sal  edi,2
        mov  edi,scnmt[edi]
        ret
dtyp1:  mov  edi,dword (4*pddfp)[edi]
        mov  edi,dword (4*dfnam)[edi]
        ret
dumpr:
        .global dumpr
        or   edi,edi
        jz   dmp28
        cmp  edi,num03
        ja   dmp29
        xor  esi,esi
        xor  ebx,ebx
        mov  dword dmarg,edi
        xor  eax,eax
        mov  dword dnams,eax
        call gbcol
        call prtpg
        mov  edi,offset dmhdv
        call prtst
        call prtnl
        call prtnl
        xor  eax,eax
        mov  dword dmvch,eax
        mov  ecx,dword hshtb
dmp00:  mov  edi,ecx
        add  ecx,4
        sub  edi,4*vrnxt
dmp01:  mov  edi,dword (4*vrnxt)[edi]
        or   edi,edi
        jz   dmp09
        mov  esi,edi
dmp02:  mov  esi,dword (4*vrval)[esi]
        cmp  dword dmarg,num03
        je   dmp2a
        cmp  esi,offset nulls
        je   dmp01
dmp2a:  cmp  dword [esi],offset b_trt
        je   dmp02
        mov  edx,edi
        add  edi,4*vrsof
        cmp  dword dword ptr (4*sclen)[edi],0
        jnz  dmp03
        mov  edi,dword (4*vrsvo)[edi]
dmp03:  mov  ebx,edi
        mov  dword dmpsv,ecx
        mov  ecx,offset dmvch
dmp04:  mov  dword dmpch,ecx
        mov  esi,ecx
        mov  edi,dword [esi]
        or   edi,edi
        jz   dmp08
        add  edi,4*vrsof
        cmp  dword dword ptr (4*sclen)[edi],0
        jnz  dmp05
        mov  edi,dword (4*vrsvo)[edi]
dmp05:  mov  esi,ebx
        mov  ecx,dword (4*sclen)[esi]
        add  esi,cfp_f
        cmp  ecx,dword (4*sclen)[edi]
        ja   dmp06
        add  edi,cfp_f
        repe cmpsb
        mov  esi,0
        mov  edi,esi
        ja   dmp07
        jb   dmp08
        jmp  dmp08
dmp06:  mov  ecx,dword (4*sclen)[edi]
        add  edi,cfp_f
        repe cmpsb
        mov  esi,0
        mov  edi,esi
        ja   dmp07
        jb   dmp08
dmp07:  mov  esi,dword dmpch
        mov  ecx,dword [esi]
        jmp  dmp04
dmp08:  mov  esi,dword dmpch
        mov  ecx,dword dmpsv
        mov  edi,edx
        mov  eax,dword [esi]
        mov  dword (4*vrget)[edi],eax
        mov  dword [esi],edi
        jmp  dmp01
dmp09:  cmp  ecx,dword hshte
        jne  dmp00
dmp10:  mov  edi,dword dmvch
        or   edi,edi
        jz   dmp11
        mov  eax,dword [edi]
        mov  dword dmvch,eax
        call setvr
        mov  esi,edi
        mov  ecx,4*vrval
        call prtnv
        jmp  dmp10
dmp11:  call prtnl
        call prtnl
        mov  edi,offset dmhdk
        call prtst
        call prtnl
        call prtnl
        mov  esi,offset vdmkw
dmp12:  lodsd
        mov  edi,eax
        or   edi,edi
        jz   dmp13
        cmp  edi,num01
        je   dmp12
        mov  ecx,ch_am
        call prtch
        call prtst
        mov  ecx,dword (4*svlen)[edi]
        add  ecx,3+4*svchs
        and  ecx,-4
        add  edi,ecx
        mov  eax,dword [edi]
        mov  dword dmpkn,eax
        mov  edi,offset tmbeb
        call prtst
        mov  dword dmpsv,esi
        mov  esi,offset dmpkb
        mov  dword [esi],offset b_kvt
        mov  dword (4*kvvar)[esi],offset trbkv
        mov  ecx,4*kvvar
        call acess
        .err_-299-dffnc
        call prtvl
        call prtnl
        mov  esi,dword dmpsv
        jmp  dmp12
dmp13:  cmp  dword dmarg,num01
        je   dmp27
        mov  edi,dword dnamb
dmp14:  cmp  edi,dword dnamp
        je   dmp27
        mov  ecx,dword [edi]
        cmp  ecx,offset b_vct
        je   dmp16
        cmp  ecx,offset b_art
        je   dmp17
        cmp  ecx,offset b_pdt
        je   dmp18
        cmp  ecx,offset b_tbt
        je   dmp19
dmp15:  call blkln
        add  edi,ecx
        jmp  dmp14
dmp16:  mov  ebx,4*vcvls
        jmp  dmp19
dmp17:  mov  ebx,dword (4*arofs)[edi]
        add  ebx,4
        jmp  dmp19
dmp18:  mov  ebx,4*pdfld
dmp19:  cmp  dword dword ptr (4*idval)[edi],0
        jz   dmp15
        call blkln
        mov  esi,edi
        mov  dword dmpsv,ecx
        mov  ecx,ebx
        call prtnl
        mov  dword dmpsa,ecx
        call prtvl
        mov  ecx,dword dmpsa
        call prtnl
        cmp  dword [edi],offset b_tbt
        je   dmp22
        sub  ecx,4
dmp20:  mov  edi,esi
        add  ecx,4
        add  edi,ecx
        cmp  ecx,dword dmpsv
        je   dmp14
        sub  edi,4*vrval
dmp21:  mov  edi,dword (4*vrval)[edi]
        cmp  dword dmarg,num03
        je   dmp2b
        cmp  edi,offset nulls
        je   dmp20
dmp2b:  cmp  dword [edi],offset b_trt
        je   dmp21
        call prtnv
        jmp  dmp20
dmp22:  mov  edx,4*tbbuk
        mov  ecx,4*teval
dmp23:  push esi
        add  esi,edx
        add  edx,4
        sub  esi,4*tenxt
dmp24:  mov  esi,dword (4*tenxt)[esi]
        cmp  esi,dword [esp]
        je   dmp26
        mov  edi,esi
dmp25:  mov  edi,dword (4*teval)[edi]
        cmp  edi,offset nulls
        je   dmp24
        cmp  dword [edi],offset b_trt
        je   dmp25
        mov  dword dmpsv,edx
        call prtnv
        mov  edx,dword dmpsv
        jmp  dmp24
dmp26:  pop  esi
        cmp  edx,dword (4*tblen)[esi]
        jne  dmp23
        mov  edi,esi
        add  edi,edx
        jmp  dmp14
dmp27:  call prtpg
dmp28:  ret
dmp29:  call sysdm
        jmp  dmp28
ermsg:
        .global ermsg
        mov  ecx,dword kvert
        mov  edi,offset ermms
        call prtst
        call ertex
        add  ecx,thsnd
        mov  edx,ecx
        mov  ebx,dword profs
        call prtin
        mov  esi,dword prbuf
        lea  esi,[cfp_f+esi+ebx]
        mov  ecx,ch_bl
        mov  [esi],cl
        xor  esi,esi
        mov  ecx,edi
        mov  edi,offset ermns
        call prtst
        mov  edi,ecx
        call prtst
        call prtis
        call prtis
        ret
ertex:
        .global ertex
        mov  dword ertwa,ecx
        mov  dword ertwb,ebx
        call sysem
        mov  esi,edi
        mov  ecx,dword (4*sclen)[edi]
        or   ecx,ecx
        jz   ert02
        xor  ebx,ebx
        call sbstr
        mov  dword r_etx,edi
ert01:  mov  ebx,dword ertwb
        mov  ecx,dword ertwa
        ret
ert02:  mov  edi,dword r_etx
        jmp  ert01
evali:
        .global evali
        call evalp
        .evli1-dffnc
        push esi
        mov  esi,dword (4*pthen)[edi]
        mov  dword evlio,edi
        mov  dword evlif,edx
        call gtsmi
        .evli2-dffnc
        .evli3-dffnc
        mov  dword evliv,edi
        mov  edi,offset evlin
        mov  dword [edi],offset p_len
        mov  dword (4*pthen)[edi],esi
        pop  eax
        jmp  exi__4
evli1:  pop  eax
        jmp  exi__3
evli2:  pop  eax
        jmp  exi__1
evli3:  pop  eax
        jmp  exi__2
evalp:
        .global evalp
        mov  esi,dword (4*parm1)[edi]
        cmp  dword [esi],offset b_exl
        je   evlp1
        mov  esi,dword (4*sevar)[esi]
        mov  esi,dword (4*vrval)[esi]
        mov  ecx,dword [esi]
        cmp  ecx,offset b_t__
        ja   evlp3
evlp1:  cmp  esp,lowspmin
        jb   sec06
        push edi
        push ebx
        push dword r_pms
        push dword pmssl
        push dword pmdfl
        push dword pmhbs
        mov  edi,dword (4*parm1)[edi]
evlp2:  xor  ebx,ebx
        call evalx
        .evlp4-dffnc
        mov  ecx,dword [edi]
        cmp  ecx,offset b_e__
        jb   evlp2
        mov  esi,edi
        pop  dword pmhbs
        pop  dword pmdfl
        pop  dword pmssl
        pop  dword r_pms
        pop  ebx
        pop  edi
        mov  edx,edi
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
evlp3:  xor  edx,edx
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
evlp4:  pop  dword pmhbs
        pop  dword pmdfl
        pop  dword pmssl
        pop  dword r_pms
        add  esp,4*num02
        pop  eax
        jmp  exi__1
evals:
        .global evals
        call evalp
        .evls1-dffnc
        push dword (4*pthen)[edi]
        push ebx
        push esi
        xor  ebx,ebx
        xor  edx,edx
        mov  esi,offset p_brk
        call patst
        .evls2-dffnc
        pop  ebx
        pop  dword (4*pthen)[edi]
        pop  eax
        jmp  exi__3
evls1:  pop  eax
        jmp  exi__2
evls2:  add  esp,4*num02
        pop  eax
        jmp  exi__1
evalx:
        .global evalx
        cmp  dword [edi],offset b_exl
        je   evlx2
        mov  esi,dword (4*sevar)[edi]
        mov  ecx,4*vrval
        or   ebx,ebx
        jnz  evlx1
        call acess
        .evlx9-dffnc
evlx1:  pop  eax
        lea  eax,[eax+2]
        jmp  eax
evlx2:  mov  edx,ebp
        mov  ecx,dword r_cod
        sub  edx,ecx
        push ecx
        push edx
        push dword flptr
        push ebx
        push 4*exflc
        mov  eax,dword flptr
        mov  dword gtcef,eax
        mov  eax,dword r_cod
        mov  dword r_gtc,eax
        mov  dword flptr,esp
        mov  dword r_cod,edi
        mov  eax,dword kvstn
        mov  dword (4*exstm)[edi],eax
        add  edi,4*excod
        mov  ebp,edi
        cmp  dword stage,stgxt
        jne  evlx0
        mov  dword stage,stgee
evlx0:  xor  esi,esi
        mov  edi,[ebp]
        add  ebp,4
        jmp  dword [edi]
evlx3:  pop  edi
        cmp  dword dword ptr (4*num01)[esp],0
        jz   evlx5
        call err_0
        .byte 249
evlx4:  pop  ecx
        pop  esi
        cmp  dword dword ptr (4*num01)[esp],0
        jnz  evlx5
        call acess
        .evlx6-dffnc
evlx5:  xor  ebx,ebx
        jmp  evlx7
evlx6:  mov  ebx,esp
evlx7:  cmp  dword stage,stgee
        jne  evlx8
        mov  dword stage,stgxt
evlx8:  add  esp,4*num02
        pop  dword flptr
        pop  edx
        add  edx,dword [esp]
        pop  dword r_cod
        mov  ebp,edx
        or   ebx,ebx
        jz   evlx1
evlx9:  pop  eax
        jmp  exi__1
exbld:
        .global exbld
        mov  ecx,esi
        sub  ecx,4*excod
        push ecx
        mov  ecx,dword cwcof
        sub  ecx,esi
        add  ecx,4*exsi_
        call alloc
        push edi
        mov  dword (4*extyp)[edi],offset b_exl
        xor  eax,eax
        mov  dword (4*exstm)[edi],eax
        mov  eax,dword cmpln
        mov  dword (4*exsln)[edi],eax
        mov  dword (4*exlen)[edi],ecx
        mov  dword (4*exflc)[edi],offset ofex_
        add  edi,4*exsi_
        mov  dword cwcof,esi
        add  esi,dword r_ccb
        sub  ecx,4*exsi_
        push ecx
        shr  ecx,2
        rep  movsd
        pop  ecx
        shr  ecx,2
        mov  esi,dword [esp]
        add  esi,4*excod
        mov  ebx,dword (4*num01)[esp]
exbl1:  lodsd
        mov  edi,eax
        cmp  edi,offset osla_
        je   exbl3
        cmp  edi,offset onta_
        je   exbl3
        loop exbl1
exbl2:  pop  edi
        pop  esi
        ret
exbl3:  sub  dword [esi],ebx
        lea  esi,[esi+4]
        loop exbl4
exbl4:  loop exbl5
exbl5:  lodsd
        mov  edi,eax
        cmp  edi,offset osla_
        je   exbl3
        cmp  edi,offset oslb_
        je   exbl3
        cmp  edi,offset oslc_
        je   exbl3
        cmp  edi,offset onta_
        je   exbl3
        loop exbl5
        jmp  exbl2
expan:
        .global expan
        push 0
        xor  ecx,ecx
        xor  edx,edx
exp01:  call scane
        add  esi,ecx
        jmp  dword l0012[esi*4]
        dseg_
l0012:
        .long exp27
        .long exp27
        .long exp04
        .long exp06
        .long exp06
        .long exp04
        .long exp08
        .long exp08
        .long exp09
        .long exp02
        .long exp05
        .long exp11
        .long exp10
        .long exp10
        .long exp04
        .long exp03
        .long exp03
        .long exp04
        .long exp03
        .long exp03
        .long exp04
        .long exp05
        .long exp05
        .long exp26
        .long exp02
        .long exp05
        .long exp12
        .long exp02
        .long exp05
        .long exp18
        .long exp02
        .long exp05
        .long exp19
        .long exp02
        .long exp05
        .long exp19
        dsegend_
        cseg_
exp02:  mov  dword scnrs,esp
        mov  edi,offset nulls
exp03:  push edi
        mov  ecx,num02
        jmp  exp01
exp04:  mov  dword scnrs,esp
        mov  edi,offset opdvc
        or   ebx,ebx
        jz   exp4a
        mov  edi,offset opdvp
exp4a:  cmp  dword dword ptr scnbl,0
        jnz  exp26
        call err_0
        .byte 220
exp05:  call err_0
        .byte 221
exp06:  mov  esi,num04
        xor  edi,edi
exp07:  push edi
        push edx
        push ebx
        cmp  esp,lowspmin
        jb   sec06
        xor  ecx,ecx
        mov  ebx,esi
        mov  edx,num01
        jmp  exp01
exp08:  call err_0
        .byte 222
exp09:  pop  edi
        mov  esi,num03
        jmp  exp07
exp10:  mov  esi,num05
        jmp  exp07
exp11:  inc  edx
        call expdm
        push 0
        xor  ecx,ecx
        cmp  ebx,num02
        ja   exp01
        call err_0
        .byte 223
exp12:  cmp  ebx,num01
        je   exp20
        cmp  ebx,num05
        je   exp13
        cmp  ebx,num04
        je   exp14
        call err_0
        .byte 224
exp13:  mov  esi,c_fnc
        jmp  exp15
exp14:  cmp  edx,num01
        je   exp17
        mov  esi,c_sel
exp15:  call expdm
        mov  ecx,edx
        add  ecx,cmvls
        sal  ecx,2
        call alloc
        mov  dword [edi],offset b_cmt
        mov  dword (4*cmtyp)[edi],esi
        mov  dword (4*cmlen)[edi],ecx
        add  edi,ecx
exp16:  lea  edi,[edi-4]
        pop  dword [edi]
        pop  ebx
        dec  edx
        jnz  exp16
        sub  edi,4*cmvls
        pop  edx
        mov  eax,dword [esp]
        mov  dword (4*cmopn)[edi],eax
        mov  dword [esp],edi
        mov  ecx,num02
        jmp  exp01
exp17:  call expdm
        pop  edi
        pop  ebx
        pop  edx
        mov  dword [esp],edi
        mov  ecx,num02
        jmp  exp01
exp18:  mov  esi,c_arr
        cmp  ebx,num03
        je   exp15
        cmp  ebx,num02
        je   exp20
        call err_0
        .byte 225
exp19:  mov  dword scnrs,esp
        mov  esi,ebx
        jmp  dword l0013[esi*4]
        dseg_
l0013:
        .long exp20
        .long exp22
        .long exp23
        .long exp24
        .long exp21
        .long exp21
        dsegend_
        cseg_
exp20:  call expdm
        pop  edi
        add  esp,4
        ret
exp21:  call err_0
        .byte 226
exp22:  call err_0
        .byte 227
exp23:  call err_0
        .byte 228
exp24:  call err_0
        .byte 229
exp25:  mov  dword expsv,edi
        call expop
        mov  edi,dword expsv
exp26:  mov  esi,dword (4*num01)[esp]
        cmp  esi,num05
        jbe  exp27
        mov  eax,dword (4*dvrpr)[edi]
        cmp  eax,dword (4*dvlpr)[esi]
        jb   exp25
exp27:  push edi
        cmp  esp,lowspmin
        jb   sec06
        mov  ecx,num01
        cmp  edi,offset opdvs
        jne  exp01
        xor  ecx,ecx
        jmp  exp01
expap:
        .global expap
        push esi
        cmp  dword [edi],offset b_cmt
        jne  expp2
        mov  ecx,dword (4*cmtyp)[edi]
        cmp  ecx,c_cnc
        je   expp1
        cmp  ecx,c_pmt
        je   expp1
        cmp  ecx,c_alt
        jne  expp2
        mov  esi,dword (4*cmlop)[edi]
        cmp  dword [esi],offset b_cmt
        jne  expp2
        cmp  dword (4*cmtyp)[esi],c_cnc
        jne  expp2
        mov  eax,dword (4*cmrop)[esi]
        mov  dword (4*cmlop)[edi],eax
        mov  dword (4*cmrop)[esi],edi
        mov  edi,esi
expp1:  pop  esi
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
expp2:  pop  esi
        pop  eax
        jmp  exi__1
expdm:
        .global expdm
        pop  prc_+12
        mov  dword r_exs,esi
exdm1:  cmp  dword (4*num01)[esp],num05
        jbe  exdm2
        call expop
        jmp  exdm1
exdm2:  mov  esi,dword r_exs
        xor  eax,eax
        mov  dword r_exs,eax
        jmp  [prc_+12]
expop:
        .global expop
        pop  prc_+16
        mov  edi,dword (4*num01)[esp]
        cmp  dword (4*dvlpr)[edi],lluno
        je   expo2
        mov  ecx,4*cmbs_
        call alloc
        pop  dword (4*cmrop)[edi]
        pop  esi
        mov  eax,dword [esp]
        mov  dword (4*cmlop)[edi],eax
expo1:  mov  dword [edi],offset b_cmt
        mov  eax,dword (4*dvtyp)[esi]
        mov  dword (4*cmtyp)[edi],eax
        mov  dword (4*cmopn)[edi],esi
        mov  dword (4*cmlen)[edi],ecx
        mov  dword [esp],edi
        jmp  [prc_+16]
expo2:  mov  ecx,4*cmus_
        call alloc
        pop  dword (4*cmrop)[edi]
        mov  esi,dword [esp]
        jmp  expo1
filnm:
        .global filnm
        push ebx
        or   edx,edx
        jz   filn3
        mov  esi,dword r_sfn
        or   esi,esi
        jz   filn3
        mov  ebx,dword (4*tbbuk)[esi]
        cmp  ebx,dword r_sfn
        je   filn3
        push edi
        mov  edi,ebx
        push edx
filn1:  mov  esi,edi
        mov  edi,dword (4*tesub)[esi]
        mov  edx,dword (4*icval)[edi]
        cmp  dword [esp],edx
        jb   filn2
        mov  ebx,esi
        mov  edi,dword (4*tenxt)[esi]
        cmp  edi,dword r_sfn
        jne  filn1
filn2:  mov  esi,ebx
        mov  esi,dword (4*teval)[esi]
        pop  edx
        pop  edi
        pop  ebx
        ret
filn3:  pop  ebx
        mov  esi,offset nulls
        ret
flstg:
        .global flstg
        cmp  dword dword ptr kvcas,0
        jz   fst99
        push esi
        push edi
        call alocs
        mov  esi,dword [esp]
        push edi
        add  esi,cfp_f
        add  edi,cfp_f
        push 0
fst01:  movzx ecx,byte [esi]
        inc  esi
        cmp  ecx,ch__a
        jb   fst02
        cmp  ecx,ch___
        ja   fst02
        cmp  cl,'a'
        jb   l0014
        cmp  cl,'z'
        ja   l0014
        sub  cl,32
l0014:
        mov  dword [esp],esp
fst02:  mov  al,cl
        stosb
        dec  edx
        jnz  fst01
        pop  edi
        or   edi,edi
        jnz  fst10
        pop  dword dnamp
        pop  edi
        jmp  fst20
fst10:  pop  edi
        add  esp,4
fst20:  mov  ecx,dword (4*sclen)[edi]
        pop  esi
fst99:  ret
gbcol:
        .global gbcol
        cmp  dword dword ptr dmvch,0
        jnz  gbc14
        mov  dword gbcfl,esp
        mov  dword gbsva,ecx
        mov  dword gbsvb,ebx
        mov  dword gbsvc,edx
        push esi
        mov  ecx,ebp
        sub  ecx,dword r_cod
        mov  ebp,ecx
        or   ebx,ebx
        jz   gbc0a
        xor  eax,eax
        mov  dword dnams,eax
gbc0a:  mov  ecx,dword dnamb
        add  ecx,dword dnams
        mov  dword gbcsd,ecx
        mov  edi,esp
        mov  ecx,dword dnamb
        mov  ebx,dword dnamp
        mov  edx,dword dname
        call sysgc
        mov  edi,esp
        mov  esi,dword stbas
        cmp  esi,edi
        jae  gbc00
        mov  edi,esi
        mov  esi,esp
gbc00:  call gbcpf
        mov  edi,offset r_aaa
        mov  esi,offset r_yyy
        call gbcpf
        mov  ecx,dword hshtb
gbc01:  mov  esi,ecx
        add  ecx,4
        mov  dword gbcnm,ecx
gbc02:  mov  edi,dword [esi]
        or   edi,edi
        jz   gbc03
        mov  esi,edi
        add  edi,4*vrval
        add  esi,4*vrnxt
        call gbcpf
        jmp  gbc02
gbc03:  mov  ecx,dword gbcnm
        cmp  ecx,dword hshte
        jne  gbc01
        mov  edi,dword dnamb
        xor  ebx,ebx
gbc04:  cmp  edi,dword gbcsd
        je   gbc4c
        mov  ecx,dword [edi]
        test cl,1
        jne  gbc4b
        dec  ecx
        mov  dword [edi],ecx
        call blkln
        add  edi,ecx
        jmp  gbc04
gbc4b:  call blkln
        add  edi,ecx
        add  ebx,ecx
        jmp  gbc04
gbc4c:  mov  dword gbcsf,ebx
        mov  edx,edi
        add  edx,dword gbsvb
        xor  eax,eax
        mov  dword gbcnm,eax
        mov  dword gbclm,offset gbcnm
        mov  dword gbcns,edi
gbc05:  cmp  edi,dword dnamp
        je   gbc07
        mov  ecx,dword [edi]
        test cl,1
        jne  gbc07
gbc06:  mov  esi,ecx
        mov  ecx,dword [esi]
        mov  dword [esi],edx
        test cl,1
        je   gbc06
        mov  dword [edi],ecx
        call blkln
        add  edi,ecx
        add  edx,ecx
        jmp  gbc05
gbc07:  mov  ecx,edi
        mov  esi,dword gbclm
        sub  ecx,dword (4*num01)[esi]
        mov  dword (4*num01)[esi],ecx
gbc08:  cmp  edi,dword dnamp
        je   gbc10
        mov  ecx,dword [edi]
        test cl,1
        je   gbc09
        call blkln
        add  edi,ecx
        jmp  gbc08
gbc09:  sub  edi,4*num02
        mov  esi,dword gbclm
        mov  dword [esi],edi
        xor  eax,eax
        mov  dword [edi],eax
        mov  dword gbclm,edi
        mov  esi,edi
        add  edi,4*num02
        mov  dword (4*num01)[esi],edi
        jmp  gbc06
gbc10:  mov  edi,dword gbcsd
        add  edi,dword gbcns
gbc11:  mov  esi,dword gbcnm
        or   esi,esi
        jz   gbc12
        lodsd
        mov  dword gbcnm,eax
        lodsd
        mov  ecx,eax
        shr  ecx,2
        rep  movsd
        jmp  gbc11
gbc12:  mov  dword dnamp,edi
        mov  ebx,dword gbsvb
        or   ebx,ebx
        jz   gbc13
        mov  esi,edi
        add  edi,ebx
        mov  dword dnamp,edi
        mov  ecx,esi
        sub  ecx,dword dnamb
        add  dword dnamb,ebx
        shr  ecx,2
        std
        lea  esi,[esi-4]
        lea  edi,[edi-4]
        rep  movsd
        cld
gbc13:  xor  edi,edi
        mov  dword gbcfl,edi
        mov  ecx,dword dnamb
        mov  ebx,dword dnamp
        mov  edx,dword dname
        call sysgc
        mov  dword gbcia,edx
        xor  edi,edi
        mov  ebx,dword gbcsf
        shr  ebx,2
        mov  edx,ebx
        imul edx,dword gbsed
        jo   gb13a
        mov  ebx,dword dnamp
        sub  ebx,dword dnamb
        shr  ebx,2
        mov  dword gbcsf,ebx
        sub  edx,dword gbcsf
#        or   edx,edx         (optimized)
        jg   gb13a
        mov  edi,dword dnamp
        sub  edi,dword dnamb
gb13a:  mov  edx,dword gbcia
        mov  ecx,dword gbsva
        mov  ebx,dword gbsvb
        mov  edx,ebp
        add  edx,dword r_cod
        mov  ebp,edx
        mov  edx,dword gbsvc
        pop  esi
        inc  dword gbcnt
        ret
gbc14:  inc  dword errft
        call err_0
        .byte 250
gbcpf:
        .global gbcpf
        push 0
        push esi
gpf01:  mov  esi,dword [edi]
        mov  edx,edi
        cmp  esi,dword dnamb
        jb   gpf2a
        cmp  esi,dword dnamp
        jae  gpf2a
        mov  ecx,dword [esi]
        cmp  esi,dword gbcsd
        jb   gpf1a
        mov  dword [esi],edi
        mov  dword [edi],ecx
gpf1a:  test cl,1
        jne  gpf03
gpf02:  mov  edi,edx
gpf2a:  add  edi,4
        cmp  edi,dword [esp]
        jne  gpf01
        pop  esi
        pop  edi
        or   edi,edi
        jnz  gpf2a
        ret
gpf03:  cmp  esi,dword gbcsd
        jae  gpf3a
        inc  dword [esi]
gpf3a:  mov  edi,esi
        mov  esi,ecx
        movzx esi,byte [esi-1]
        jmp  dword l0015[esi*4]
        dseg_
l0015:
        .long gpf06
        .long gpf19
        .long gpf17
        .long gpf02
        .long gpf10
        .long gpf10
        .long gpf12
        .long gpf12
        .long gpf02
        .long gpf02
        .long gpf02
        .long gpf08
        .long gpf08
        .long gpf02
        .long gpf09
        .long gpf02
        .long gpf13
        .long gpf16
        .long gpf02
        .long gpf07
        .long gpf04
        .long gpf02
        .long gpf02
        .long gpf02
        .long gpf10
        .long gpf11
        .long gpf02
        .long gpf14
        .long gpf15
        dsegend_
        cseg_
gpf04:  mov  ecx,dword (4*cmlen)[edi]
        mov  ebx,4*cmtyp
gpf05:  add  ecx,edi
        add  edi,ebx
        push edx
        push ecx
        cmp  esp,lowspmin
        jb   sec06
        jmp  gpf01
gpf06:  mov  ecx,dword (4*arlen)[edi]
        mov  ebx,dword (4*arofs)[edi]
        jmp  gpf05
gpf07:  mov  ecx,dword (4*ccuse)[edi]
        mov  ebx,4*ccuse
        jmp  gpf05
gpf19:  mov  ecx,dword (4*cdlen)[edi]
        mov  ebx,4*cdfal
        jmp  gpf05
gpf08:  mov  ecx,dword (4*offs2)[edi]
        mov  ebx,4*offs3
        jmp  gpf05
gpf09:  mov  ecx,dword (4*xrlen)[edi]
        mov  ebx,4*xrptr
        jmp  gpf05
gpf10:  mov  ecx,4*offs2
        mov  ebx,4*offs1
        jmp  gpf05
gpf11:  mov  ecx,4*ffofs
        mov  ebx,4*ffnxt
        jmp  gpf05
gpf12:  mov  ecx,4*parm2
        mov  ebx,4*pthen
        jmp  gpf05
gpf13:  mov  esi,dword (4*pddfp)[edi]
        mov  ecx,dword (4*dfpdl)[esi]
        mov  ebx,4*pdfld
        jmp  gpf05
gpf14:  mov  ecx,4*pfarg
        mov  ebx,4*pfcod
        jmp  gpf05
gpf15:  mov  ecx,4*tesi_
        mov  ebx,4*tesub
        jmp  gpf05
gpf16:  mov  ecx,4*trsi_
        mov  ebx,4*trval
        jmp  gpf05
gpf17:  mov  ecx,dword (4*exlen)[edi]
        mov  ebx,4*exflc
        jmp  gpf05
gtarr:
        .global gtarr
        mov  dword gtawa,ecx
        mov  ecx,dword [edi]
        cmp  ecx,offset b_art
        je   gtar8
        cmp  ecx,offset b_vct
        je   gtar8
        cmp  ecx,offset b_tbt
        jne  gta9a
        push edi
        xor  edi,edi
        xor  ebx,ebx
gtar1:  mov  esi,dword [esp]
        add  esi,dword (4*tblen)[esi]
        sub  esi,4*tbbuk
        mov  ecx,esi
gtar2:  mov  esi,ecx
        sub  ecx,4
gtar3:  mov  esi,dword (4*tenxt)[esi]
        cmp  esi,dword [esp]
        je   gtar6
        mov  dword cnvtp,esi
gtar4:  mov  esi,dword (4*teval)[esi]
        cmp  dword [esi],offset b_trt
        je   gtar4
        mov  edx,esi
        mov  esi,dword cnvtp
        cmp  edx,offset nulls
        je   gtar3
        or   edi,edi
        jnz  gtar5
        inc  ebx
        jmp  gtar3
gtar5:  cmp  dword dword ptr gtawa,0
        jz   gta5a
        mov  eax,dword (4*tesub)[esi]
        stosd
        mov  eax,edx
        stosd
        jmp  gtar3
gta5a:  mov  eax,esi
        stosd
        mov  eax,esi
        stosd
        jmp  gtar3
gtar6:  cmp  ecx,dword [esp]
        jne  gtar2
        or   edi,edi
        jnz  gtar7
        or   ebx,ebx
        jz   gtar9
        mov  ecx,ebx
        add  ecx,ebx
        add  ecx,arvl2
        sal  ecx,2
        cmp  ecx,dword mxlen
        ja   gta9b
        call alloc
        mov  dword [edi],offset b_art
        xor  eax,eax
        mov  dword (4*idval)[edi],eax
        mov  dword (4*arlen)[edi],ecx
        mov  dword (4*arndm)[edi],num02
        mov  edx,dword intv1
        mov  dword (4*arlbd)[edi],edx
        mov  dword (4*arlb2)[edi],edx
        mov  edx,dword intv2
        mov  dword (4*ardm2)[edi],edx
        mov  edx,ebx
        mov  dword (4*ardim)[edi],edx
        xor  eax,eax
        mov  dword (4*arpr2)[edi],eax
        mov  dword (4*arofs)[edi],4*arpr2
        mov  ebx,edi
        add  edi,4*arvl2
        jmp  gtar1
gtar7:  mov  edi,ebx
        mov  dword [esp],ebx
        mov  edx,dword (4*ardim)[edi]
        imul edx,dword intvh
        add  edx,dword intv2
        call icbld
        push edi
        call gtstg
        .err_-299-dffnc
        mov  esi,edi
        pop  edi
        mov  dword (4*arpr2)[edi],esi
        sub  ecx,num02
        lea  esi,[cfp_f+esi+ecx]
        mov  ebx,ch_cm
        mov  [esi],bl
gtar8:  pop  eax
        lea  eax,[eax+4]
        jmp  eax
gtar9:  pop  edi
        pop  eax
        jmp  exi__1
gta9a:  pop  eax
        jmp  exi__2
gta9b:  call err_1
        .byte 4
gtcod:
        .global gtcod
        cmp  dword [edi],offset b_cds
        je   gtcd1
        cmp  dword [edi],offset b_cdc
        je   gtcd1
        push edi
        call gtstg
        .gtcd2-dffnc
        mov  eax,dword flptr
        mov  dword gtcef,eax
        mov  eax,dword r_cod
        mov  dword r_gtc,eax
        mov  dword r_cim,edi
        mov  dword scnil,ecx
        xor  eax,eax
        mov  dword scnpt,eax
        mov  dword stage,stgxc
        mov  eax,dword cmpsn
        mov  dword lstsn,eax
        inc  dword cmpln
        call cmpil
        mov  dword stage,stgxt
        xor  eax,eax
        mov  dword r_cim,eax
gtcd1:  pop  eax
        lea  eax,[eax+2]
        jmp  eax
gtcd2:  pop  eax
        jmp  exi__1
gtexp:
        .global gtexp
        cmp  dword [edi],offset b_e__
        jb   gtex1
        push edi
        call gtstg
        .gtex2-dffnc
        mov  esi,edi
        lea  esi,[cfp_f+esi+ecx]
        dec  esi
        movzx esi,byte [esi]
        cmp  esi,ch_cl
        je   gtex2
        cmp  esi,ch_sm
        je   gtex2
        mov  dword r_cim,edi
        xor  eax,eax
        mov  dword scnpt,eax
        mov  dword scnil,ecx
        push ebx
        xor  ebx,ebx
        mov  eax,dword flptr
        mov  dword gtcef,eax
        mov  eax,dword r_cod
        mov  dword r_gtc,eax
        mov  dword stage,stgev
        mov  dword scntp,t_uok
        call expan
        xor  eax,eax
        mov  dword scnrs,eax
        pop  ecx
        mov  eax,dword scnpt
        cmp  eax,dword scnil
        jne  gtex2
        xor  ebx,ebx
        mov  esi,edi
        call cdgex
        xor  eax,eax
        mov  dword r_cim,eax
        mov  dword stage,stgxt
gtex1:  pop  eax
        lea  eax,[eax+2]
        jmp  eax
gtex2:  pop  eax
        jmp  exi__1
gtint:
        .global gtint
        cmp  dword [edi],offset b_icl
        je   gtin2
        mov  dword gtina,ecx
        mov  dword gtinb,ebx
        call gtnum
        .gtin3-dffnc
        cmp  ecx,offset b_icl
        je   gtin1
        lea  eax,dword (4*rcval)[edi]
        call ldr_
        call rti_
        jc   gtin3
        call icbld
gtin1:  mov  ecx,dword gtina
        mov  ebx,dword gtinb
gtin2:  pop  eax
        lea  eax,[eax+2]
        jmp  eax
gtin3:  pop  eax
        jmp  exi__1
gtnum:
        .global gtnum
        mov  ecx,dword [edi]
        cmp  ecx,offset b_icl
        je   gtn34
        cmp  ecx,offset b_rcl
        je   gtn34
        push edi
        push edi
        call gtstg
        .gtn36-dffnc
        mov  edx,dword intv0
        or   ecx,ecx
        jz   gtn32
        xor  eax,eax
        mov  dword gtnnf,eax
        mov  dword gtnex,edx
        xor  eax,eax
        mov  dword gtnsc,eax
        xor  eax,eax
        mov  dword gtndf,eax
        xor  eax,eax
        mov  dword gtnrd,eax
        mov  eax,offset dword reav0
        call ldr_
        add  edi,cfp_f
gtn01:  movzx ebx,byte [edi]
        inc  edi
        cmp  ebx,ch_d0
        jb   gtn02
        cmp  ebx,ch_d9
        jbe  gtn06
gtn02:  cmp  ebx,ch_bl
        jne  gtn03
gtna2:  loop gtn01
        jmp  gtn07
gtn03:  cmp  ebx,ch_pl
        je   gtn04
        cmp  ebx,ch_ht
        je   gtna2
        cmp  ebx,ch_mn
        jne  gtn12
        mov  dword gtnnf,esp
gtn04:  loop gtn05
        jmp  gtn36
gtn05:  movzx ebx,byte [edi]
        inc  edi
        cmp  ebx,ch_d0
        jb   gtn08
        cmp  ebx,ch_d9
        ja   gtn08
gtn06:  mov  dword gtnsi,edx
        imul edx,10
        jo   gtn35
        sub  ebx,ch_d0
        sub  edx,ebx
        jo   gtn35
        mov  dword gtnrd,esp
        loop gtn05
gtn07:  cmp  dword dword ptr gtnnf,0
        jnz  gtn32
        neg  edx
        jno  gtn32
        jmp  gtn36
gtn08:  cmp  ebx,ch_bl
        je   gtna9
        cmp  ebx,ch_ht
        je   gtna9
        call itr_
        call ngr_
        jmp  gtn12
gtn09:  movzx ebx,byte [edi]
        inc  edi
        cmp  ebx,ch_ht
        je   gtna9
        cmp  ebx,ch_bl
        jne  gtn36
gtna9:  loop gtn09
        jmp  gtn07
gtn10:  movzx ebx,byte [edi]
        inc  edi
        cmp  ebx,ch_d0
        jb   gtn12
        cmp  ebx,ch_d9
        ja   gtn12
gtn11:  sub  ebx,ch_d0
        mov  eax,offset dword reavt
        call mlr_
        call ovr_
        jo   gtn36
        mov  eax,offset dword gtnsr
        call str_
        mov  edx,ebx
        call itr_
        mov  eax,offset dword gtnsr
        call adr_
        mov  eax,dword gtndf
        add  dword gtnsc,eax
        mov  dword gtnrd,esp
        loop gtn10
        jmp  gtn22
gtn12:  cmp  ebx,ch_dt
        jne  gtn13
        cmp  dword dword ptr gtndf,0
        jnz  gtn36
        mov  dword gtndf,num01
        loop gtn10
        jmp  gtn22
gtn13:  cmp  ebx,ch_le
        je   gtn15
        cmp  ebx,ch_ld
        je   gtn15
        cmp  ebx,ch__e
        je   gtn15
        cmp  ebx,ch__d
        je   gtn15
gtn14:  cmp  ebx,ch_bl
        je   gtnb4
        cmp  ebx,ch_ht
        je   gtnb4
        jmp  gtn36
gtnb4:  movzx ebx,byte [edi]
        inc  edi
        loop gtn14
        jmp  gtn22
gtn15:  xor  eax,eax
        mov  dword gtnes,eax
        mov  edx,dword intv0
        mov  dword gtndf,esp
        loop gtn16
        jmp  gtn36
gtn16:  movzx ebx,byte [edi]
        inc  edi
        cmp  ebx,ch_pl
        je   gtn17
        cmp  ebx,ch_mn
        jne  gtn19
        mov  dword gtnes,esp
gtn17:  loop gtn18
        jmp  gtn36
gtn18:  movzx ebx,byte [edi]
        inc  edi
gtn19:  cmp  ebx,ch_d0
        jb   gtn20
        cmp  ebx,ch_d9
        ja   gtn20
        imul edx,10
        jo   gtn36
        sub  ebx,ch_d0
        sub  edx,ebx
        jo   gtn36
        loop gtn18
        jmp  gtn21
gtn20:  cmp  ebx,ch_bl
        je   gtnc0
        cmp  ebx,ch_ht
        je   gtnc0
        jmp  gtn36
gtnc0:  movzx ebx,byte [edi]
        inc  edi
        loop gtn20
gtn21:  mov  dword gtnex,edx
        cmp  dword dword ptr gtnes,0
        jnz  gtn22
        neg  edx
        jo   gtn36
        mov  dword gtnex,edx
gtn22:  cmp  dword dword ptr gtnrd,0
        jz   gtn36
        cmp  dword dword ptr gtndf,0
        jz   gtn36
        mov  edx,dword gtnsc
        sub  edx,dword gtnex
        jo   gtn36
        or   edx,edx
        jl   gtn26
        or   edx,edx
        js   gtn36
        mov  ecx,edx
gtn23:  cmp  ecx,num10
        jbe  gtn24
        mov  eax,offset dword reatt
        call dvr_
        sub  ecx,num10
        jmp  gtn23
gtn24:  or   ecx,ecx
        jz   gtn30
        mov  ebx,cfp_r
        mov  edi,offset reav1
        sal  ecx,2
gtn25:  add  edi,ecx
        dec  ebx
        jnz  gtn25
        lea  eax,dword [edi]
        call dvr_
        jmp  gtn30
gtn26:  neg  edx
        jo   gtn36
        or   edx,edx
        js   gtn36
        mov  ecx,edx
gtn27:  cmp  ecx,num10
        jbe  gtn28
        mov  eax,offset dword reatt
        call mlr_
        call ovr_
        jo   gtn36
        sub  ecx,num10
        jmp  gtn27
gtn28:  or   ecx,ecx
        jz   gtn30
        mov  ebx,cfp_r
        mov  edi,offset reav1
        sal  ecx,2
gtn29:  add  edi,ecx
        dec  ebx
        jnz  gtn29
        lea  eax,dword [edi]
        call mlr_
        call ovr_
        jo   gtn36
gtn30:  cmp  dword dword ptr gtnnf,0
        jz   gtn31
        call ngr_
gtn31:  call rcbld
        jmp  gtn33
gtn32:  call icbld
gtn33:  mov  ecx,dword [edi]
        add  esp,4
gtn34:  pop  eax
        lea  eax,[eax+2]
        jmp  eax
gtn35:  dec  edi
        movzx ebx,byte [edi]
        movzx ebx,byte [edi]
        inc  edi
        mov  edx,dword gtnsi
        call itr_
        call ngr_
        jmp  gtn11
gtn36:  pop  edi
        pop  eax
        jmp  exi__1
gtnvr:
        .global gtnvr
        cmp  dword [edi],offset b_nml
        jne  gnv02
        mov  edi,dword (4*nmbas)[edi]
        cmp  edi,dword state
        jb   gnv07
gnv01:  pop  eax
        jmp  exi__1
gnv02:  mov  dword gnvsa,ecx
        mov  dword gnvsb,ebx
        push edi
        call gtstg
        .gnv01-dffnc
        or   ecx,ecx
        jz   gnv01
        call flstg
        push esi
        push edi
        mov  ebx,edi
        add  ebx,4*schar
        mov  dword gnvst,ebx
        mov  ebx,ecx
        add  ebx,3+4*0
        shr  ebx,2
        mov  dword gnvnw,ebx
        call hashs
        mov  eax,dword hshnb
        call rmi_
        sal  edx,2
        add  edx,dword hshtb
        sub  edx,4*vrnxt
gnv03:  mov  esi,edx
        mov  esi,dword (4*vrnxt)[esi]
        or   esi,esi
        jz   gnv08
        mov  edx,esi
        cmp  dword dword ptr (4*vrlen)[esi],0
        jnz  gnv04
        mov  esi,dword (4*vrsvp)[esi]
        sub  esi,4*vrsof
gnv04:  cmp  ecx,dword (4*vrlen)[esi]
        jne  gnv03
        add  esi,4*vrchs
        mov  ebx,dword gnvnw
        mov  edi,dword gnvst
gnv05:  mov  eax,dword [edi]
        cmp  eax,dword [esi]
        jnz  gnv03
        add  edi,4
        add  esi,4
        dec  ebx
        jnz  gnv05
        mov  edi,edx
gnv06:  mov  ecx,dword gnvsa
        mov  ebx,dword gnvsb
        add  esp,4
        pop  esi
gnv07:  pop  eax
        lea  eax,[eax+2]
        jmp  eax
gnv08:  xor  edi,edi
        mov  dword gnvhe,edx
        cmp  ecx,num09
        ja   gnv14
        mov  esi,ecx
        sal  esi,2
        mov  esi,vsrch[esi]
gnv09:  mov  dword gnvsp,esi
        lodsd
        mov  edx,eax
        lodsd
        mov  ebx,eax
        cmp  ecx,ebx
        jne  gnv14
        mov  ebx,dword gnvnw
        mov  edi,dword gnvst
gnv10:  mov  eax,dword [edi]
        cmp  eax,dword [esi]
        jnz  gnv11
        add  edi,4
        add  esi,4
        dec  ebx
        jnz  gnv10
        xor  edx,edx
        mov  ecx,4*vrsi_
        jmp  gnv15
gnv11:  add  esi,4
        dec  ebx
        jnz  gnv11
        shr  edx,svnbt
gnv12:  mov  ebx,dword bits1
        and  ebx,edx
#        or   ebx,ebx         (optimized)
        jz   gnv13
        add  esi,4
gnv13:  shr  edx,1
#        or   edx,edx         (optimized)
        jnz  gnv12
        jmp  gnv09
gnv14:  mov  edx,ecx
        mov  ecx,vrchs
        add  ecx,dword gnvnw
        sal  ecx,2
gnv15:  call alost
        mov  ebx,edi
        mov  esi,offset stnvr
        mov  ecx,4*vrlen
        shr  ecx,2
        rep  movsd
        mov  esi,dword gnvhe
        mov  dword (4*vrnxt)[esi],ebx
        mov  eax,edx
        stosd
        mov  ecx,dword gnvnw
        sal  ecx,2
        or   edx,edx
        jz   gnv16
        mov  esi,dword [esp]
        add  esi,4*schar
        shr  ecx,2
        rep  movsd
        mov  edi,ebx
        jmp  gnv06
gnv16:  mov  esi,dword gnvsp
        mov  dword [edi],esi
        mov  edi,ebx
        mov  ebx,dword (4*svbit)[esi]
        add  esi,4*svchs
        add  esi,ecx
        mov  edx,dword btknm
        and  edx,ebx
#        or   edx,edx         (optimized)
        jz   gnv17
        add  esi,4
gnv17:  mov  edx,dword btfnc
        and  edx,ebx
#        or   edx,edx         (optimized)
        jz   gnv18
        mov  dword (4*vrfnc)[edi],esi
        add  esi,4*num02
gnv18:  mov  edx,dword btlbl
        and  edx,ebx
#        or   edx,edx         (optimized)
        jz   gnv19
        mov  dword (4*vrlbl)[edi],esi
        add  esi,4
gnv19:  mov  edx,dword btval
        and  edx,ebx
#        or   edx,edx         (optimized)
        jz   gnv06
        mov  eax,dword [esi]
        mov  dword (4*vrval)[edi],eax
        mov  dword (4*vrsto)[edi],offset b_vre
        jmp  gnv06
gtpat:
        .global gtpat
        cmp  dword [edi],offset p_aaa
        ja   gtpt5
        mov  dword gtpsb,ebx
        push edi
        call gtstg
        .gtpt2-dffnc
        or   ecx,ecx
        jnz  gtpt1
        mov  edi,offset ndnth
        jmp  gtpt4
gtpt1:  mov  ebx,offset p_str
        cmp  ecx,num01
        jne  gtpt3
        add  edi,cfp_f
        movzx ecx,byte [edi]
        mov  edi,ecx
        mov  ebx,offset p_ans
        jmp  gtpt3
gtpt2:  mov  ebx,offset p_exa
        cmp  dword [edi],offset b_e__
        jb   gtpt3
        pop  eax
        jmp  exi__1
gtpt3:  call pbild
gtpt4:  mov  ebx,dword gtpsb
gtpt5:  pop  eax
        lea  eax,[eax+2]
        jmp  eax
gtrea:
        .global gtrea
        mov  ecx,dword [edi]
        cmp  ecx,offset b_rcl
        je   gtre2
        call gtnum
        .gtre3-dffnc
        cmp  ecx,offset b_rcl
        je   gtre2
gtre1:  mov  edx,dword (4*icval)[edi]
        call itr_
        call rcbld
gtre2:  pop  eax
        lea  eax,[eax+2]
        jmp  eax
gtre3:  pop  eax
        jmp  exi__1
gtsmi:
        .global gtsmi
        pop  prc_+20
        pop  edi
        cmp  dword [edi],offset b_icl
        je   gtsm1
        call gtint
        .gtsm2-dffnc
gtsm1:  mov  edx,dword (4*icval)[edi]
        or   edx,edx
        js   gtsm3
        cmp  edx,dword mxlen
        ja   gtsm3
        mov  edi,edx
        mov  eax,prc_+20
        lea  eax,[eax+4]
        jmp  eax
gtsm2:  mov  eax,prc_+20
        jmp  exi__1
gtsm3:  mov  eax,prc_+20
        jmp  exi__2
gtstg:
        .global gtstg
        pop  prc_+24
        pop  edi
        cmp  dword [edi],offset b_scl
        je   gts30
gts01:  push edi
        push esi
        mov  dword gtsvb,ebx
        mov  dword gtsvc,edx
        mov  ecx,dword [edi]
        cmp  ecx,offset b_icl
        je   gts05
        cmp  ecx,offset b_rcl
        je   gts10
        cmp  ecx,offset b_nml
        je   gts03
gts02:  pop  esi
        pop  edi
        mov  eax,prc_+24
        jmp  exi__1
gts03:  mov  esi,dword (4*nmbas)[edi]
        cmp  esi,dword state
        ja   gts02
        add  esi,4*vrsof
        mov  ecx,dword (4*sclen)[esi]
        or   ecx,ecx
        jnz  gts04
        mov  esi,dword (4*vrsvo)[esi]
        mov  ecx,dword (4*svlen)[esi]
gts04:  xor  ebx,ebx
        call sbstr
        jmp  gts29
gts05:  mov  edx,dword (4*icval)[edi]
        mov  dword gtssf,num01
        or   edx,edx
        jl   gts06
        neg  edx
        xor  eax,eax
        mov  dword gtssf,eax
gts06:  mov  edi,dword gtswk
        mov  ebx,nstmx
        lea  edi,[cfp_f+edi+ebx]
gts07:  call cvd_
        dec  edi
        mov  [edi],cl
        dec  ebx
        or   edx,edx
        jne  gts07
gts08:  mov  ecx,nstmx
        sub  ecx,ebx
        mov  esi,ecx
        add  ecx,dword gtssf
        call alocs
        mov  edx,edi
        add  edi,cfp_f
        cmp  dword dword ptr gtssf,0
        jz   gts09
        mov  ecx,ch_mn
        mov  al,cl
        stosb
gts09:  mov  ecx,esi
        mov  esi,dword gtswk
        lea  esi,[cfp_f+esi+ebx]
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
        mov  edi,edx
        jmp  gts29
gts10:  lea  eax,dword (4*rcval)[edi]
        call ldr_
        xor  eax,eax
        mov  dword gtssf,eax
        call cpr_
        je   gts31
        call cpr_
        jge  gts11
        mov  dword gtssf,num01
        call ngr_
gts11:  mov  edx,dword intv0
gts12:  mov  eax,offset dword gtsrs
        call str_
        mov  eax,offset dword reap1
        call sbr_
        call cpr_
        jge  gts13
        mov  eax,offset dword gtsrs
        call ldr_
        mov  eax,offset dword reatt
        call mlr_
        sub  edx,dword intvt
        jmp  gts12
gts13:  mov  eax,offset dword gtsrs
        call ldr_
        mov  eax,offset dword reav1
        call sbr_
        call cpr_
        jl   gts17
        mov  eax,offset dword gtsrs
        call ldr_
gts14:  mov  eax,offset dword reatt
        call sbr_
        call cpr_
        jl   gts15
        mov  eax,offset dword gtsrs
        call ldr_
        mov  eax,offset dword reatt
        call dvr_
        mov  eax,offset dword gtsrs
        call str_
        add  edx,dword intvt
        jmp  gts14
gts15:  mov  edi,offset reav1
gts16:  mov  eax,offset dword gtsrs
        call ldr_
        add  edx,dword intv1
        add  edi,4*cfp_r
        lea  eax,dword [edi]
        call sbr_
        call cpr_
        jge  gts16
        mov  eax,offset dword gtsrs
        call ldr_
        lea  eax,dword [edi]
        call dvr_
        mov  eax,offset dword gtsrs
        call str_
gts17:  mov  eax,offset dword gtsrs
        call ldr_
        mov  eax,offset dword gtsrn
        call adr_
        mov  eax,offset dword gtsrs
        call str_
        mov  eax,offset dword reav1
        call sbr_
        call cpr_
        jl   gts18
        add  edx,dword intv1
        mov  eax,offset dword gtsrs
        call ldr_
        mov  eax,offset dword reavt
        call dvr_
        jmp  gts19
gts18:  mov  eax,offset dword gtsrs
        call ldr_
gts19:  mov  esi,cfp_s
        mov  dword gtses,ch_mn
        or   edx,edx
        jl   gts21
        mov  ecx,edx
        cmp  ecx,cfp_s
        jbe  gts20
        mov  edx,ecx
        neg  edx
        mov  dword gtses,ch_pl
        jmp  gts21
gts20:  sub  esi,ecx
        mov  edx,dword intv0
gts21:  mov  edi,dword gtswk
        mov  ebx,nstmx
        lea  edi,[cfp_f+edi+ebx]
        or   edx,edx
        je   gts23
gts22:  call cvd_
        dec  edi
        mov  [edi],cl
        dec  ebx
        or   edx,edx
        jne  gts22
        mov  ecx,dword gtses
        dec  edi
        mov  [edi],cl
        mov  ecx,ch_le
        dec  edi
        mov  [edi],cl
        sub  ebx,num02
gts23:  mov  eax,offset dword gtssc
        call mlr_
        call rti_
        neg  edx
gts24:  or   esi,esi
        jz   gts27
        call cvd_
        cmp  ecx,ch_d0
        jne  gts26
        dec  esi
        jmp  gts24
gts25:  call cvd_
gts26:  dec  edi
        mov  [edi],cl
        dec  ebx
        dec  esi
#        or   esi,esi         (optimized)
        jnz  gts25
gts27:  mov  ecx,ch_dt
        dec  edi
        mov  [edi],cl
        dec  ebx
gts28:  call cvd_
        dec  edi
        mov  [edi],cl
        dec  ebx
        or   edx,edx
        jne  gts28
        jmp  gts08
gts29:  pop  esi
        add  esp,4
        mov  ebx,dword gtsvb
        mov  edx,dword gtsvc
gts30:  mov  ecx,dword (4*sclen)[edi]
        mov  eax,prc_+24
        lea  eax,[eax+2]
        jmp  eax
gts31:  mov  esi,offset scre0
        mov  ecx,num02
        xor  ebx,ebx
        call sbstr
        jmp  gts29
gtvar:
        .global gtvar
        cmp  dword [edi],offset b_nml
        jne  gtvr2
        mov  ecx,dword (4*nmofs)[edi]
        mov  esi,dword (4*nmbas)[edi]
        cmp  dword [esi],offset b_evt
        je   gtvr1
        cmp  dword [esi],offset b_kvt
        jne  gtvr3
gtvr1:  pop  eax
        jmp  exi__1
gtvr2:  mov  dword gtvrc,edx
        call gtnvr
        .gtvr1-dffnc
        mov  esi,edi
        mov  ecx,4*vrval
        mov  edx,dword gtvrc
gtvr3:  cmp  esi,dword state
        ja   gtvr4
        cmp  dword (4*vrsto)[esi],offset b_vre
        je   gtvr1
gtvr4:  pop  eax
        lea  eax,[eax+2]
        jmp  eax
hashs:
        .global hashs
        mov  edx,dword (4*sclen)[edi]
        mov  ebx,edx
        or   edx,edx
        jz   hshs3
        xchg bl,bh
        rol  ebx,16
        xchg bl,bh
        add  edx,3+4*0
        shr  edx,2
        add  edi,4*schar
        cmp  edx,e_hnw
        jb   hshs1
        mov  edx,e_hnw
hshs1:
hshs2:  xor  ebx,dword [edi]
        lea  edi,[edi+4]
        dec  edx
        jnz  hshs2
hshs3:  xchg bl,bh
        rol  ebx,16
        xchg bl,bh
        and  ebx,dword bitsm
        mov  edx,ebx
        xor  edi,edi
        ret
icbld:
        .global icbld
        or   edx,edx
        js   icbl1
        mov  edi,edx
        cmp  edi,num02
        jbe  icbl3
icbl1:  mov  edi,dword dnamp
        add  edi,4*icsi_
        cmp  edi,dword dname
        jb   icbl2
        mov  ecx,4*icsi_
        call alloc
        add  edi,ecx
icbl2:  mov  dword dnamp,edi
        sub  edi,4*icsi_
        mov  dword [edi],offset b_icl
        mov  dword (4*icval)[edi],edx
        ret
icbl3:  sal  edi,2
        mov  edi,intab[edi]
        ret
ident:
        .global ident
        cmp  edi,esi
        je   iden7
        mov  edx,dword [edi]
        cmp  edx,dword [esi]
        jne  iden1
        cmp  edx,offset b_scl
        je   iden2
        cmp  edx,offset b_icl
        je   iden4
        cmp  edx,offset b_rcl
        je   iden5
        cmp  edx,offset b_nml
        je   iden6
iden1:  pop  eax
        lea  eax,[eax+2]
        jmp  eax
iden2:  mov  edx,dword (4*sclen)[edi]
        cmp  edx,dword (4*sclen)[esi]
        jne  iden1
idn2a:  add  edi,4*schar
        add  esi,4*schar
        add  edx,3+4*0
        shr  edx,2
iden3:  mov  eax,dword [edi]
        cmp  eax,dword [esi]
        jnz  iden8
        add  edi,4
        add  esi,4
        dec  edx
        jnz  iden3
        xor  esi,esi
        xor  edi,edi
        pop  eax
        jmp  exi__1
iden4:  mov  edx,dword (4*icval)[edi]
        sub  edx,dword (4*icval)[esi]
        jo   iden1
        or   edx,edx
        jne  iden1
        pop  eax
        jmp  exi__1
iden5:  lea  eax,dword (4*rcval)[edi]
        call ldr_
        lea  eax,dword (4*rcval)[esi]
        call sbr_
        call ovr_
        jo   iden1
        call cpr_
        jne  iden1
        pop  eax
        jmp  exi__1
iden6:  mov  eax,dword (4*nmofs)[edi]
        cmp  eax,dword (4*nmofs)[esi]
        jne  iden1
        mov  eax,dword (4*nmbas)[edi]
        cmp  eax,dword (4*nmbas)[esi]
        jne  iden1
iden7:  pop  eax
        jmp  exi__1
iden8:  xor  edi,edi
        xor  esi,esi
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
inout:
        .global inout
        push ebx
        mov  ecx,dword (4*sclen)[esi]
        xor  ebx,ebx
        call sbstr
        call gtnvr
        .err_-299-dffnc
        mov  edx,edi
        pop  ebx
        xor  esi,esi
        call trbld
        mov  esi,edx
        mov  eax,dword (4*vrsvp)[esi]
        mov  dword (4*trter)[edi],eax
        mov  dword (4*vrval)[esi],edi
        mov  dword (4*vrget)[esi],offset b_vra
        mov  dword (4*vrsto)[esi],offset b_vrv
        ret
insta:
        .global insta
        mov  edx,dword prlen
        mov  dword prbuf,edi
        mov  eax,offset b_scl
        stosd
        mov  eax,edx
        stosd
        add  edx,3+4*0
        shr  edx,2
        mov  dword prlnw,edx
inst1:  mov  eax,dword nullw
        stosd
        dec  edx
        jnz  inst1
        mov  ecx,nstmx
        add  ecx,3+4*scsi_
        and  ecx,-4
        mov  dword gtswk,edi
        add  edi,ecx
        mov  dword kvalp,edi
        mov  dword [edi],offset b_scl
        mov  edx,cfp_a
        mov  dword (4*sclen)[edi],edx
        mov  ebx,edx
        add  ebx,3+4*scsi_
        and  ebx,-4
        add  ebx,edi
        mov  ecx,ebx
        add  edi,cfp_f
        xor  ebx,ebx
inst2:  mov  al,bl
        stosb
        inc  ebx
        dec  edx
        jnz  inst2
        mov  edi,ecx
        ret
iofcb:
        .global iofcb
        pop  prc_+28
        call gtstg
        .iofc2-dffnc
        mov  esi,edi
        call gtnvr
        .iofc3-dffnc
        mov  ebx,esi
        mov  esi,edi
        xor  ecx,ecx
iofc1:  mov  edi,dword (4*vrval)[edi]
        cmp  dword [edi],offset b_trt
        jne  iofc4
        cmp  dword (4*trtyp)[edi],trtfc
        jne  iofc1
        mov  ecx,dword (4*trfpt)[edi]
        mov  edi,ebx
        mov  eax,prc_+28
        lea  eax,[eax+6]
        jmp  eax
iofc2:  mov  eax,prc_+28
        jmp  exi__1
iofc3:  mov  eax,prc_+28
        jmp  exi__2
iofc4:  mov  eax,prc_+28
        jmp  exi__3
ioppf:
        .global ioppf
        pop  prc_+32
        xor  ebx,ebx
iopp1:  mov  esi,iodel
        mov  edx,esi
        xor  ecx,ecx
        call xscan
        push edi
        inc  ebx
        or   ecx,ecx
        jnz  iopp1
        mov  edx,ebx
        mov  ebx,dword ioptt
        mov  ecx,dword r_iof
        mov  edi,dword r_io2
        mov  esi,dword r_io1
        jmp  [prc_+32]
ioput:
        .global ioput
        pop  prc_+36
        xor  eax,eax
        mov  dword r_iot,eax
        xor  eax,eax
        mov  dword r_iof,eax
        xor  eax,eax
        mov  dword r_iop,eax
        mov  dword ioptt,ebx
        call xscni
        .iop13-dffnc
        .iopa0-dffnc
iopa0:  mov  dword r_io2,edi
        mov  esi,ecx
        call gtstg
        .iop14-dffnc
        mov  dword r_io1,edi
        call gtnvr
        .iop00-dffnc
        jmp  iop04
iop00:  or   esi,esi
        jz   iop01
        call ioppf
        call sysfc
        .iop16-dffnc
        .iop26-dffnc
        jmp  iop11
iop01:  mov  ebx,dword ioptt
        mov  edi,dword r_iot
        call trbld
        mov  edx,edi
        pop  edi
        push edx
        call gtvar
        .iop15-dffnc
        pop  edx
        mov  dword r_ion,esi
        mov  edi,esi
        add  edi,ecx
        sub  edi,4*vrval
iop02:  mov  esi,edi
        mov  edi,dword (4*vrval)[edi]
        cmp  dword [edi],offset b_trt
        jne  iop03
        mov  eax,dword (4*trtyp)[edi]
        cmp  eax,dword ioptt
        jne  iop02
        mov  edi,dword (4*trnxt)[edi]
iop03:  mov  dword (4*vrval)[esi],edx
        mov  esi,edx
        mov  dword (4*trnxt)[esi],edi
        mov  edi,dword r_ion
        mov  ebx,ecx
        call setvr
        mov  edi,dword r_iot
        or   edi,edi
        jnz  iop19
        mov  eax,prc_+36
        lea  eax,[eax+14]
        jmp  eax
iop04:  xor  ecx,ecx
iop05:  mov  ebx,edi
        mov  edi,dword (4*vrval)[edi]
        cmp  dword [edi],offset b_trt
        jne  iop06
        cmp  dword (4*trtyp)[edi],trtfc
        jne  iop05
        mov  dword r_iot,edi
        mov  ecx,dword (4*trfpt)[edi]
iop06:  mov  dword r_iof,ecx
        mov  dword r_iop,ebx
        call ioppf
        call sysfc
        .iop16-dffnc
        .iop26-dffnc
        or   ecx,ecx
        jz   iop12
        cmp  edx,num02
        jb   iop6a
        call alost
        jmp  iop6b
iop6a:  call alloc
iop6b:  mov  esi,edi
        mov  ebx,ecx
        shr  ebx,2
iop07:  xor  eax,eax
        stosd
        dec  ebx
        jnz  iop07
        cmp  edx,num02
        je   iop09
        mov  dword [esi],offset b_xnt
        mov  dword (4*num01)[esi],ecx
        or   edx,edx
        jnz  iop09
        mov  dword [esi],offset b_xrt
iop09:  mov  edi,dword r_iot
        mov  dword r_iof,esi
        or   edi,edi
        jnz  iop10
        mov  ebx,trtfc
        call trbld
        mov  dword r_iot,edi
        mov  esi,dword r_iop
        mov  eax,dword (4*vrval)[esi]
        mov  dword (4*vrval)[edi],eax
        mov  dword (4*vrval)[esi],edi
        mov  edi,esi
        call setvr
        mov  edi,dword (4*vrval)[edi]
        jmp  iop1a
iop10:  xor  eax,eax
        mov  dword r_iop,eax
iop1a:  mov  eax,dword r_iof
        mov  dword (4*trfpt)[edi],eax
iop11:  mov  ecx,dword r_iof
        mov  ebx,dword ioptt
        mov  edi,dword r_io2
        mov  esi,dword r_io1
        call sysio
        .iop17-dffnc
        .iop18-dffnc
        cmp  dword dword ptr r_iot,0
        jnz  iop01
        cmp  dword dword ptr ioptt,0
        jnz  iop01
        or   edx,edx
        jz   iop01
        mov  dword cswin,edx
        jmp  iop01
iop12:  or   esi,esi
        jnz  iop09
        jmp  iop11
iop13:  mov  eax,prc_+36
        jmp  exi__1
iop14:  mov  eax,prc_+36
        jmp  exi__2
iop15:  add  esp,4
        mov  eax,prc_+36
        jmp  exi__3
iop16:  mov  eax,prc_+36
        jmp  exi__4
iop26:  mov  eax,prc_+36
        jmp  exi__7
iop17:  mov  edi,dword r_iop
        or   edi,edi
        jz   iopa7
        mov  esi,dword (4*vrval)[edi]
        mov  eax,dword (4*vrval)[esi]
        mov  dword (4*vrval)[edi],eax
        call setvr
iopa7:  mov  eax,prc_+36
        jmp  exi__5
iop18:  mov  edi,dword r_iop
        or   edi,edi
        jz   iopa7
        mov  esi,dword (4*vrval)[edi]
        mov  eax,dword (4*vrval)[esi]
        mov  dword (4*vrval)[edi],eax
        call setvr
iopa8:  mov  eax,prc_+36
        jmp  exi__6
iop19:  mov  edx,dword r_ion
iop20:  mov  edi,dword (4*trtrf)[edi]
        or   edi,edi
        jz   iop21
        cmp  edx,dword (4*ionmb)[edi]
        jne  iop20
        cmp  ebx,dword (4*ionmo)[edi]
        je   iop22
        jmp  iop20
iop21:  mov  ecx,4*num05
        call alloc
        mov  dword [edi],offset b_xrt
        mov  dword (4*num01)[edi],ecx
        mov  dword (4*ionmb)[edi],edx
        mov  dword (4*ionmo)[edi],ebx
        mov  esi,dword r_iot
        mov  ecx,dword (4*trtrf)[esi]
        mov  dword (4*trtrf)[esi],edi
        mov  dword (4*trtrf)[edi],ecx
iop22:  cmp  dword dword ptr r_iof,0
        jz   iop25
        mov  esi,dword r_fcb
iop23:  or   esi,esi
        jz   iop24
        mov  eax,dword (4*num03)[esi]
        cmp  eax,dword r_iof
        je   iop25
        mov  esi,dword (4*num02)[esi]
        jmp  iop23
iop24:  mov  ecx,4*num04
        call alloc
        mov  dword [edi],offset b_xrt
        mov  dword (4*num01)[edi],ecx
        mov  eax,dword r_fcb
        mov  dword (4*num02)[edi],eax
        mov  eax,dword r_iof
        mov  dword (4*num03)[edi],eax
        mov  dword r_fcb,edi
iop25:  mov  eax,prc_+36
        lea  eax,[eax+14]
        jmp  eax
ktrex:
        .global ktrex
        or   esi,esi
        jz   ktrx3
        cmp  dword dword ptr kvtra,0
        jz   ktrx3
        dec  dword kvtra
        push edi
        mov  edi,esi
        mov  esi,dword (4*trkvr)[edi]
        mov  ecx,4*vrval
        cmp  dword dword ptr (4*trfnc)[edi],0
        jz   ktrx1
        call trxeq
        jmp  ktrx2
ktrx1:  push esi
        push ecx
        call prtsn
        mov  ecx,ch_am
        call prtch
        call prtnm
        mov  edi,offset tmbeb
        call prtst
        call kwnam
        mov  dword dnamp,edi
        call acess
        .err_-299-dffnc
        call prtvl
        call prtnl
ktrx2:  pop  edi
ktrx3:  ret
kwnam:
        .global kwnam
        pop  prc_+40
        add  esp,4
        pop  edi
        cmp  edi,dword state
        jae  kwnm1
        cmp  dword dword ptr (4*vrlen)[edi],0
        jnz  kwnm1
        mov  edi,dword (4*vrsvp)[edi]
        mov  ecx,dword (4*svbit)[edi]
        and  ecx,dword btknm
#        or   ecx,ecx         (optimized)
        jz   kwnm1
        mov  ecx,dword (4*svlen)[edi]
        add  ecx,3+4*svchs
        and  ecx,-4
        add  edi,ecx
        mov  ebx,dword [edi]
        mov  ecx,4*kvsi_
        call alloc
        mov  dword [edi],offset b_kvt
        mov  dword (4*kvnum)[edi],ebx
        mov  dword (4*kvvar)[edi],offset trbkv
        mov  esi,edi
        mov  ecx,4*kvvar
        jmp  [prc_+40]
kwnm1:  call err_0
        .byte 251
lcomp:
        .global lcomp
        pop  prc_+44
        call gtstg
        .lcmp6-dffnc
        mov  esi,edi
        mov  edx,ecx
        call gtstg
        .lcmp5-dffnc
        mov  ebx,ecx
        add  edi,cfp_f
        add  esi,cfp_f
        cmp  ecx,edx
        jb   lcmp1
        mov  ecx,edx
lcmp1:  or   ecx,ecx
        jz   lcmp7
        repe cmpsb
        mov  esi,0
        mov  edi,esi
        ja   lcmp3
        jb   lcmp4
lcmp7:  cmp  ebx,edx
        jne  lcmp2
        mov  eax,prc_+44
        jmp  exi__4
lcmp2:  cmp  ebx,edx
        ja   lcmp4
lcmp3:  mov  eax,prc_+44
        jmp  exi__3
lcmp4:  mov  eax,prc_+44
        jmp  exi__5
lcmp5:  mov  eax,prc_+44
        jmp  exi__1
lcmp6:  mov  eax,prc_+44
        jmp  exi__2
listr:
        .global listr
        cmp  dword dword ptr cnttl,0
        jnz  list5
        cmp  dword dword ptr lstpf,0
        jnz  list4
        mov  eax,dword lstlc
        cmp  eax,dword lstnp
        jae  list6
list0:  mov  edi,dword r_cim
        or   edi,edi
        jz   list4
        add  edi,cfp_f
        movzx ecx,byte [edi]
        mov  edi,dword lstsn
        or   edi,edi
        jz   list2
        mov  edx,edi
        cmp  dword stage,stgic
        jne  list1
        cmp  ecx,ch_as
        je   list2
        cmp  ecx,ch_mn
        je   list2
list1:  call prtin
        xor  eax,eax
        mov  dword lstsn,eax
list2:  mov  edi,dword lstid
        or   edi,edi
        jz   list8
        mov  ecx,stnpd
        sub  ecx,num03
        mov  dword profs,ecx
        mov  edx,edi
        call prtin
list8:  mov  dword profs,stnpd
        mov  edi,dword r_cim
        call prtst
        inc  dword lstlc
        cmp  dword dword ptr erlst,0
        jnz  list3
        call prtnl
        cmp  dword dword ptr cswdb,0
        jz   list3
        call prtnl
        inc  dword lstlc
list3:  mov  dword lstpf,esp
list4:  ret
list5:  xor  eax,eax
        mov  dword cnttl,eax
list6:  call prtps
        cmp  dword dword ptr prich,0
        jz   list7
        cmp  dword r_ttl,offset nulls
        je   list0
list7:  call listt
        jmp  list0
listt:
        .global listt
        mov  edi,dword r_ttl
        call prtst
        mov  eax,dword lstpo
        mov  dword profs,eax
        mov  edi,offset lstms
        call prtst
        inc  dword lstpg
        mov  edx,dword lstpg
        call prtin
        call prtnl
        add  dword lstlc,num02
        mov  edi,dword r_stl
        or   edi,edi
        jz   lstt1
        call prtst
        call prtnl
        inc  dword lstlc
lstt1:  call prtnl
        ret
newfn:
        .global newfn
        push edi
        mov  esi,dword r_sfc
        call ident
        .nwfn1-dffnc
        pop  edi
        mov  dword r_sfc,edi
        mov  ebx,dword cmpsn
        mov  edx,ebx
        call icbld
        mov  esi,dword r_sfn
        mov  ebx,esp
        call tfind
        .err_-299-dffnc
        mov  eax,dword r_sfc
        mov  dword (4*teval)[esi],eax
        ret
nwfn1:  add  esp,4
        ret
nexts:
        .global nexts
        cmp  dword dword ptr cswls,0
        jz   nxts2
        mov  edi,dword r_cim
        or   edi,edi
        jz   nxts2
        add  edi,cfp_f
        movzx ecx,byte [edi]
        cmp  ecx,ch_mn
        jne  nxts1
        cmp  dword dword ptr cswpr,0
        jz   nxts2
nxts1:  call listr
nxts2:  mov  edi,dword r_cni
        mov  dword r_cim,edi
        mov  eax,dword rdnln
        mov  dword rdcln,eax
        mov  eax,dword cnind
        mov  dword lstid,eax
        xor  eax,eax
        mov  dword r_cni,eax
        mov  ecx,dword (4*sclen)[edi]
        mov  ebx,dword cswin
        cmp  ecx,ebx
        jb   nxts3
        mov  ecx,ebx
nxts3:  mov  dword scnil,ecx
        xor  eax,eax
        mov  dword scnse,eax
        xor  eax,eax
        mov  dword lstpf,eax
        ret
patin:
        .global patin
        pop  prc_+48
        mov  esi,ecx
        call gtsmi
        .ptin2-dffnc
        .ptin3-dffnc
ptin1:  call pbild
        mov  eax,prc_+48
        lea  eax,[eax+4]
        jmp  eax
ptin2:  mov  ebx,esi
        cmp  dword [edi],offset b_e__
        jb   ptin1
        mov  eax,prc_+48
        jmp  exi__1
ptin3:  mov  eax,prc_+48
        jmp  exi__2
patst:
        .global patst
        pop  prc_+52
        call gtstg
        .pats7-dffnc
        or   ecx,ecx
        jz   pats7
        cmp  ecx,num01
        jne  pats2
        or   ebx,ebx
        jz   pats2
        add  edi,cfp_f
        movzx edi,byte [edi]
pats1:  call pbild
        mov  eax,prc_+52
        lea  eax,[eax+2]
        jmp  eax
pats2:  push esi
        mov  edx,dword ctmsk
        cmp  edi,dword r_cts
        je   pats6
        push edi
        shl  edx,1
#        or   edx,edx         (optimized)
        jnz  pats4
        mov  ecx,4*ctsi_
        call alloc
        mov  dword r_ctp,edi
        mov  eax,offset b_ctt
        stosd
        mov  ebx,cfp_a
        mov  edx,dword bits0
pats3:  mov  eax,edx
        stosd
        dec  ebx
        jnz  pats3
        mov  edx,dword bits1
pats4:  mov  dword ctmsk,edx
        pop  esi
        mov  dword r_cts,esi
        mov  ebx,dword (4*sclen)[esi]
        or   ebx,ebx
        jz   pats6
        add  esi,cfp_f
pats5:  movzx ecx,byte [esi]
        inc  esi
        sal  ecx,2
        mov  edi,dword r_ctp
        add  edi,ecx
        mov  ecx,edx
        or   ecx,dword (4*ctchs)[edi]
        mov  dword (4*ctchs)[edi],ecx
        dec  ebx
        jnz  pats5
pats6:  mov  edi,dword r_ctp
        xor  esi,esi
        pop  ebx
        jmp  pats1
pats7:  mov  ebx,edx
        cmp  dword [edi],offset b_e__
        jb   pats1
        mov  eax,prc_+52
        jmp  exi__1
pbild:
        .global pbild
        push edi
        mov  edi,ebx
        movzx edi,byte [edi-1]
        cmp  edi,bl_p1
        je   pbld1
        cmp  edi,bl_p0
        je   pbld3
        mov  ecx,4*pcsi_
        call alloc
        mov  dword (4*parm2)[edi],edx
        jmp  pbld2
pbld1:  mov  ecx,4*pbsi_
        call alloc
pbld2:  mov  eax,dword [esp]
        mov  dword (4*parm1)[edi],eax
        jmp  pbld4
pbld3:  mov  ecx,4*pasi_
        call alloc
pbld4:  mov  dword [edi],ebx
        add  esp,4
        mov  dword (4*pthen)[edi],offset ndnth
        ret
pconc:
        .global pconc
        push 0
        mov  edx,esp
        push offset ndnth
        push esi
        mov  esi,esp
        call pcopy
        mov  dword (4*num02)[esi],ecx
pcnc1:  cmp  esi,esp
        je   pcnc2
        lea  esi,[esi-4]
        mov  edi,dword [esi]
        mov  edi,dword (4*pthen)[edi]
        call pcopy
        lea  esi,[esi-4]
        mov  edi,dword [esi]
        mov  dword (4*pthen)[edi],ecx
        cmp  dword [edi],offset p_alt
        jne  pcnc1
        mov  edi,dword (4*parm1)[edi]
        call pcopy
        mov  edi,dword [esi]
        mov  dword (4*parm1)[edi],ecx
        jmp  pcnc1
pcnc2:  mov  esp,edx
        pop  edi
        ret
pcopy:
        .global pcopy
        pop  prc_+56
        mov  ebx,esi
        mov  esi,edx
pcop1:  sub  esi,4
        cmp  edi,dword [esi]
        je   pcop2
        sub  esi,4
        cmp  esi,esp
        jne  pcop1
        mov  ecx,dword [edi]
        call blkln
        mov  esi,edi
        call alloc
        push esi
        push edi
        cmp  esp,lowspmin
        jb   sec06
        shr  ecx,2
        rep  movsd
        mov  ecx,dword [esp]
        jmp  pcop3
pcop2:  lea  esi,[esi-4]
        mov  ecx,dword [esi]
pcop3:  mov  esi,ebx
        jmp  [prc_+56]
prflr:
        .global prflr
        cmp  dword dword ptr pfdmp,0
        jz   prfl4
        push edi
        mov  dword pfsvw,ebx
        call prtpg
        mov  edi,offset pfms1
        call prtst
        call prtnl
        call prtnl
        mov  edi,offset pfms2
        call prtst
        call prtnl
        mov  edi,offset pfms3
        call prtst
        call prtnl
        call prtnl
        xor  ebx,ebx
        mov  edi,dword pftbl
        add  edi,4*xndta
prfl1:  inc  ebx
        mov  edx,dword [edi]
        or   edx,edx
        je   prfl3
        mov  dword profs,pfpd1
        call prtin
        xor  eax,eax
        mov  dword profs,eax
        mov  edx,ebx
        call prtin
        mov  dword profs,pfpd2
        mov  edx,dword (4*cfp_i)[edi]
        call prtin
        mov  edx,dword (4*cfp_i)[edi]
        imul edx,dword intth
        jo   prfl2
        mov  eax,dword [edi]
        call dvi_
        mov  dword profs,pfpd3
        call prtin
prfl2:  call prtnl
prfl3:  add  edi,4*pf_i2
        cmp  ebx,dword pfnte
        jb   prfl1
        pop  edi
        mov  ebx,dword pfsvw
prfl4:  ret
prflu:
        .global prflu
        cmp  dword dword ptr pffnc,0
        jnz  pflu4
        push edi
        mov  dword pfsvw,ecx
        cmp  dword dword ptr pftbl,0
        jnz  pflu2
        sub  dword pfnte,num01
        mov  edx,dword pfi2a
        mov  dword pfste,edx
        mov  edx,dword pfnte
        imul edx,dword pfste
        mov  ecx,edx
        add  ecx,num02
        sal  ecx,2
        call alost
        mov  dword pftbl,edi
        mov  eax,offset b_xnt
        stosd
        mov  eax,ecx
        stosd
        mov  ecx,edx
pflu1:  xor  eax,eax
        stosd
        loop pflu1
pflu2:  mov  edx,dword kvstn
        sub  edx,dword intv1
        imul edx,dword pfste
        mov  ecx,edx
        sal  ecx,2
        add  ecx,4*num02
        mov  edi,dword pftbl
        cmp  ecx,dword (4*num01)[edi]
        jae  pflu3
        add  edi,ecx
        mov  edx,dword [edi]
        add  edx,dword intv1
        mov  dword [edi],edx
        call systm
        mov  dword pfetm,edx
        sub  edx,dword pfstm
        add  edx,dword (4*cfp_i)[edi]
        mov  dword (4*cfp_i)[edi],edx
        mov  edx,dword pfetm
        mov  dword pfstm,edx
pflu3:  pop  edi
        mov  ecx,dword pfsvw
        ret
pflu4:  xor  eax,eax
        mov  dword pffnc,eax
        ret
prpar:
        .global prpar
        or   edx,edx
        jnz  prpa8
        call syspp
        or   ebx,ebx
        jnz  prpa1
        mov  ebx,cfp_m
        shr  ebx,1
prpa1:  mov  dword lstnp,ebx
        mov  dword lstlc,ebx
        xor  eax,eax
        mov  dword lstpg,eax
        mov  ebx,dword prlen
        or   ebx,ebx
        jz   prpa2
        cmp  ecx,ebx
        ja   prpa3
prpa2:  mov  dword prlen,ecx
prpa3:  mov  ebx,dword bits3
        and  ebx,edx
#        or   ebx,ebx         (optimized)
        jz   prpa4
        xor  eax,eax
        mov  dword cswls,eax
prpa4:  mov  ebx,dword bits1
        and  ebx,edx
        mov  dword erich,ebx
        mov  ebx,dword bits2
        and  ebx,edx
        mov  dword prich,ebx
        mov  ebx,dword bits4
        and  ebx,edx
        mov  dword cpsts,ebx
        mov  ebx,dword bits5
        and  ebx,edx
        mov  dword exsts,ebx
        mov  ebx,dword bits6
        and  ebx,edx
        mov  dword precl,ebx
        sub  ecx,num08
        or   ebx,ebx
        jz   prpa5
        mov  dword lstpo,ecx
prpa5:  mov  ebx,dword bits7
        and  ebx,edx
        mov  dword cswex,ebx
        mov  ebx,dword bit10
        and  ebx,edx
        mov  dword headp,ebx
        mov  ebx,dword bits9
        and  ebx,edx
        mov  dword prsto,ebx
        mov  ebx,edx
        shr  ebx,12
        and  ebx,dword bits1
        mov  dword kvcas,ebx
        mov  ebx,dword bit12
        and  ebx,edx
        mov  dword cswer,ebx
        or   ebx,ebx
        jz   prpa6
        mov  ecx,dword prlen
        sub  ecx,num08
        mov  dword lstpo,ecx
prpa6:  mov  ebx,dword bit11
        and  ebx,edx
        mov  dword cswpr,ebx
        and  edx,dword bits8
#        or   edx,edx         (optimized)
        jnz  prpa8
        cmp  dword dword ptr initr,0
        jz   prpa9
        mov  esi,offset v_ter
        call gtnvr
        .err_-299-dffnc
        mov  dword (4*vrval)[edi],offset nulls
        call setvr
        jmp  prpa9
prpa8:  mov  dword initr,esp
        cmp  dword dword ptr dnamb,0
        jz   prpa9
        mov  esi,offset v_ter
        mov  ebx,trtou
        call inout
        push edi
        mov  esi,offset v_ter
        mov  ebx,trtin
        call inout
        pop  dword (4*vrval)[edi]
prpa9:  ret
prtch:
        .global prtch
        push edi
        mov  eax,dword profs
        cmp  eax,dword prlen
        jne  prch1
        call prtnl
prch1:  mov  edi,dword prbuf
        add  edi,cfp_f
        add  edi,dword profs
        mov  [edi],cl
        inc  dword profs
        pop  edi
        ret
prtic:
        .global prtic
        push edi
        mov  edi,dword prbuf
        mov  ecx,dword profs
        call syspi
        .prtc2-dffnc
prtc1:  pop  edi
        ret
prtc2:  xor  eax,eax
        mov  dword erich,eax
        call err_0
        .byte 252
        jmp  prtc1
prtis:
        .global prtis
        cmp  dword dword ptr prich,0
        jnz  prts1
        cmp  dword dword ptr erich,0
        jz   prts1
        call prtic
prts1:  call prtnl
        ret
prtin:
        .global prtin
        push edi
        call icbld
        cmp  edi,dword dnamb
        jb   prti1
        cmp  edi,dword dnamp
        ja   prti1
        mov  dword dnamp,edi
prti1:  push edi
        call gtstg
        .err_-299-dffnc
        mov  dword dnamp,edi
        call prtst
        pop  edi
        ret
prtmi:
        .global prtmi
        call prtst
        mov  dword profs,prtmf
        call prtin
        call prtnl
        ret
prtmm:
        .global prtmm
        mov  ecx,dword dnamp
        sub  ecx,dword statb
        mov  edx,ecx
        mov  edi,offset encm1
        call prtmi
        mov  ecx,dword dname
        sub  ecx,dword dnamp
        mov  edx,ecx
        mov  edi,offset encm2
        call prtmi
        ret
prtmx:
        .global prtmx
        call prtst
        mov  dword profs,prtmf
        call prtin
        call prtis
        ret
prtnl:
        .global prtnl
        cmp  dword dword ptr headp,0
        jnz  prnl0
        call prtps
prnl0:  push edi
        mov  dword prtsa,ecx
        mov  dword prtsb,ebx
        mov  edi,dword prbuf
        mov  ecx,dword profs
        call syspr
        .prnl2-dffnc
        mov  ecx,dword prlnw
        add  edi,4*schar
        mov  ebx,dword nullw
prnl1:  mov  eax,ebx
        stosd
        loop prnl1
        mov  ebx,dword prtsb
        mov  ecx,dword prtsa
        pop  edi
        xor  eax,eax
        mov  dword profs,eax
        ret
prnl2:  cmp  dword dword ptr prtef,0
        jnz  prnl3
        mov  dword prtef,esp
        call err_0
        .byte 253
prnl3:  mov  ebx,nini8
        mov  ecx,dword kvstn
        mov  esi,dword r_fcb
        call sysej
prtnm:
        .global prtnm
        push ecx
        push edi
        push esi
        cmp  esi,dword state
        ja   prn02
        mov  edi,esi
        call prtvn
prn01:  pop  esi
        pop  edi
        pop  ecx
        ret
prn02:  mov  ebx,ecx
        cmp  dword [esi],offset b_pdt
        jne  prn03
        mov  edi,dword (4*pddfp)[esi]
        add  edi,ecx
        mov  edi,dword (4*pdfof)[edi]
        call prtvn
        mov  ecx,ch_pp
        call prtch
prn03:  cmp  dword [esi],offset b_tet
        jne  prn04
        mov  esi,dword (4*tenxt)[esi]
        jmp  prn03
prn04:  mov  edi,dword prnmv
        mov  ecx,dword hshtb
        jmp  prn07
prn05:  mov  edi,ecx
        add  ecx,4
        sub  edi,4*vrnxt
prn06:  mov  edi,dword (4*vrnxt)[edi]
prn07:  mov  edx,edi
        or   edx,edx
        jz   prn09
prn08:  mov  edi,dword (4*vrval)[edi]
        cmp  dword [edi],offset b_trt
        je   prn08
        cmp  edi,esi
        je   prn10
        mov  edi,edx
        jmp  prn06
prn09:  cmp  ecx,dword hshte
        jb   prn05
        mov  edi,esi
        call prtvl
        jmp  prn11
prn10:  mov  edi,edx
        mov  dword prnmv,edi
        call prtvn
prn11:  mov  edx,dword [esi]
        cmp  edx,offset b_pdt
        jne  prn13
        mov  ecx,ch_rp
prn12:  call prtch
        mov  ecx,ebx
        jmp  prn01
prn13:  mov  ecx,ch_bb
        call prtch
        mov  esi,dword [esp]
        mov  edx,dword [esi]
        cmp  edx,offset b_tet
        jne  prn15
        mov  edi,dword (4*tesub)[esi]
        mov  esi,ebx
        call prtvl
        mov  ebx,esi
prn14:  mov  ecx,ch_rb
        jmp  prn12
prn15:  mov  ecx,ebx
        shr  ecx,2
        cmp  edx,offset b_art
        je   prn16
        sub  ecx,vcvlb
        mov  edx,ecx
        call prtin
        jmp  prn14
prn16:  mov  edx,dword (4*arofs)[esi]
        add  edx,4
        shr  edx,2
        sub  ecx,edx
        mov  edx,ecx
        mov  ecx,dword (4*arndm)[esi]
        add  esi,dword (4*arofs)[esi]
        sub  esi,4*arlbd
prn17:  sub  esi,4*ardms
        mov  dword prnsi,edx
        mov  eax,dword (4*ardim)[esi]
        call rmi_
        push edx
        mov  edx,dword prnsi
        mov  eax,dword (4*ardim)[esi]
        call dvi_
        loop prn17
        xor  edi,edi
        mov  ebx,dword (4*arndm)[esi]
        jmp  prn19
prn18:  mov  ecx,ch_cm
        call prtch
prn19:  pop  edx
        add  esi,edi
        add  edx,dword (4*arlbd)[esi]
        sub  esi,edi
        call prtin
        add  edi,4*ardms
        dec  ebx
        jnz  prn18
        jmp  prn14
prtnv:
        .global prtnv
        call prtnm
        push edi
        push ecx
        mov  edi,offset tmbeb
        call prtst
        mov  edi,esi
        add  edi,ecx
        mov  edi,dword [edi]
        call prtvl
        call prtnl
        pop  ecx
        pop  edi
        ret
prtpg:
        .global prtpg
        cmp  dword stage,stgxt
        je   prp01
        cmp  dword dword ptr lstlc,0
        jz   prp06
        xor  eax,eax
        mov  dword lstlc,eax
prp01:  push edi
        cmp  dword dword ptr prstd,0
        jnz  prp02
        cmp  dword dword ptr prich,0
        jnz  prp03
        cmp  dword dword ptr precl,0
        jz   prp03
prp02:  call sysep
        jmp  prp04
prp03:  mov  edi,dword headp
        mov  dword headp,esp
        call prtnl
        call prtnl
        call prtnl
        mov  dword lstlc,num03
        mov  dword headp,edi
prp04:  cmp  dword dword ptr headp,0
        jnz  prp05
        mov  dword headp,esp
        push esi
        mov  edi,offset headr
        call prtst
        call sysid
        call prtst
        call prtnl
        mov  edi,esi
        call prtst
        call prtnl
        call prtnl
        call prtnl
        add  dword lstlc,num04
        pop  esi
prp05:  pop  edi
prp06:  ret
prtps:
        .global prtps
        mov  eax,dword prsto
        mov  dword prstd,eax
        call prtpg
        xor  eax,eax
        mov  dword prstd,eax
        ret
prtsn:
        .global prtsn
        push edi
        mov  dword prsna,ecx
        mov  edi,offset tmasb
        call prtst
        mov  dword profs,num04
        mov  edx,dword kvstn
        call prtin
        mov  dword profs,prsnf
        mov  edi,dword kvfnc
        mov  ecx,ch_li
prsn1:  or   edi,edi
        jz   prsn2
        call prtch
        dec  edi
        jmp  prsn1
prsn2:  mov  ecx,ch_bl
        call prtch
        mov  ecx,dword prsna
        pop  edi
        ret
prtst:
        .global prtst
        cmp  dword dword ptr headp,0
        jnz  prst0
        call prtps
prst0:  mov  dword prsva,ecx
        mov  dword prsvb,ebx
        xor  ebx,ebx
prst1:  mov  ecx,dword (4*sclen)[edi]
        sub  ecx,ebx
#        or   ecx,ecx         (optimized)
        jz   prst4
        push esi
        push edi
        mov  esi,edi
        mov  edi,dword prlen
        sub  edi,dword profs
#        or   edi,edi         (optimized)
        jnz  prst2
        call prtnl
        mov  edi,dword prlen
prst2:  cmp  ecx,edi
        jb   prst3
        mov  ecx,edi
prst3:  mov  edi,dword prbuf
        lea  esi,[cfp_f+esi+ebx]
        add  edi,cfp_f
        add  edi,dword profs
        add  ebx,ecx
        add  dword profs,ecx
        mov  dword prsvc,ebx
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
        mov  ebx,dword prsvc
        pop  edi
        pop  esi
        jmp  prst1
prst4:  mov  ebx,dword prsvb
        mov  ecx,dword prsva
        ret
prttr:
        .global prttr
        push edi
        call prtic
        mov  edi,dword prbuf
        mov  ecx,dword prlnw
        add  edi,4*schar
        mov  ebx,dword nullw
prtt1:  mov  eax,ebx
        stosd
        loop prtt1
        xor  eax,eax
        mov  dword profs,eax
        pop  edi
        ret
prtvl:
        .global prtvl
        push esi
        push edi
        cmp  esp,lowspmin
        jb   sec06
prv01:  mov  eax,dword (4*idval)[edi]
        mov  dword prvsi,eax
        mov  esi,dword [edi]
        movzx esi,byte [esi-1]
        cmp  esi,bl__t
        jge  prv02
        jmp  dword l0016[esi*4]
        dseg_
l0016:
        .long prv05
        .long prv02
        .long prv02
        .long prv08
        .long prv09
        .long prv02
        .long prv02
        .long prv02
        .long prv08
        .long prv11
        .long prv12
        .long prv13
        .long prv13
        .long prv02
        .long prv02
        .long prv02
        .long prv10
        .long prv04
        dsegend_
        cseg_
prv02:  call dtype
        call prtst
prv03:  pop  edi
        pop  esi
        ret
prv04:  mov  edi,dword (4*trval)[edi]
        jmp  prv01
prv05:  mov  esi,edi
        mov  edi,offset scarr
        call prtst
        mov  ecx,ch_pp
        call prtch
        add  esi,dword (4*arofs)[esi]
        mov  edi,dword [esi]
        call prtst
prv06:  mov  ecx,ch_rp
        call prtch
prv07:  mov  ecx,ch_bl
        call prtch
        mov  ecx,ch_nm
        call prtch
        mov  edx,dword prvsi
        call prtin
        jmp  prv03
prv08:  push edi
        call gtstg
        .err_-299-dffnc
        call prtst
        mov  dword dnamp,edi
        jmp  prv03
prv09:  mov  esi,dword (4*nmbas)[edi]
        mov  ecx,dword [esi]
        cmp  ecx,offset b_kvt
        je   prv02
        cmp  ecx,offset b_evt
        je   prv02
        mov  ecx,ch_dt
        call prtch
        mov  ecx,dword (4*nmofs)[edi]
        call prtnm
        jmp  prv03
prv10:  call dtype
        call prtst
        jmp  prv07
prv11:  mov  ecx,ch_sq
        call prtch
        call prtst
        call prtch
        jmp  prv03
prv12:  mov  ecx,ch_as
        call prtch
        mov  edi,dword (4*sevar)[edi]
        call prtvn
        jmp  prv03
prv13:  mov  esi,edi
        call dtype
        call prtst
        mov  ecx,ch_pp
        call prtch
        mov  ecx,dword (4*tblen)[esi]
        shr  ecx,2
        sub  ecx,tbsi_
        cmp  dword [esi],offset b_tbt
        je   prv14
        add  ecx,vctbd
prv14:  mov  edx,ecx
        call prtin
        jmp  prv06
prtvn:
        .global prtvn
        push edi
        add  edi,4*vrsof
        cmp  dword dword ptr (4*sclen)[edi],0
        jnz  prvn1
        mov  edi,dword (4*vrsvo)[edi]
prvn1:  call prtst
        pop  edi
        ret
rcbld:
        .global rcbld
        mov  edi,dword dnamp
        add  edi,4*rcsi_
        cmp  edi,dword dname
        jb   rcbl1
        mov  ecx,4*rcsi_
        call alloc
        add  edi,ecx
rcbl1:  mov  dword dnamp,edi
        sub  edi,4*rcsi_
        mov  dword [edi],offset b_rcl
        lea  eax,dword (4*rcval)[edi]
        call str_
        ret
readr:
        .global readr
        mov  edi,dword r_cni
        or   edi,edi
        jnz  read3
        cmp  dword dword ptr cnind,0
        jnz  reada
        cmp  dword stage,stgic
        jne  read3
reada:  mov  ecx,dword cswin
        xor  esi,esi
        call alocs
        call sysrd
        .read4-dffnc
        inc  dword rdnln
        dec  dword polct
        cmp  dword dword ptr polct,0
        jnz  read0
        xor  ecx,ecx
        mov  ebx,dword rdnln
        call syspl
        .err_-320-dffnc
        .err_-299-dffnc
        .err_-299-dffnc
        mov  dword polcs,ecx
        mov  dword polct,ecx
read0:  mov  eax,dword (4*sclen)[edi]
        cmp  eax,dword cswin
        jbe  read1
        mov  eax,dword cswin
        mov  dword (4*sclen)[edi],eax
read1:  mov  ebx,esp
        call trimr
read2:  mov  dword r_cni,edi
read3:  ret
read4:  cmp  dword dword ptr (4*sclen)[edi],0
        jz   read5
        xor  ebx,ebx
        mov  dword rdnln,ebx
        call trimr
        call newfn
        jmp  reada
read5:  mov  dword dnamp,edi
        cmp  dword dword ptr cnind,0
        jz   read6
        xor  esi,esi
        call sysif
        .err_-299-dffnc
        mov  ecx,dword cnind
        add  ecx,vcvlb
        sal  ecx,2
        mov  edi,dword r_ifa
        add  edi,ecx
        mov  eax,dword [edi]
        mov  dword r_sfc,eax
        mov  dword [edi],offset nulls
        mov  edi,dword r_ifl
        add  edi,ecx
        mov  esi,dword [edi]
        mov  edx,dword (4*icval)[esi]
        mov  dword rdnln,edx
        mov  dword [edi],offset inton
        dec  dword cnind
        mov  ebx,dword cmpsn
        inc  ebx
        mov  edx,ebx
        call icbld
        mov  esi,dword r_sfn
        mov  ebx,esp
        call tfind
        .err_-299-dffnc
        mov  eax,dword r_sfc
        mov  dword (4*teval)[esi],eax
        cmp  dword stage,stgic
        je   reada
        cmp  dword dword ptr cnind,0
        jnz  reada
        mov  esi,dword r_ici
        xor  eax,eax
        mov  dword r_ici,eax
        mov  ecx,dword cnsil
        mov  ebx,dword cnspt
        sub  ecx,ebx
        mov  dword scnil,ecx
        xor  eax,eax
        mov  dword scnpt,eax
        call sbstr
        mov  dword r_cim,edi
        jmp  read2
read6:  xor  edi,edi
        jmp  read2
sbstr:
        .global sbstr
        or   ecx,ecx
        jz   sbst2
        call alocs
        mov  ecx,edx
        mov  edx,edi
        lea  esi,[cfp_f+esi+ebx]
        add  edi,cfp_f
        shrd eax,ecx,1
        shr  ecx,2
        rep  movsd
        adc  ecx,ecx
        rep  movsw
        shld ecx,eax,1
        rep  movsb
        mov  edi,edx
sbst1:  xor  esi,esi
        ret
sbst2:  mov  edi,offset nulls
        jmp  sbst1
stgcc:
        .global stgcc
        mov  ecx,dword polcs
        mov  ebx,num01
        mov  edx,dword kvstl
        cmp  dword dword ptr kvpfl,0
        jnz  stgc1
        or   edx,edx
        jl   stgc3
        cmp  dword dword ptr r_stc,0
        jz   stgc2
stgc1:  mov  ebx,ecx
        mov  ecx,num01
        jmp  stgc3
stgc2:  mov  edx,ecx
        sub  edx,dword kvstl
#        or   edx,edx         (optimized)
        jle  stgc3
        mov  edx,dword kvstl
        mov  ecx,edx
stgc3:  mov  dword stmcs,ecx
        mov  dword stmct,ecx
        mov  dword polct,ebx
        ret
tfind:
        .global tfind
        push ebx
        push edi
        push esi
        mov  ecx,dword (4*tblen)[esi]
        shr  ecx,2
        sub  ecx,tbbuk
        mov  edx,ecx
        mov  dword tfnsi,edx
        mov  esi,dword [edi]
        movzx esi,byte [esi-1]
        cmp  esi,bl__d
        jge  tfn00
        jmp  dword l0017[esi*4]
        dseg_
l0017:
        .long tfn00
        .long tfn00
        .long tfn00
        .long tfn02
        .long tfn04
        .long tfn03
        .long tfn03
        .long tfn03
        .long tfn02
        .long tfn05
        .long tfn00
        .long tfn00
        .long tfn00
        .long tfn00
        .long tfn00
        .long tfn00
        .long tfn00
        dsegend_
        cseg_
tfn00:  mov  ecx,dword (4*1)[edi]
tfn01:  mov  edx,ecx
        jmp  tfn06
tfn02:  mov  edx,dword (4*1)[edi]
        or   edx,edx
        jge  tfn06
        neg  edx
        jo   tfn06
        jmp  tfn06
tfn03:  mov  ecx,dword [edi]
        jmp  tfn01
tfn04:  mov  ecx,dword (4*nmofs)[edi]
        jmp  tfn01
tfn05:  call hashs
tfn06:  mov  eax,dword tfnsi
        call rmi_
        sal  edx,2
        mov  esi,dword [esp]
        add  esi,edx
        mov  edi,dword (4*tbbuk)[esi]
        cmp  edi,dword [esp]
        je   tfn10
tfn07:  mov  ebx,edi
        mov  edi,dword (4*tesub)[edi]
        mov  esi,dword (4*1)[esp]
        call ident
        .tfn08-dffnc
        mov  esi,ebx
        mov  edi,dword (4*tenxt)[esi]
        cmp  edi,dword [esp]
        jne  tfn07
        mov  edx,4*tenxt
        jmp  tfn11
tfn08:  mov  esi,ebx
        mov  ecx,4*teval
        mov  ebx,dword (4*2)[esp]
        or   ebx,ebx
        jnz  tfn09
        call acess
        .tfn12-dffnc
        xor  ebx,ebx
tfn09:  add  esp,4*num03
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
tfn10:  add  edx,4*tbbuk
        mov  esi,dword [esp]
tfn11:  mov  edi,dword [esp]
        mov  edi,dword (4*tbinv)[edi]
        mov  ebx,dword (4*2)[esp]
        or   ebx,ebx
        jz   tfn09
        mov  ebx,edi
        mov  ecx,4*tesi_
        call alloc
        add  esi,edx
        mov  dword [esi],edi
        mov  dword [edi],offset b_tet
        mov  dword (4*teval)[edi],ebx
        pop  dword (4*tenxt)[edi]
        pop  dword (4*tesub)[edi]
        pop  ebx
        mov  esi,edi
        mov  ecx,4*teval
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
tfn12:  pop  eax
        jmp  exi__1
tmake:
        .global tmake
        mov  ecx,edx
        add  ecx,tbsi_
        sal  ecx,2
        call alloc
        mov  ebx,edi
        mov  eax,offset b_tbt
        stosd
        xor  eax,eax
        stosd
        mov  eax,ecx
        stosd
        mov  eax,esi
        stosd
tma01:  mov  eax,ebx
        stosd
        dec  edx
        jnz  tma01
        mov  edi,ebx
        ret
vmake:
        .global vmake
        mov  ebx,ecx
        add  ecx,vcsi_
        sal  ecx,2
        cmp  ecx,dword mxlen
        ja   vmak2
        call alloc
        mov  dword [edi],offset b_vct
        xor  eax,eax
        mov  dword (4*idval)[edi],eax
        mov  dword (4*vclen)[edi],ecx
        mov  edx,esi
        mov  esi,edi
        add  esi,4*vcvls
vmak1:  mov  dword [esi],edx
        lea  esi,[esi+4]
        dec  ebx
        jnz  vmak1
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
vmak2:  pop  eax
        jmp  exi__1
scane:
        .global scane
        xor  eax,eax
        mov  dword scnbl,eax
        mov  dword scnsa,ecx
        mov  dword scnsb,ebx
        mov  dword scnsc,edx
        cmp  dword dword ptr scnrs,0
        jz   scn03
        mov  esi,dword scntp
        mov  edi,dword r_scp
        xor  eax,eax
        mov  dword scnrs,eax
        jmp  scn13
scn01:  call readr
        mov  ebx,4*dvubs
        or   edi,edi
        jz   scn30
        add  edi,cfp_f
        movzx edx,byte [edi]
        cmp  edx,ch_dt
        je   scn02
        cmp  edx,ch_pl
        jne  scn30
scn02:  call nexts
        mov  dword scnpt,num01
        mov  dword scnbl,esp
scn03:  mov  ecx,dword scnpt
        cmp  ecx,dword scnil
        je   scn01
        mov  esi,dword r_cim
        lea  esi,[cfp_f+esi+ecx]
        mov  dword scnse,ecx
        mov  edx,offset opdvs
        mov  ebx,4*dvubs
        jmp  scn06
scn05:  or   ebx,ebx
        jz   scn10
        inc  dword scnse
        cmp  ecx,dword scnil
        je   scn01
        mov  dword scnbl,esp
scn06:  movzx edi,byte [esi]
        inc  esi
        inc  ecx
        mov  dword scnpt,ecx
        cmp  edi,cfp_u
        jge  scn07
        jmp  dword l0018[edi*4]
        dseg_
l0018:
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn05
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn07
        .long scn05
        .long scn37
        .long scn17
        .long scn41
        .long scn36
        .long scn38
        .long scn44
        .long scn16
        .long scn25
        .long scn26
        .long scn49
        .long scn33
        .long scn31
        .long scn34
        .long scn32
        .long scn40
        .long scn08
        .long scn08
        .long scn08
        .long scn08
        .long scn08
        .long scn08
        .long scn08
        .long scn08
        .long scn08
        .long scn08
        .long scn29
        .long scn30
        .long scn28
        .long scn46
        .long scn27
        .long scn45
        .long scn42
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn20
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn21
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn28
        .long scn07
        .long scn27
        .long scn37
        .long scn24
        .long scn07
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn20
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn21
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn09
        .long scn07
        .long scn43
        .long scn07
        .long scn35
        .long scn07
        dsegend_
        cseg_
scn07:  or   ebx,ebx
        jz   scn10
        call err_0
        .byte 230
scn08:  or   ebx,ebx
        jz   scn09
        xor  edx,edx
scn09:  cmp  ecx,dword scnil
        je   scn11
        xor  ebx,ebx
        jmp  scn06
scn10:  dec  ecx
scn11:  mov  dword scnpt,ecx
        mov  ebx,dword scnse
        sub  ecx,ebx
        mov  esi,dword r_cim
        or   edx,edx
        jnz  scn15
        call sbstr
        mov  dword dnamp,edi
        call gtnum
        .scn14-dffnc
scn12:  mov  esi,t_con
scn13:  mov  ecx,dword scnsa
        mov  ebx,dword scnsb
        mov  edx,dword scnsc
        mov  dword r_scp,edi
        mov  dword scntp,esi
        xor  eax,eax
        mov  dword scngo,eax
        ret
scn14:  call err_0
        .byte 231
scn15:  call sbstr
        cmp  dword dword ptr scncc,0
        jnz  scn13
        call gtnvr
        .err_-299-dffnc
        mov  esi,t_var
        jmp  scn13
scn16:  or   ebx,ebx
        jz   scn10
        mov  ebx,ch_sq
        jmp  scn18
scn17:  or   ebx,ebx
        jz   scn10
        mov  ebx,ch_dq
scn18:  cmp  ecx,dword scnil
        je   scn19
        movzx edx,byte [esi]
        inc  esi
        inc  ecx
        cmp  edx,ebx
        jne  scn18
        mov  ebx,dword scnpt
        mov  dword scnpt,ecx
        dec  ecx
        sub  ecx,ebx
        mov  esi,dword r_cim
        call sbstr
        jmp  scn12
scn19:  mov  dword scnpt,ecx
        call err_0
        .byte 232
scn20:  mov  edi,t_fgo
        jmp  scn22
scn21:  mov  edi,t_sgo
scn22:  cmp  dword dword ptr scngo,0
        jz   scn09
scn23:  or   ebx,ebx
        jz   scn10
        mov  esi,edi
        jmp  scn13
scn24:  or   ebx,ebx
        jz   scn09
        jmp  scn07
scn25:  mov  edi,t_lpr
        or   ebx,ebx
        jnz  scn23
        or   edx,edx
        jz   scn10
        mov  ebx,dword scnse
        mov  dword scnpt,ecx
        dec  ecx
        sub  ecx,ebx
        mov  esi,dword r_cim
        call sbstr
        call gtnvr
        .err_-299-dffnc
        mov  esi,t_fnc
        jmp  scn13
scn26:  mov  edi,t_rpr
        jmp  scn23
scn27:  mov  edi,t_rbr
        jmp  scn23
scn28:  mov  edi,t_lbr
        jmp  scn23
scn29:  mov  edi,t_col
        jmp  scn23
scn30:  mov  edi,t_smc
        jmp  scn23
scn31:  mov  edi,t_cma
        jmp  scn23
scn32:  or   ebx,ebx
        jz   scn09
        add  edx,ebx
scn33:  or   edx,edx
        jz   scn09
        or   ebx,ebx
        jz   scn48
        add  edx,ebx
scn34:  or   edx,edx
        jz   scn09
        or   ebx,ebx
        jz   scn48
        add  edx,ebx
scn35:  add  edx,ebx
scn36:  add  edx,ebx
scn37:  add  edx,ebx
scn38:  add  edx,ebx
scn39:  add  edx,ebx
scn40:  add  edx,ebx
scn41:  add  edx,ebx
scn42:  add  edx,ebx
scn43:  add  edx,ebx
scn44:  add  edx,ebx
scn45:  add  edx,ebx
scn46:  or   ebx,ebx
        jz   scn10
        mov  edi,edx
        movzx edx,byte [esi]
        mov  esi,t_bop
        cmp  ecx,dword scnil
        je   scn47
        cmp  edx,ch_bl
        je   scn47
        cmp  edx,ch_ht
        je   scn47
        cmp  edx,ch_sm
        je   scn47
        cmp  edx,ch_cl
        je   scn47
        cmp  edx,ch_rp
        je   scn47
        cmp  edx,ch_rb
        je   scn47
        cmp  edx,ch_cb
        je   scn47
        add  edi,4*dvbs_
        mov  esi,t_uop
        cmp  dword scntp,t_uok
        jbe  scn13
scn47:  cmp  dword dword ptr scnbl,0
        jnz  scn13
scn48:  call err_0
        .byte 233
scn49:  or   ebx,ebx
        jz   scn10
        cmp  ecx,dword scnil
        je   scn39
        mov  edi,ecx
        mov  dword scnof,ecx
        movzx ecx,byte [esi]
        inc  esi
        cmp  ecx,ch_as
        jne  scn50
        inc  edi
        cmp  edi,dword scnil
        je   scn51
        movzx ecx,byte [esi]
        cmp  ecx,ch_bl
        je   scn51
        cmp  ecx,ch_ht
        je   scn51
scn50:  mov  ecx,dword scnof
        mov  esi,dword r_cim
        lea  esi,[cfp_f+esi+ecx]
        jmp  scn39
scn51:  mov  dword scnpt,edi
        mov  ecx,edi
        jmp  scn37
scngf:
        .global scngf
        call scane
        cmp  esi,t_lpr
        je   scng1
        cmp  esi,t_lbr
        je   scng2
        call err_0
        .byte 234
scng1:  mov  ebx,num01
        call expan
        mov  ecx,offset opdvn
        cmp  edi,dword statb
        jbe  scng3
        cmp  edi,dword state
        jb   scng4
        jmp  scng3
scng2:  mov  ebx,num02
        call expan
        mov  ecx,offset opdvd
scng3:  push ecx
        push edi
        call expop
        pop  edi
scng4:  ret
setvr:
        .global setvr
        cmp  edi,dword state
        ja   setv1
        mov  esi,edi
        mov  dword (4*vrget)[edi],offset b_vrl
        cmp  dword (4*vrsto)[edi],offset b_vre
        je   setv1
        mov  dword (4*vrsto)[edi],offset b_vrs
        mov  esi,dword (4*vrval)[esi]
        cmp  dword [esi],offset b_trt
        jne  setv1
        mov  dword (4*vrget)[edi],offset b_vra
        mov  dword (4*vrsto)[edi],offset b_vrv
setv1:  ret
sorta:
        .global sorta
        pop  prc_+60
        mov  dword srtsr,ecx
        mov  dword srtst,4*num01
        xor  eax,eax
        mov  dword srtof,eax
        mov  dword srtdf,offset nulls
        pop  dword r_sxr
        pop  edi
        mov  ecx,esp
        call gtarr
        .srt18-dffnc
        .srt16-dffnc
        push edi
        push edi
        call copyb
        .err_-299-dffnc
        push edi
        mov  edi,dword r_sxr
        mov  esi,dword (4*num01)[esp]
        cmp  dword [esi],offset b_vct
        jne  srt02
        cmp  edi,offset nulls
        je   srt01
        call gtnvr
        .err_-257-dffnc
        mov  dword srtdf,edi
srt01:  mov  edx,4*vclen
        mov  ebx,4*vcvls
        mov  ecx,dword (4*vclen)[esi]
        sub  ecx,4*vcsi_
        jmp  srt04
srt02:  mov  edx,dword (4*ardim)[esi]
        mov  ecx,edx
        sal  ecx,2
        mov  ebx,4*arvls
        mov  edx,4*arpro
        cmp  dword (4*arndm)[esi],num01
        je   srt04
        cmp  dword (4*arndm)[esi],num02
        jne  srt16
        mov  edx,dword (4*arlb2)[esi]
        cmp  edi,offset nulls
        je   srt03
        call gtint
        .srt17-dffnc
        mov  edx,dword (4*icval)[edi]
srt03:  sub  edx,dword (4*arlb2)[esi]
        jo   srt17
        or   edx,edx
        jl   srt17
        sub  edx,dword (4*ardm2)[esi]
#        or   edx,edx         (optimized)
        jge  srt17
        add  edx,dword (4*ardm2)[esi]
        mov  ecx,edx
        sal  ecx,2
        mov  dword srtof,ecx
        mov  edx,dword (4*ardm2)[esi]
        mov  ecx,edx
        mov  edi,ecx
        sal  ecx,2
        mov  dword srtst,ecx
        mov  edx,dword (4*ardim)[esi]
        mov  ecx,edx
        sal  ecx,2
        mov  edx,dword (4*arlen)[esi]
        sub  edx,ecx
        sub  edx,4
        mov  ebx,dword (4*arofs)[esi]
        add  ebx,4
srt04:  cmp  ecx,4*num01
        jbe  srt15
        mov  dword srtsn,ecx
        mov  dword srtso,edx
        mov  edx,dword (4*arlen)[esi]
        add  edx,esi
        mov  dword srtsf,ebx
        add  esi,ebx
srt05:  mov  edi,dword [esi]
srt06:  cmp  dword [edi],offset b_trt
        jne  srt07
        mov  edi,dword (4*trval)[edi]
        jmp  srt06
srt07:  mov  dword [esi],edi
        lea  esi,[esi+4]
        cmp  esi,edx
        jb   srt05
        mov  esi,dword [esp]
        mov  edi,dword srtsf
        mov  ebx,dword srtst
        add  esi,dword srtso
        add  esi,4
        mov  edx,dword srtsn
        shr  edx,2
        mov  dword srtnr,edx
srt08:  mov  dword [esi],edi
        lea  esi,[esi+4]
        add  edi,ebx
        dec  edx
        jnz  srt08
srt09:  mov  ecx,dword srtsn
        mov  edx,dword srtnr
        shr  edx,1
        sal  edx,2
srt10:  call sorth
        sub  edx,4
#        or   edx,edx         (optimized)
        jnz  srt10
        mov  edx,ecx
srt11:  sub  edx,4
#        or   edx,edx         (optimized)
        jz   srt12
        mov  edi,dword [esp]
        add  edi,dword srtso
        mov  esi,edi
        add  esi,edx
        mov  ebx,dword (4*num01)[esi]
        mov  eax,dword (4*num01)[edi]
        mov  dword (4*num01)[esi],eax
        mov  dword (4*num01)[edi],ebx
        mov  ecx,edx
        mov  edx,4*num01
        call sorth
        mov  edx,ecx
        jmp  srt11
srt12:  mov  edi,dword [esp]
        mov  edx,edi
        add  edx,dword srtso
        add  edi,dword srtsf
        mov  ebx,dword srtst
srt13:  add  edx,4
        mov  esi,edx
        mov  esi,dword [esi]
        add  esi,dword (4*num01)[esp]
        mov  ecx,ebx
        shr  ecx,2
        rep  movsd
        dec  dword srtnr
        cmp  dword dword ptr srtnr,0
        jnz  srt13
srt15:  pop  edi
        add  esp,4
        xor  eax,eax
        mov  dword r_sxl,eax
        xor  eax,eax
        mov  dword r_sxr,eax
        mov  eax,prc_+60
        lea  eax,[eax+2]
        jmp  eax
srt16:  call err_1
        .byte 0
srt17:  call err_1
        .byte 2
srt18:  mov  eax,prc_+60
        jmp  exi__1
sortc:
        .global sortc
        mov  dword srts1,ecx
        mov  dword srts2,ebx
        mov  dword srtsc,edx
        add  esi,dword srtof
        mov  edi,esi
        add  esi,ecx
        add  edi,ebx
        mov  esi,dword [esi]
        mov  edi,dword [edi]
        cmp  dword srtdf,offset nulls
        jne  src12
src01:  mov  edx,dword [esi]
        cmp  edx,dword [edi]
        jne  src02
        cmp  edx,offset b_scl
        je   src09
        cmp  edx,offset b_icl
        je   src14
src02:  mov  dword r_sxl,esi
        mov  dword r_sxr,edi
        cmp  edx,offset b_scl
        je   src11
        cmp  dword [edi],offset b_scl
        je   src11
src14:  push esi
        push edi
        call acomp
        .src10-dffnc
        .src10-dffnc
        .src03-dffnc
        .src08-dffnc
        .src05-dffnc
src03:  cmp  dword dword ptr srtsr,0
        jnz  src06
src04:  mov  edx,dword srtsc
        pop  eax
        jmp  exi__1
src05:  cmp  dword dword ptr srtsr,0
        jnz  src04
src06:  mov  edx,dword srtsc
        pop  eax
        lea  eax,[eax+2]
        jmp  eax
src07:  cmp  esi,edi
        jb   src03
        cmp  esi,edi
        ja   src05
src08:  mov  eax,dword srts1
        cmp  eax,dword srts2
        jb   src04
        jmp  src06
src09:  push esi
        push edi
        call lcomp
        .err_-299-dffnc
        .err_-299-dffnc
        .src03-dffnc
        .src08-dffnc
        .src05-dffnc
src10:  mov  esi,dword r_sxl
        mov  edi,dword r_sxr
        mov  edx,dword [esi]
        cmp  edx,dword [edi]
        je   src07
src11:  mov  esi,edx
        mov  edi,dword [edi]
        movzx esi,byte [esi-1]
        movzx edi,byte [edi-1]
        cmp  esi,edi
        ja   src05
        jmp  src03
src12:  call sortf
        push esi
        mov  esi,edi
        call sortf
        mov  edi,esi
        pop  esi
        jmp  src01
sortf:
        .global sortf
        cmp  dword [esi],offset b_pdt
        jne  srtf3
        push edi
        mov  edi,dword srtfd
        or   edi,edi
        jz   srtf4
        cmp  edi,dword (4*pddfp)[esi]
        jne  srtf4
        mov  eax,dword srtdf
        cmp  eax,dword srtff
        jne  srtf4
        add  esi,dword srtfo
srtf1:  mov  esi,dword [esi]
srtf2:  pop  edi
srtf3:  ret
srtf4:  mov  edi,esi
        mov  edi,dword (4*pddfp)[edi]
        mov  dword srtfd,edi
        mov  edx,dword (4*fargs)[edi]
        sal  edx,2
        add  edi,dword (4*dflen)[edi]
srtf5:  sub  edx,4
        sub  edi,4
        mov  eax,dword [edi]
        cmp  eax,dword srtdf
        je   srtf6
        or   edx,edx
        jnz  srtf5
        jmp  srtf2
srtf6:  mov  eax,dword [edi]
        mov  dword srtff,eax
        add  edx,4*pdfld
        mov  dword srtfo,edx
        add  esi,edx
        jmp  srtf1
sorth:
        .global sorth
        pop  prc_+64
        mov  dword srtsn,ecx
        mov  dword srtwc,edx
        mov  esi,dword [esp]
        add  esi,dword srtso
        add  esi,edx
        mov  eax,dword [esi]
        mov  dword srtrt,eax
        add  edx,edx
srh01:  cmp  edx,dword srtsn
        ja   srh03
        cmp  edx,dword srtsn
        je   srh02
        mov  edi,dword [esp]
        mov  esi,dword (4*num01)[esp]
        add  edi,dword srtso
        add  edi,edx
        mov  ecx,dword (4*num01)[edi]
        mov  ebx,dword [edi]
        call sortc
        .srh02-dffnc
        add  edx,4
srh02:  mov  esi,dword (4*num01)[esp]
        mov  edi,dword [esp]
        add  edi,dword srtso
        mov  ebx,edi
        add  edi,edx
        mov  ecx,dword [edi]
        mov  edi,ebx
        mov  ebx,dword srtrt
        call sortc
        .srh03-dffnc
        mov  edi,dword [esp]
        add  edi,dword srtso
        mov  esi,edi
        mov  ecx,edx
        shr  edx,2
        shr  edx,1
        sal  edx,2
        add  esi,ecx
        add  edi,edx
        mov  eax,dword [esi]
        mov  dword [edi],eax
        mov  edx,ecx
        add  edx,edx
        jc   srh03
        jmp  srh01
srh03:  shr  edx,2
        shr  edx,1
        sal  edx,2
        mov  edi,dword [esp]
        add  edi,dword srtso
        add  edi,edx
        mov  eax,dword srtrt
        mov  dword [edi],eax
        mov  ecx,dword srtsn
        mov  edx,dword srtwc
        jmp  [prc_+64]
trace:
        .global trace
        pop  prc_+68
        call gtstg
        .trc15-dffnc
        add  edi,cfp_f
        movzx ecx,byte [edi]
        cmp  cl,'a'
        jb   l0019
        cmp  cl,'z'
        ja   l0019
        sub  cl,32
l0019:
        mov  edi,dword [esp]
        mov  dword [esp],esi
        mov  edx,trtac
        cmp  ecx,ch_la
        je   trc10
        mov  edx,trtvl
        cmp  ecx,ch_lv
        je   trc10
        cmp  ecx,ch_bl
        je   trc10
        cmp  ecx,ch_lf
        je   trc01
        cmp  ecx,ch_lr
        je   trc01
        cmp  ecx,ch_ll
        je   trc03
        cmp  ecx,ch_lk
        je   trc06
        cmp  ecx,ch_lc
        jne  trc15
trc01:  call gtnvr
        .trc16-dffnc
        add  esp,4
        mov  edi,dword (4*vrfnc)[edi]
        cmp  dword [edi],offset b_pfc
        jne  trc17
        cmp  ecx,ch_lr
        je   trc02
        mov  dword (4*pfctr)[edi],esi
        cmp  ecx,ch_lc
        je   exnul
trc02:  mov  dword (4*pfrtr)[edi],esi
        mov  eax,prc_+68
        lea  eax,[eax+4]
        jmp  eax
trc03:  call gtnvr
        .trc16-dffnc
        mov  esi,dword (4*vrlbl)[edi]
        cmp  dword [esi],offset b_trt
        jne  trc04
        mov  esi,dword (4*trlbl)[esi]
trc04:  cmp  esi,offset stndl
        je   trc16
        pop  ebx
        or   ebx,ebx
        jz   trc05
        mov  dword (4*vrlbl)[edi],ebx
        mov  dword (4*vrtra)[edi],offset b_vrt
        mov  edi,ebx
        mov  dword (4*trlbl)[edi],esi
        mov  eax,prc_+68
        lea  eax,[eax+4]
        jmp  eax
trc05:  mov  dword (4*vrlbl)[edi],esi
        mov  dword (4*vrtra)[edi],offset b_vrg
        mov  eax,prc_+68
        lea  eax,[eax+4]
        jmp  eax
trc06:  call gtnvr
        .trc16-dffnc
        cmp  dword dword ptr (4*vrlen)[edi],0
        jnz  trc16
        add  esp,4
        or   esi,esi
        jz   trc07
        mov  dword (4*trkvr)[esi],edi
trc07:  mov  edi,dword (4*vrsvp)[edi]
        cmp  edi,offset v_ert
        je   trc08
        cmp  edi,offset v_stc
        je   trc09
        cmp  edi,offset v_fnc
        jne  trc17
        mov  dword r_fnc,esi
        mov  eax,prc_+68
        lea  eax,[eax+4]
        jmp  eax
trc08:  mov  dword r_ert,esi
        mov  eax,prc_+68
        lea  eax,[eax+4]
        jmp  eax
trc09:  mov  dword r_stc,esi
        call stgcc
        mov  eax,prc_+68
        lea  eax,[eax+4]
        jmp  eax
trc10:  call gtvar
        .trc16-dffnc
        pop  ebx
        add  ecx,esi
        mov  edi,ecx
trc11:  mov  esi,dword [edi]
        cmp  dword [esi],offset b_trt
        jne  trc13
        cmp  edx,dword (4*trtyp)[esi]
        jb   trc13
        cmp  edx,dword (4*trtyp)[esi]
        je   trc12
        add  esi,4*trnxt
        mov  edi,esi
        jmp  trc11
trc12:  mov  esi,dword (4*trnxt)[esi]
        mov  dword [edi],esi
trc13:  or   ebx,ebx
        jz   trc14
        mov  dword [edi],ebx
        mov  edi,ebx
        mov  dword (4*trnxt)[edi],esi
        mov  dword (4*trtyp)[edi],edx
trc14:  mov  edi,ecx
        sub  edi,4*vrval
        call setvr
        mov  eax,prc_+68
        lea  eax,[eax+4]
        jmp  eax
trc15:  mov  eax,prc_+68
        jmp  exi__2
trc16:  add  esp,4
trc17:  mov  eax,prc_+68
        jmp  exi__1
trbld:
        .global trbld
        push edi
        mov  ecx,4*trsi_
        call alloc
        mov  dword [edi],offset b_trt
        mov  dword (4*trfnc)[edi],esi
        pop  dword (4*trtag)[edi]
        mov  dword (4*trtyp)[edi],ebx
        mov  dword (4*trval)[edi],offset nulls
        ret
trimr:
        .global trimr
        mov  esi,edi
        mov  ecx,dword (4*sclen)[edi]
        or   ecx,ecx
        jz   trim2
        lea  esi,[cfp_f+esi+ecx]
        or   ebx,ebx
        jz   trim3
        mov  edx,ch_bl
trim0:  dec  esi
        movzx ebx,byte [esi]
        cmp  ebx,ch_ht
        je   trim1
        cmp  ebx,edx
        jne  trim3
trim1:  dec  ecx
#        or   ecx,ecx         (optimized)
        jnz  trim0
trim2:  mov  dword dnamp,edi
        mov  edi,offset nulls
        jmp  trim5
trim3:  mov  dword (4*sclen)[edi],ecx
        mov  esi,edi
        lea  esi,[cfp_f+esi+ecx]
        add  ecx,3+4*schar
        and  ecx,-4
        add  ecx,edi
        mov  dword dnamp,ecx
        mov  ecx,cfp_c
        xor  edx,edx
trim4:  mov  [esi],dl
        inc  esi
        loop trim4
trim5:  xor  esi,esi
        ret
trxeq:
        .global trxeq
        mov  edx,dword r_cod
        mov  ebx,ebp
        sub  ebx,edx
        push dword kvtra
        push edi
        push esi
        push ecx
        push edx
        push ebx
        push dword flptr
        push 0
        mov  dword flptr,esp
        xor  eax,eax
        mov  dword kvtra,eax
        mov  edx,offset trxdc
        mov  dword r_cod,edx
        mov  ebp,edx
        mov  ebx,ecx
        mov  ecx,4*nmsi_
        call alloc
        mov  dword [edi],offset b_nml
        mov  dword (4*nmbas)[edi],esi
        mov  dword (4*nmofs)[edi],ebx
        mov  esi,dword (4*6)[esp]
        push edi
        push dword (4*trtag)[esi]
        mov  esi,dword (4*trfnc)[esi]
        mov  esi,dword (4*vrfnc)[esi]
        cmp  esi,offset stndf
        je   trxq2
        mov  ecx,num02
        jmp  cfunc
trxq1:  mov  esp,dword flptr
        add  esp,4
        pop  dword flptr
        pop  ebx
        pop  edx
        mov  edi,edx
        mov  eax,dword (4*cdstm)[edi]
        mov  dword kvstn,eax
        pop  ecx
        pop  esi
        pop  edi
        pop  dword kvtra
        add  ebx,edx
        mov  ebp,ebx
        mov  dword r_cod,edx
        ret
trxq2:  call err_0
        .byte 197
xscan:
        .global xscan
        mov  dword xscwb,ebx
        push ecx
        push ecx
        mov  edi,dword r_xsc
        mov  ecx,dword (4*sclen)[edi]
        mov  ebx,dword xsofs
        sub  ecx,ebx
#        or   ecx,ecx         (optimized)
        jz   xscn3
        lea  edi,[cfp_f+edi+ebx]
xscn1:  movzx ebx,byte [edi]
        inc  edi
        cmp  ebx,edx
        je   xscn4
        cmp  ebx,esi
        je   xscn5
        cmp  dword dword ptr [esp],0
        jz   xscn2
        inc  dword xsofs
        cmp  ebx,ch_ht
        je   xscn2
        cmp  ebx,ch_bl
        je   xscn2
        dec  dword xsofs
        xor  eax,eax
        mov  dword [esp],eax
xscn2:  dec  ecx
#        or   ecx,ecx         (optimized)
        jnz  xscn1
xscn3:  mov  esi,dword r_xsc
        mov  ecx,dword (4*sclen)[esi]
        mov  ebx,dword xsofs
        sub  ecx,ebx
        xor  eax,eax
        mov  dword r_xsc,eax
        xor  eax,eax
        mov  dword xscrt,eax
        jmp  xscn7
xscn4:  mov  dword xscrt,num01
        jmp  xscn6
xscn5:  mov  dword xscrt,num02
xscn6:  mov  esi,dword r_xsc
        mov  edx,dword (4*sclen)[esi]
        sub  edx,ecx
        mov  ecx,edx
        mov  ebx,dword xsofs
        sub  ecx,ebx
        inc  edx
        mov  dword xsofs,edx
xscn7:  xor  edi,edi
        call sbstr
        add  esp,4
        pop  ebx
        cmp  dword dword ptr (4*sclen)[edi],0
        jz   xscn8
        call trimr
xscn8:  mov  ecx,dword xscrt
        mov  ebx,dword xscwb
        ret
xscni:
        .global xscni
        pop  prc_+72
        call gtstg
        .xsci1-dffnc
        mov  dword r_xsc,edi
        xor  eax,eax
        mov  dword xsofs,eax
        or   ecx,ecx
        jz   xsci2
        mov  eax,prc_+72
        lea  eax,[eax+4]
        jmp  eax
xsci1:  mov  eax,prc_+72
        jmp  exi__1
xsci2:  mov  eax,prc_+72
        jmp  exi__2
        .sbttl "s p i t b o l -- stack overflow section"
exi__1: movsx eax,word [eax+0]
        add  eax,offset dffnc
        push eax
        xor  eax,eax
        ret
exi__2: movsx eax,word [eax+2]
        add  eax,offset dffnc
        push eax
        xor  eax,eax
        ret
exi__3: movsx eax,word [eax+4]
        add  eax,offset dffnc
        push eax
        xor  eax,eax
        ret
exi__4: movsx eax,word [eax+6]
        add  eax,offset dffnc
        push eax
        xor  eax,eax
        ret
exi__5: movsx eax,word [eax+8]
        add  eax,offset dffnc
        push eax
        xor  eax,eax
        ret
exi__6: movsx eax,word [eax+10]
        add  eax,offset dffnc
        push eax
        xor  eax,eax
        ret
exi__7: movsx eax,word [eax+12]
        add  eax,offset dffnc
        push eax
        xor  eax,eax
        ret
        .global sec06
sec06:
        add  dword errft,num04
        mov  esp,dword flptr
        cmp  dword dword ptr gbcfl,0
        jnz  stak1
        call err_0
        .byte 246
stak1:  mov  edi,offset endso
        xor  eax,eax
        mov  dword kvdmp,eax
        jmp  stopr
        .sbttl "s p i t b o l -- error section"
err_0:  pop  eax
        movzx eax,byte [eax]
        jmp  err_1a
err_1:  pop  eax
        movzx eax,byte [eax]
        add  eax,256
err_1a: jmp  err_
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
        inc  eax
err_:   xchg ecx,eax
        .global sec07
sec07:
error:  cmp  dword r_cim,offset cmlab
        je   cmple
        mov  dword kvert,ecx
        xor  eax,eax
        mov  dword scnrs,eax
        xor  eax,eax
        mov  dword scngo,eax
        mov  dword polcs,num01
        mov  dword polct,num01
        mov  edi,dword stage
        jmp  dword l0020[edi*4]
        dseg_
l0020:
        .long err01
        .long err04
        .long err04
        .long err05
        .long err01
        .long err04
        .long err04
        dsegend_
        cseg_
err01:  mov  esp,dword cmpxs
        cmp  dword dword ptr errsp,0
        jnz  err03
        mov  edx,dword cmpsn
        call filnm
        mov  ebx,dword scnse
        mov  edx,dword rdcln
        mov  edi,dword stage
        call sysea
        .erra3-dffnc
        push edi
        mov  eax,dword erich
        mov  dword erlst,eax
        call listr
        call prtis
        xor  eax,eax
        mov  dword erlst,eax
        mov  ecx,dword scnse
        or   ecx,ecx
        jz   err02
        mov  ebx,ecx
        inc  ecx
        mov  esi,dword r_cim
        call alocs
        mov  ecx,edi
        add  edi,cfp_f
        add  esi,cfp_f
erra1:  movzx edx,byte [esi]
        inc  esi
        cmp  edx,ch_ht
        je   erra2
        mov  edx,ch_bl
erra2:  mov  al,dl
        stosb
        dec  ebx
        jnz  erra1
        mov  esi,ch_ex
        mov  eax,esi
        mov  [edi],al
        mov  dword profs,stnpd
        mov  edi,ecx
        call prtst
err02:  call prtis
        pop  edi
        or   edi,edi
        jz   erra0
        call prtst
erra0:  call ermsg
        add  dword lstlc,num03
erra3:  xor  edi,edi
        cmp  dword errft,num03
        ja   stopr
        inc  dword cmerc
        mov  eax,dword cswer
        add  dword noxeq,eax
        cmp  dword stage,stgic
        jne  cmp10
err03:  mov  edi,dword r_cim
        add  edi,cfp_f
        movzx edi,byte [edi]
        cmp  edi,ch_mn
        je   cmpce
        xor  eax,eax
        mov  dword scnrs,eax
        mov  dword errsp,esp
        call scane
        cmp  esi,t_smc
        jne  err03
        xor  eax,eax
        mov  dword errsp,eax
        mov  dword cwcof,4*cdcod
        mov  ecx,offset ocer_
        call cdwrd
        mov  eax,dword cwcof
        mov  dword (4*cmsoc)[esp],eax
        mov  dword (4*cmffc)[esp],esp
        call cdwrd
        jmp  cmpse
err04:  cmp  dword errft,num03
        jae  labo1
        cmp  dword kvert,nm320
        je   err06
        xor  eax,eax
        mov  dword r_ccb,eax
        mov  dword cwcof,4*cccod
        call ertex
        sub  esp,4
erra4:  add  esp,4
        cmp  esp,dword flprt
        je   errc4
        cmp  esp,dword gtcef
        jne  erra4
        mov  dword stage,stgxt
        mov  eax,dword r_gtc
        mov  dword r_cod,eax
        mov  dword flptr,esp
        xor  eax,eax
        mov  dword r_cim,eax
        xor  eax,eax
        mov  dword cnind,eax
errb4:  cmp  dword dword ptr kverl,0
        jnz  err07
        jmp  exfal
errc4:  mov  esp,dword flptr
        jmp  errb4
err05:
        cmp  dword dword ptr dmvch,0
        jnz  err08
err06:  cmp  dword dword ptr kverl,0
        jz   labo1
        call ertex
err07:  cmp  dword errft,num03
        jae  labo1
        dec  dword kverl
        mov  esi,dword r_ert
        call ktrex
        mov  ecx,dword r_cod
        mov  dword r_cnt,ecx
        mov  ebx,ebp
        sub  ebx,ecx
        mov  dword stxoc,ebx
        mov  edi,dword flptr
        mov  eax,dword [edi]
        mov  dword stxof,eax
        mov  edi,dword r_sxc
        or   edi,edi
        jz   lcnt1
        xor  eax,eax
        mov  dword r_sxc,eax
        mov  dword stxvr,offset nulls
        mov  esi,dword [edi]
        jmp  esi
err08:  mov  edi,dword dmvch
        or   edi,edi
        jz   err06
        mov  eax,dword [edi]
        mov  dword dmvch,eax
        call setvr
s_yyy:  jmp  err08
        .sbttl "s p i t b o l -- here endeth the code"
        .end
