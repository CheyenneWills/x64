; copyright 1987-2012 robert b. k. dewar and mark emmer.
; 
; this file is part of macro spitbol.
; 
;     macro spitbol is free software: you can redistribute it and/or modify
;     it under the terms of the gnu general public license as published by
;     the free software foundation, either version 3 of the license, or
;     (at your option) any later version.
; 
;     macro spitbol is distributed in the hope that it will be useful,
;     but without any warranty; without even the implied warranty of
;     merchantability or fitness for a particular purpose.  see the
;     gnu general public license for more details.
; 
;     you should have received a copy of the gnu general public license
;     along with macro spitbol.  if not, see <http://www.gnu.org/licenses/>.

; configuration information for inter.s
;
;%define linux 1
;define winnt 0

;        segment declarations macros
;
	%macro	cseg_ 0
	section	.text
	%endmacro

	%macro	csegend_ 0
	%endmacro


	%macro	dseg_ 0
	section	.text 
	%endmacro

	%macro	dsegend_ 0
	%endmacro

	%macro	bssseg_ 0
	section	.bss
	%endmacro

	%macro	bsssegend_ 0
	%endmacro

	%macro	header_ 0
                cseg_
                csegend_
                dseg_
                dsegend_
	%endmacro

; structure definition macros
;
;        .macro  struc name
;        .struct 0
;        .endm

;        .macro  ends name
;        dseg_
;        .endm

; define how data locations in the minimal code are accessed from
; assembly-language and c routines.  "direct" is non-zero to make
; the symbols public for direct access, zero to have access via
; a table of pointers and the minadr procedure.
;
;direct=1

; define how floating point results are returned from a function
; (either in st(0) or in edx:eax.
;fretst0=1
;freteax=0

%define	direct	1
%define	fretst0	1
%define	freteax	0

; macros defining whether a leading underscore is required for public minimal
; names that will be referenced from c.
;

	%macro	address  1
	dd	%1
	%endmacro

	%macro	ext 2
	extern	%1:%2
	%endmacro
	
; 	%macro	ext	2
; 	extern	%1
; 	%endmacro

	%macro	cext  1
	extern	%1
	%endmacro

	%macro	def 3
%1:	%2	%3
	%endmacro

	%macro	pubdef	3
	gloal	%1
%1:	%2	%3
	%endmacro

	%macro	pubname 1
	global	%1
	%endmacro

	%macro	proc 2
%1:
	%endmacro

	%macro	procname 0
	%endmacro

	%macro	cproc 1
%1:
	%endmacro

	%macro	cendp 0
	%endmacro

	%macro	publab 1
	global	%1
	%endmacro

; call c function.  intel follows standard c conventions, and
; caller pops arguments.

	%macro	callc 2
	call	%1
%if  	%2
	add	esp,%2
%endif
	%endmacro

; intel runs in one flat segment.  far calls are the same as near calls.
	%macro	callfar 2
	extern	%1
	callc 	%1,%2
	%endmacro

; return from an assembly-language function that will be called by c.
; caller pops arguments
	%macro	retc 0
	ret
	%endmacro

