* prep - simple pre-processor 
	target = (differ(host(0)) host(0), 'unix_64_asm')
	target break('_') . os '_' break('_') . ws '_' rem . asm

	defined = table(10)
	defined[asm] = defined[os] = defined[ws] = 1
	defined['1'] = 1

	output = 
	&anchor = &trim = 1
	&dump = 3
	skip = 0
	:(next)
copy
	output = line
next

*	Note that '.if' or '.fi' must be followed by single space.

	line = input					:f(finis)


*  look for extended comment, starts with line '/*' and ends with '*/'.

	differ(xcomment)				:s(xcomment.inside)
* 	here when in normal text, looking for extended comment
	line '/*' = ';'					:f(xcomment.done)
	outfile = '; beg comment'
	xcomment = 1					:(xcomment.done)

xcomment.inside

*	here if inside extended comment, look for closing line
	line '*/' = ';'					:f(xcomment.fix)
	outfile = '; end comment'

	xcomment =  				:(xcomment.done)

xcomment.fix
*	here to insert semicolon at start of line in extended comment body
	line = ';' line

xcomment.done

	line '.if'					:s(pp.if)
	line '.fi'					:s(pp.fi)

* here if not directive, so just copy it out unless skipping
	ne(skip)					:s(next)f(copy)

pp.if	
*	strip off directive

	line len(3) span(' ')  =

*	add ' 1 ' at end, to ensure there are two names, and if only one, then and is true
* 	only if that name is defined

	line = line ' 1 '

*	assume will skip

	skip = 1

*	get first name

	line break(' ') . name span(' ') =

*	skip if name not defined

	ident(defined[name])				:s(next)

*	get second name, or '1' if only one name was present

	line break(' ') . name span(' ') =

*	skip if name not defined
	ident(defined[name])				:s(next)

*	one or both names defined, so disable skip to include body of if

	skip = 0					:(next)	

pp.fi	skip = 0					:(next)

err
	terminal = 'illegal if - translation terminated'		:(finis)
finis
	&dump = 0
end
	

