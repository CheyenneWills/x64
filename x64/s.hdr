
	bits	64
        section	.text

;
;  no header code in 386 version.
;
	%include	"x64.h"

	extern	_rc_
	extern	zz
	extern	osisp
	extern	compsp
	extern	save_regs
	extern	restore_regs

	%macro	ZZZ	1
	call	save_regs
	mov	qword [zz_zz],%1
	mov	qword [zz_xl],XL
	mov	qword [zz_xr],XR
	mov	qword [zz_xs],XS
	mov	qword [zz_wa],WA
	mov	qword [zz_wb],WB
	mov	qword [zz_wc],WC
	mov	qword [zz_w0],W0
	mov	qword [zz_cp],CP
; switch to C's stack
	mov	qword [compsp],rsp
	mov	rsp,qword [osisp]
 	call	zz
	call	restore_regs
;	save C's stack pointer
	mov	qword [osisp],rsp
;	restore compiler stack pointer
	mov	rsp,qword [compsp]
	%endmacro
%define zz_trace
%ifdef zz_trace
	extern	zz_cp
	extern	zz_xl
	extern	zz_xr
	extern	zz_xs
	extern	zz_wa
	extern	zz_wb
	extern	zz_wc
	extern	zz_w0
	extern	zz_zz
	extern	zz_0
	extern	zz_1
	extern	zz_2
	extern	zz_3
	extern	zz_4
	extern	zz_arg
	extern	zz_num
%endif
	global	start

;   Table to recover type word from type ordinal
;

	extern	_rc_
	global	TYPET
	section .data
	
        dq B_ART   ; ARBLK type word - 0
        dq B_CDC   ; CDBLK type word - 1
        dq B_EXL   ; EXBLK type word - 2
        dq B_ICL   ; ICBLK type word - 3
        dq B_NML   ; NMBLK type word - 4
        dq P_ABA   ; P0BLK type word - 5
        dq P_ALT   ; P1BLK type word - 6
        dq P_ANY   ; P2BLK type word - 7
; next needed only if support real arithmetic CNRA
;        dq B_RCL   ; RCBLK type word - 8
        dq B_SCL   ; SCBLK type word - 9
        dq B_SEL   ; SEBLK type word - 10
        dq B_TBT   ; TBBLK type word - 11
        dq B_VCT   ; VCBLK type word - 12
        dq B_XNT   ; XNBLK type word - 13
        dq B_XRT   ; XRBLK type word - 14
        dq B_BCT   ; BCBLK type word - 15
        dq B_PDT   ; PDBLK type word - 16
        dq B_TRT   ; TRBLK type word - 17
        dq B_BFT   ; BFBLK type word   18
        dq B_CCT   ; CCBLK type word - 19
        dq B_CMT   ; CMBLK type word - 20
        dq B_CTT   ; CTBLK type word - 21
        dq B_DFC   ; DFBLK type word - 22
        dq B_EFC   ; EFBLK type word - 23
        dq B_EVT   ; EVBLK type word - 24
        dq B_FFC   ; FFBLK type word - 25
        dq B_KVT   ; KVBLK type word - 26
        dq B_PFC   ; PFBLK type word - 27
        dq B_TET   ; TEBLK type word - 28
;
;   Table of MINIMAL entry points that can be dded from C
;   via the minimal function (see inter.asm).
;
;   Note that the order of entries in this table must correspond
;   to the order of entries in the CALL enumeration in osint.h
;   and osint.inc.
;
	global	START
	global calltab
calltab:
        dq   RELAJ
        dq   RELCR
        dq   RELOC
        dq   ALLOC
        dq   ALOCS
        dq   ALOST
        dq   BLKLN
        dq   INSTA
        dq   RSTRT
        dq   START
        dq   FILNM
        dq   DTYPE
;       dq   ENEVS ;  Engine words
;       dq   ENGTS ;   not used

	global	GBCNT
	global	HEADV
	global	MXLEN
	global	STAGE
	global	TIMSX
	global	DNAMB
	global	DNAMP
	global	STATE
	global	B_EFC
	global	B_ICL
	global	B_SCL
	global	B_VCT
	global	B_XNT
	global	B_XRT
	global	STBAS
	global	STATB
	global	POLCT
	global  TYPET
	global	LOWSPMIN
	global	FLPRT
	global	FLPTR
	global	GTCEF
	global	HSHTB
	global	PMHBS
	global	R_FCB
	global	C_AAA
	global	C_YYY
	global	G_AAA
	global	W_YYY
	global	S_AAA
	global	S_YYY
	global	R_COD
	global	KVSTN
	global	KVDMP
	global	KVFTR
	global	KVCOM
	global	KVPFL
	global	CSWFL
        global  STMCS
        global  STMCT
	global	B_RCL
	global	END_MIN_DATA

        extern LDR_
        extern STR_
        extern OVR_
        extern DVI_
        extern RMI_
        extern CVD_
        extern RTI_
        extern ITR_
        extern ADR_
        extern SBR_
        extern MLR_
        extern DVR_
        extern NGR_
        extern ATN_
        extern CHP_
        extern COS_
        extern ETX_
        extern LNF_
        extern SIN_
        extern SQR_
        extern TAN_
        extern CPR_

	global	MINCP
; MINCP - Minimal Code Pointer Register (CP)
MINCP:	dd	0
